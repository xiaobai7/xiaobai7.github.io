<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[2017，跟过去的自己说再见]]></title>
      <url>/2017/12/19/life-2017-summary/</url>
      <content type="html"><![CDATA[<p>2017年，我的本命年，这一年到底过得怎么样？还请我慢慢的道来~</p>
<p>在写这篇文章的时候，特意去看了下去年这个时候写的那篇文章，尤其是最后自己给自己定的几个目标，希望脸不要打的太疼：<br><a id="more"></a></p>
<ul>
<li style="list-style: none"><input type="checkbox"> <del>看几本自己喜欢看的书。</del><strong>这一年，大多数看的是技术书，其他类型的书一本也没看，唉╮(╯_╰)╭</strong></li>
<li style="list-style: none"><input type="checkbox" checked> 健身、减肥。 <strong>累计跑步600公里，减重25斤！</strong></li>
<li style="list-style: none"><input type="checkbox" checked> 买一块超大的显示器。<strong>入手LG 27寸 4k 显示器，型号27UD68，要对自己的眼睛好一点。</strong></li>
<li style="list-style: none"><input type="checkbox"> <del>考驾照。</del><strong>木有考，木有车，深圳的驾校水太深，没人带，我放弃了(〒︿〒)</strong></li>
<li style="list-style: none"><input type="checkbox" checked> 多写博客。<strong>累计编写39篇博文，勉强完成。</strong></li>
<li style="list-style: none"><input type="checkbox" checked> 去丽江旅行一次。<strong>去台湾玩了一周，暂且算完成吧！</strong></li>
</ul>
<p>所以完成率是66.7%，也还行，不算很差吧，至少及格了，感觉有点自我安慰的味道。都说在本命年会很不顺，但是命运，运气这种事情，不能当真，随便想想就好了，努力才是最重要的，毕竟我是个不相信玄学的人。那回过头来，这一年到底干了些啥？</p>
<h1 id="你怎么胖了这么多"><a href="#你怎么胖了这么多" class="headerlink" title="你怎么胖了这么多"></a>你怎么胖了这么多</h1><p>今年年初的时候，我的体重超过了我的身高，达到了历史的最高90kg。当每个人看到你的第一眼的时候，第一句话都是：“你怎么胖了这么多~”，心里异常的难受。当我看到镜子里的这个臃肿的自己，真的心里非常的厌恶自己，那段时间，不想跟朋友和同学联系，就怕他们口中说出这句话。</p>
<p>过完年，就匆匆的来到了深圳，由于个人的职业规划，最后选择跳槽，于3月初加入了理德铭这个大家庭，由龙岗区搬到了龙华区。2016年那一年，不运动，饮食混乱，胡吃海喝，所以导致了体重暴增。在搬家到龙华那一天路上，自己跟自己说：<strong>新的地方，新的开始，开始减肥吧</strong>。</p>
<p>所以便开始迈出了第一步，第一个五公里的路程，足足花了40分钟的时间。</p>
<p align="center"><br>    <img src="http://image.leeyom.top/20171219151369859479151.png" width="50%" height="50%"><br></p>

<p>之后听从几个喜欢运动的同学的建议，由于体重基数的问题，防止膝盖损失，每隔一天跑一次，一周大概跑三到四次，每次至少5公里，为了督促自己，每天都将自己跑步的里程数截图发到微信群里面，让朋友们监督自己。饮食方面，主要以清淡为主，晚上主要以水果，面包，鸡蛋，粥等低热量食物为主，彻底杜绝了宵夜。就这样，过了三个月，明显的发现，以前的牛仔裤裤头大了好多，这也是初次的意识到确实运动减肥有成效了。</p>
<p>时间来到现在，现在跑五公里，也不觉得费力了，现在27分20秒可以跑完5公里，用了九个多月的时间，总跑步里程达到了600公里，减重了25斤。</p>
<p align="center"><br>    <img src="http://image.leeyom.top/20171220151369974791898.png" width="50%" height="50%"><br></p>

<p>希望一人独处的念头，始终不变地存于心中。所以每天坚持跑步，来确保只属于自己的沉默的时间，对我的精神健康来说，成了具有重要意义的功课。至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。这是任何东西都无法替代的宝贵时刻。到今天，自己内心也迫切的想要跟大家分享内心的喜悦。<strong>跑步于我，除了身体上的变化，更重要的是对生活态度的改变，也许从此刻开始，跑步已经成了生活的一部分。</strong></p>
<h1 id="一名锤粉的信仰"><a href="#一名锤粉的信仰" class="headerlink" title="一名锤粉的信仰"></a>一名锤粉的信仰</h1><p>5月初，老罗终于在微博宣布，2017年锤子科技春季新品发布会将在深圳深圳湾体育中心举行，对于广大的锤友来说是一个天大的好消息。自己也很幸运，一方面自己就在深圳工作，一方面抢到了一张票。哈哈～</p>
<p align="center"><br>    <img src="http://image.leeyom.top/20171221151386520632574.jpg" width="50%" height="50%"><br></p><br>发布会当晚，那种现场的气氛，让我真实感受到，这不是一个人座电脑面前看直播的孤单，而是一群来自五湖四海的锤友们大狂欢。那天晚上，有幸见证了坚果pro的诞生，发布会上老罗哽咽了。<br><p align="center"><br>    <img src="http://image.leeyom.top/20171221151386541663251.jpg"><br></p>

<blockquote>
<p>“我预感到我们后面会越走越顺，会卖疯了…..如果有一天我们后面卖了几百万台、几千万台……有一天傻X都在用我们的手机，你要知道这个其实……这是给你们做的。”</p>
</blockquote>
<p>我一直跟别人说，我最喜欢的两家科技公司是锤子和苹果，因为我觉得这两家公司是为数不多的在认真做产品的公司。作为一名理性的锤粉和果粉，注意是理性，秉承着实用主义，并不会去追求各种新品。老罗那种认真的做产品的态度，不是吹完牛逼抬屁股走人了，而是能够把自己的想法付诸行动，并且用心做到极致，我觉得是一众锤粉支持他的理由。那锤粉到底是怎样的一群人？用老罗自己的回答:</p>
<p></p><p align="center"><br>    <img src="http://image.leeyom.top/20171221151386545634805.jpg"><br></p><br>我很希望老罗能成功下去，因为如果他成功了，对和他有同样态度，同样信仰，同样价值观的理想主义者来说是莫大的鼓舞和激励。希望下次还在深圳开发布会，期待T3。<p></p>
<h1 id="宝岛台湾七日之行"><a href="#宝岛台湾七日之行" class="headerlink" title="宝岛台湾七日之行"></a>宝岛台湾七日之行</h1><p>七月份，很幸运，由于公司每年都有一次旅游的福利，有幸去宝岛台湾游玩了6天。</p>
<p>第一天去了台湾最南端的小镇-垦丁老街，由于到了垦丁已经是下午了，所以大家觉得去垦丁的南湾海滩游泳。<br><img src="http://image.leeyom.top/20171222151394323314665.png" alt="垦丁"><br><img src="http://image.leeyom.top/20171222151394307457778.png" alt="南湾海滩"><br>到了晚上，那自然就是吃吃喝喝，那必须去垦丁夜市，一品卤味，原住民烤山猪肉，<br>QQ蛋奶，火烤牛肉等等。<br><img src="http://image.leeyom.top/20171222151394326932992.png" alt="QQ蛋奶"></p>
<p>第二天，进入高雄市，去了猫鼻头，鹅銮鼻灯塔。<br><img src="http://image.leeyom.top/20171222151394331336631.png" alt="鹅銮鼻灯塔"><br><img src="http://image.leeyom.top/20171222151394334737807.png" alt="猫鼻头"><br>晚上逛高雄夜市，一路吃吃吃。<br><img src="http://image.leeyom.top/20171222151394353132981.png" alt="高雄夜市"></p>
<p>第三天，前往座落于嘉义县阿里山的【达娜伊谷】，是邹族的聚落。达娜伊谷的壮观景色与周边山区形成了股淡雅幽静的气息。园区内设有餐厅，值得推赞的是老板的烤山猪肉，非常美味可口。园内还有原住民的表演秀，展现出原住民的热情欢迎。如果厌倦了忙碌的城市，可以来到充满自然味道的达娜伊谷自然生态公园，吸收一下森林所散发出来的新鲜空气，有助于消除堆积下来的压力哦！<br><img src="http://image.leeyom.top/20171222151394385973756.png" width="50%" height="50%"><br><img src="http://image.leeyom.top/20171222151394390226271.png" width="50%" height="50%"><br><img src="http://image.leeyom.top/20171222151394412495223.png" alt="20171222151394412495223.png"></p>
<p>第四天，那自然必须去日月潭，日月潭湖中间有座寺庙，叫玄光寺。玄光寺里有个老奶奶在卖茶叶蛋(老奶奶已经老了，都是他的孩子在卖)，就是鼎鼎大名的阿婆茶叶蛋。尝了几个，也就那样吧，毕竟我也是吃的起茶叶蛋的人了。哈哈～<br><img src="http://image.leeyom.top/20171222151394422192940.png" alt="20171222151394422192940.png"><br><img src="http://image.leeyom.top/20171222151394424131813.png" alt="20171222151394424131813.png"><br><img src="http://image.leeyom.top/20171222151394429579669.png" alt="20171222151394429579669.png"></p>
<p>第五天，来到台湾东部的九份老街，听说千与千寻的部分场景取景于此，所以可以看到很多店里都有千与千寻的手办玩偶，九份老街最出名的小吃那自然是赖阿婆九份芋圆，非常好吃。<br><img src="http://image.leeyom.top/2017122215139443979754.png" alt="2017122215139443979754.png"><br><img src="http://image.leeyom.top/2017122215139444744123.png" alt="2017122215139444744123.png"><br>下午乘车进入台湾最繁华的台北市，其中比较著名的地标就是101大楼了，登上89层观景台，台北市美景一览无余，美不胜收。<br><img src="http://image.leeyom.top/201712221513944603719.png" alt="201712221513944603719.png"><br>第六天，上午前往淡水老街，淡水鱼丸，鱼酥等小吃脍炙人口，下午就乘坐飞机返回深圳，6天的台湾行程就到此结束。<br>这6天中让我印象很深刻：</p>
<ul>
<li>台湾夜市的街道非常干净，居然找不到一个垃圾桶，游客自己的垃圾都要随身带走，或者给小吃店的老板们收集。</li>
<li>台湾的牛肉面和牛肉汤面是有区别的，牛肉汤面里面有实打实的牛肉，而牛肉面里面是没有牛肉的哦，商家在菜单中都会标明，后来听导游说这是台湾这边法律所规定的，反观国内，兰州牛肉拉面，咳咳～自己体会。</li>
<li>其他的，吃吃吃~</li>
</ul>
<p><strong>有机会还是出去走走吧~</strong>~</p>
<h1 id="首次进入开源世界"><a href="#首次进入开源世界" class="headerlink" title="首次进入开源世界"></a>首次进入开源世界</h1><p>在我还没有接触github之前，对于开源这个概念很笼统，简单一点的理解，就是人家的做好的东西，免费给你使用。当我开始了解git，知道github的存在的时候，才发现，原来github上有这么多的优秀的项目，而且开源项目的维护人都是默默无闻的进行维护。很多的时候，自己一直是拿来主义居多，参与的概率很小，正如玉伯大牛说的：<strong>在开源世界里，参与比主导更重要</strong>，而我却恰好丢失了这一块。所以我开始了在github上进行了分享，虽然现在写的东西没啥技术含量，star数量少的可怜，但是万一能帮到其他在跟我一样采坑的人，那也是不错的嘛。</p>
<p><img src="http://image.leeyom.top/20171222151394606957418.png" alt="20171222151394606957418.png"></p>
<h1 id="生活总有点不顺"><a href="#生活总有点不顺" class="headerlink" title="生活总有点不顺"></a>生活总有点不顺</h1><p>9月份中旬的时候，想往常一样接到我妈的电话，我以为又是让我帮她充话费，或者手机又哪里不不会操作了，然后像往常一样接通了电话。</p>
<p>“妈，有什么事情？”<br>“你爸回老家了。”<br>“回家干嘛，是回家办什么事嘛？”<br>“你爸生病了，需要回家做手术~”</p>
<p>当时我听到这个消息的时候，整个人都懵掉了，感觉心里很难受，在安慰我妈以后，我赶紧拨通了我爸的电话询问情况，然后打电话让在长沙的表姐带我爸去长沙湘雅医院检查。在经过几天煎熬的等待结果后，最终医生的结论是我爸得了疝气，只需要做一个小手术就行，没有什么大的问题，这样悬着的心落了下来。经过这么次事件，再次让我感受到，家人健康平安比什么都重要。父母年龄已经大了，我们也工作了，与父母相处的时间也越来越少，真的要珍惜和父母相处的时光，不要让他们担心，毕竟父母永远是最爱我们的人。</p>
<h1 id="跟过去的自己说再见"><a href="#跟过去的自己说再见" class="headerlink" title="跟过去的自己说再见"></a>跟过去的自己说再见</h1><p>新的一年也即将来临，还是跟往年一样，给自己定几个小目标：</p>
<ul>
<li>薪资涨涨涨~哈哈，这个够实在。</li>
<li>跑一次半马或者全马。</li>
<li>坚持运动，希望年底能看到腹肌。</li>
<li>亲自DIY一台主机。</li>
<li>github 开源项目star数量突破100。</li>
<li>看5本除技术以外的书籍。</li>
<li>参加一次公益活动。</li>
<li>入手期待了两年的Smartisan T3。</li>
</ul>
<p>最后用一句话总结2017年：</p>
<blockquote class="blockquote-center"><p> 妈妈说过，要往前走，就得先忘掉过去。我想，这就是跑的用意。<br><strong>《阿甘正传》</strong></p>
</blockquote>
<p><img src="http://image.leeyom.top/20171222151394824425317.png" alt="20171222151394824425317.png"></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker初探]]></title>
      <url>/2017/12/14/docker-preliminary-study/</url>
      <content type="html"><![CDATA[<p>最近准备着手搭建一套微服务框架，其中准备用Docker进行容器化部署，所以就补习下Docker方面的知识。</p>
<a id="more"></a>
<h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><p><a href="https://github.com/moby/moby" target="_blank" rel="noopener">Docker</a>目前在 github 上差不多四万六千多个 star，可见其火爆程度。那 Docker 到底是什么呢？Docker 是由 go 语言编写的，基于 Linux 内核，对进程进行封装隔离，属于属于操作系统层面的虚拟化技术。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>
<h1 id="为什么要使用Docker"><a href="#为什么要使用Docker" class="headerlink" title="为什么要使用Docker"></a>为什么要使用Docker</h1><p>当我们使用微服务架构后，我们将原本一个系统，按照业务拆分成多个子系统，而这多个子系统，都是部署在独立的环境中，互相隔离。在没有Docker出现之前，我们是通过虚拟机的方式部署多个子系统，那样是非常的消耗计算机资源。而有了Docker，同样相同配置的计算机，我们可以部署更多的应用。并且Docker启动的速度非常的快，基本是秒级和毫秒级别的，而虚拟机启动的速度，大家想想就知道了。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Docker有三个比较重要的概念，分别是：</p>
<ol>
<li>容器（Container）</li>
<li>镜像（Image）</li>
<li>仓库（Repository）</li>
</ol>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><blockquote>
<p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系 统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件 系统。<br>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文 件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</blockquote>
<p>我所理解的Docker镜像，就是一个小型的操作系统，只是这个操作系统没有我们日常使用的系统比如Windows这么庞大，他提供了应用运行的最小环境。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote>
<p>镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>
</blockquote>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><blockquote>
<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。<br>一个 Docker Registry 中可以包含多个仓库（Repository），每个仓库可以包含多个标签，每个标签对应一个镜像。<br>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>
</blockquote>
<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>由于我使用的机器是mac，所以就以mac为例。</p>
<p>从<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Docker官网</a>官网下载对应的dmg文件，然后打开将其拖到<code>Application</code>文件夹，中间会输入用户名密码，这样就安装完成了，貌似有点简单噢。</p>
<p align="center"><br>    <image src="http://image.leeyom.top/20171214151326247025319.jpg"><br></image></p>

<p>Docker这个LOGO还是蛮可爱的，一个海豚背上驮着一个集装箱。接下来点击Docker，运行Docker。运行终端，查看Docker是否启动，终端分别执行<code>docker --version</code>、<code>docker-compose --version</code>、<code>docker-machine --version</code>命令，若打印如下的内容，代表Docker是安装成功的。</p>
<p align="center"><br>    <image src="http://image.leeyom.top/20171214151326378432015.jpg"><br></image></p>

<p>尝试创建一个Nginx服务器，终端输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure>
<p>浏览器访问：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a>，页面出现<code>Welcome to nginx!</code>，说明Docker在mac上是安装成功的。如果镜像拉取非常非常慢，请先尝试切换镜像源：<a href="#mirrorSpeed">镜像加速</a>。</p>
<p>要停止 Nginx 服务器并删除执行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop webserver</span><br><span class="line">docker rm webserver</span><br></pre></td></tr></table></figure>
<h1 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h1><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a><span id="mirrorSpeed">镜像加速</span></h2><p>由于国内的网络问题，拉取镜像是非常慢，则需要配置国内的镜像加速，这里使用的是Docker官方提供的中国的镜像地址：<code>https://registry.docker-cn.com/</code>。mac系统，在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。验证是否启用了该镜像地址，终端输入：<code>docker info</code>，若看到如下内容，说明是配置成功的。</p>
<p align="center"><br>    <image src="http://image.leeyom.top/20171214151326501334897.png"><br></image></p>

<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>获取镜像的命令是：<code>docker pull</code>，其命令格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>
<ul>
<li>Docker Registry 地址：地址格式一般是 &lt;域名/IP&gt;:[:端口号]。默认的地址是Docker Hub。</li>
<li>仓库名：即&lt;用户名&gt;/&lt;软件名&gt;，对于Docker Hub，如果不给出用户名，则默认是<code>library</code>，也就是官方镜像。</li>
</ul>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">bf5d46315322: Pull complete</span><br><span class="line">9f13e0ac480c: Pull complete</span><br><span class="line">e8988b5b3097: Pull complete</span><br><span class="line">40af181810e7: Pull complete</span><br><span class="line">e6f7c7e5c03e: Pull complete</span><br><span class="line">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class="line">Status: Downloaded newer image for ubuntu:16.04</span><br></pre></td></tr></table></figure>
<p>上面的命令没有给出Docker镜像仓库的地址，因此会从Docker Hub获取镜像。镜像名称为<code>ubuntu:16.04</code>，因此将会获取官方镜像 library/ubuntu 仓库中标签为 16.04 的镜像。</p>
<p>运行镜像里面的容器的命令是：<code>docker run</code>，比如在上面刚下载的ubuntu:16.04这个镜像里启动bash进行交互操作，执行如下的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm \</span><br><span class="line">ubuntu:16.04 \</span><br><span class="line">bash</span><br></pre></td></tr></table></figure>
<h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>使用命令<code>docker image ls</code>。</p>
<p align="center"><br>    <image src="http://image.leeyom.top/20171214151326684081409.png"><br></image></p>

<p>列表包含了仓库名、标签、镜像ID、创建时间、占用空间。</p>
<p>其他列出镜像的指令：</p>
<ul>
<li><code>docker image ls -a</code>：列出所有的镜像，包括中间镜像。</li>
<li><code>docker image ls nginx</code>：列出部分镜像，这里是列出nginx相关的镜像。</li>
</ul>
<h2 id="定制镜像"><a href="#定制镜像" class="headerlink" title="定制镜像"></a>定制镜像</h2><p>定制镜像有个重要的脚本：<code>Dockerfile</code>，这个脚本主要用来构建、定制镜像。下面用<code>Dockerfile</code>脚本来定制一个nginx镜像。</p>
<ol>
<li>创建一个目录：<code>mynginx</code></li>
<li>进入到该目录下面，在该目录下面创建一个文件名为<code>Dockerfile</code>的文件，终端输入命令：<code>touch Dockerfile</code></li>
<li><p>打开<code>Dockerfile</code>文件，添加如下的脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>
<ul>
<li><code>FROM</code> 用于指定基础镜像。</li>
<li><code>RUN</code> 用于执行命令。</li>
</ul>
</li>
<li><p>开始构建镜像，在<code>Dockerfile</code>文件所在目录，也就是文件夹<code>mynginx</code>下面，终端执行：<code>docker build -t nginx:v2 .</code>，后面有个点，代表上下文路径。</p>
<ul>
<li>镜像构建命令：<code>docker build [选项] &lt;上下文路径/URL/-&gt;</code></li>
<li>这里我们指定镜像名称为<code>nginx:v2</code>，通过命令：<code>docker run -d -p 80:80 --name webserver nginx:v2</code>即可运行该镜像，访问<a href="http://localhost/，发现nginx默认启动的页面已经被修改。" target="_blank" rel="noopener">http://localhost/，发现nginx默认启动的页面已经被修改。</a></li>
</ul>
</li>
<li><p>Dockerfile指令</p>
<ul>
<li>COPY：复制文件。</li>
<li>ADD：更高级的复制指令，如果<code>源路径</code>为一个<code>tar</code>压缩文件的话，压缩格式为<code>gzip</code>，<code>bzip2</code>以及<code>xz</code>的情况下，<code>ADD</code>指令将会自动解压缩这个压缩文件到<code>目标路径</code>去。在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD 。</li>
<li>CMD：容器启动命令，指定容器启动程序及参数。</li>
<li>ENTRYPOINT：入口点</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac重装系统软件清单]]></title>
      <url>/2017/11/30/life-mac-tools-collection/</url>
      <content type="html"><![CDATA[<p>mac重装系统软件清单。</p>
<a id="more"></a>
<h1 id="系统增强"><a href="#系统增强" class="headerlink" title="系统增强"></a>系统增强</h1><ul>
<li><strong>BetterZip</strong> : 解压工具</li>
<li><strong>CHM View</strong> : chm文档查看器</li>
<li><strong>Scroll Reverser</strong> : 控制鼠标滚轮反转</li>
<li><strong>SmoothScroll</strong> : 使鼠标滚轮变得丝滑顺畅</li>
<li><strong>Boom</strong> : 音效增强</li>
<li><strong>Bartender</strong> : 任务栏menu图标整理</li>
<li><strong>iStat Menus</strong> : 系统网速、cpu、内存监控工具</li>
<li><strong>Moom</strong> : 窗口分屏工具</li>
<li><strong>JD-GUI</strong> : Java反编译工具</li>
<li><strong>PDF Expert</strong> : 查看pdf</li>
<li><strong>Amphetamine</strong> : 防止mac休眠</li>
<li><strong>iHosts</strong> : 修改host文件</li>
<li><strong>WiFiSpoof</strong> : 修改电脑的mac地址</li>
<li><strong>远程桌面连接</strong> : mac电脑上远程连接windows</li>
<li><strong>iPic</strong> : 图床软件</li>
<li><strong>PicU</strong> : 开源图床软件，支持七牛云</li>
<li><strong>Giffox</strong>: gif录制</li>
<li><strong>Tooth Fairy</strong>: 快速连接AirPods</li>
<li><strong>TinyPNG4Mac</strong>: 图片压缩工具</li>
<li><strong>CleanMyMac</strong> : 清理mac电脑垃圾</li>
<li><strong>ShadowsocksX</strong> : 影梭，代理工具</li>
<li><strong>Path Finder</strong> : Finder增强版</li>
<li><strong>NTFS for mac</strong> : 访问windows格式的硬盘</li>
</ul>
<h1 id="影音播放"><a href="#影音播放" class="headerlink" title="影音播放"></a>影音播放</h1><ul>
<li><strong>网易云音乐</strong>: 音乐</li>
<li><strong>爱奇艺</strong>: 视频播放</li>
<li><strong>腾讯视频</strong>: 视频播放</li>
<li><strong>IINA</strong> : 开源视频播放器</li>
</ul>
<h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><ul>
<li><strong>百度网盘</strong></li>
<li><strong>搜狗输入法</strong></li>
<li><strong>迅雷</strong>：下载工具</li>
<li><strong>QQ</strong>：通讯工具</li>
<li><strong>微信</strong>：通讯工具</li>
<li><strong>HanderShaker</strong> : mac连接安卓手机</li>
<li><strong>TeamView</strong> : 桌面远程软件</li>
<li><strong>MacDown</strong> : 开源的markdown编辑器</li>
<li><strong>MWeb</strong>: markdown编辑器</li>
<li><strong>有道词典</strong>: 词典</li>
<li><strong>XMind</strong> : 思维导图软件</li>
<li><strong>Parallels Desktop</strong> : 虚拟机<ul>
<li>windows7虚拟机镜像备份</li>
<li>ubuntu虚拟机镜像备份</li>
</ul>
</li>
<li><strong>Foxmail</strong> : 邮箱客户端</li>
<li><strong>网易邮箱大师</strong>: 邮箱客户端</li>
<li><strong>office365</strong>: 文档办公<ul>
<li>Word</li>
<li>Execl</li>
<li>PPT</li>
<li>Onenote</li>
<li>Outlook</li>
</ul>
</li>
<li><strong>Captuocr</strong>: ocr软件</li>
</ul>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul>
<li><strong>FireFox</strong> : 浏览器</li>
<li><strong>Google Chrome</strong> : 浏览器</li>
<li><strong>IntelliJ IDEA</strong> : java开发IDE<ul>
<li>插件<ul>
<li>Alibaba Java Coding Guidelines</li>
<li>CamelCase</li>
<li>CodeGlance</li>
<li>GsonFormat</li>
<li>JRebel</li>
</ul>
</li>
</ul>
</li>
<li><strong>WebStorm</strong> : web开发工具<ul>
<li>插件备份<ul>
<li>CodeGlance</li>
</ul>
</li>
</ul>
</li>
<li><strong>DataGrip</strong> : 数据库管理软件<ul>
<li>插件备份<ul>
<li>CodeGlance</li>
</ul>
</li>
</ul>
</li>
<li><strong>SnailSVN</strong> : svn图形化管理工具</li>
<li><strong>SecureCRT</strong> : SSH远程连接工具</li>
<li><strong>SecureFX]</strong> : ftp工具</li>
<li><strong>Sublime Text</strong> : 文本编辑器<ul>
<li>插件备份<ul>
<li>CodeFormatter</li>
<li>ConvertToUTF8</li>
<li>SublimeAStyleFormatter</li>
<li>Codecs33</li>
</ul>
</li>
<li>主题备份<ul>
<li>soda-theme</li>
</ul>
</li>
</ul>
</li>
<li><strong>Beyond Compare</strong> : 文本比较工具</li>
<li><strong>Atom</strong> : 文本编辑器</li>
<li><strong>Postman</strong>: 接口测试工具</li>
<li><strong>SourceTree</strong> : git客户端工具</li>
<li><strong>rdm</strong> : redis可视化GUI界面</li>
<li><strong>eclipse</strong> : java开发IDE<ul>
<li>插件备份<ul>
<li>Darkest Dark</li>
<li>Subversion</li>
</ul>
</li>
</ul>
</li>
<li><strong>Star Order</strong> : github star项目管理工具</li>
<li><strong>Navicat Premium</strong> : 数据库连接管理工具</li>
<li><strong>MySQLWorkbench</strong> : mysql数据库管理工具</li>
<li><strong>iTerm2</strong> : 终端</li>
<li><strong>JDK</strong> : java开发工具包</li>
<li><strong>svn</strong> : 版本控制工具</li>
<li><strong>Tomcat</strong> : web容器</li>
<li><strong>maven</strong> : 项目依赖管理</li>
<li><strong>node.js</strong>: 让js运行在服务器端，稳定版<ul>
<li>安装cnpm</li>
<li>安装hexo<ul>
<li>hexo-deployer-git</li>
<li>hexo-generator-sitemap</li>
<li>hexo-git-backup</li>
</ul>
</li>
</ul>
</li>
<li><strong>git</strong>: 版本控制</li>
<li><strong>mysql</strong>: 安装数据库<ul>
<li>数据库数据备份</li>
</ul>
</li>
</ul>
<h1 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h1><ul>
<li><a href="http://xclient.info/" target="_blank" rel="noopener">精品mac应用分享</a></li>
<li><a href="http://mac-torrent-download.net/" target="_blank" rel="noopener">mac-torrent-download</a></li>
<li><a href="https://www.macappstore.net/" target="_blank" rel="noopener">macappstore.net</a></li>
<li><a href="https://www.waitsun.com/" target="_blank" rel="noopener">爱情守望者</a></li>
<li><a href="https://www.waerfa.com/" target="_blank" rel="noopener">MAC玩法儿</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux折腾笔记（不间断更新）]]></title>
      <url>/2017/11/12/linux-note/</url>
      <content type="html"><![CDATA[<p>整理并记录折腾linux过程中的一些笔记资料，linux版本是 ubuntu 16.04 LTS。</p>
<a id="more"></a>
<h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><ul>
<li>去<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/</a>下载安装包。</li>
<li>添加源：<code>sudo add-apt-repository ppa:fcitx-team/nightly</code></li>
<li>然后更新：<code>sudo apt-get update</code></li>
<li>开始安装<code>fcitx</code><ul>
<li>执行命令：<code>sudo apt-get install fcitx</code></li>
<li>出现错误，执行：<code>sudo apt-get -f install</code></li>
<li>然后再次执行：<code>sudo apt-get install fcitx</code></li>
</ul>
</li>
<li>安装fcitx的配置工具：<code>sudo apt-get install fcitx-config-gtk</code></li>
<li>安装fcitx的table-all包：<code>sudo apt-get install fcitx-table-all</code></li>
<li>安装im-switch工具：<code>sudo apt-get install im-switch</code></li>
<li>进入到搜狗输入法安装包所在文件夹，执行：<code>sudo dpkg -i sougoupingyin_2.1.0.deb</code></li>
<li>最后注销，重启，系统设置–&gt;语言支持，将键盘输入法系统设置为fcitx。</li>
<li>搜索出fcitx配置，将sogou输入法设为默认即可。</li>
</ul>
<h2 id="Tomcat端口占用问题"><a href="#Tomcat端口占用问题" class="headerlink" title="Tomcat端口占用问题"></a>Tomcat端口占用问题</h2><ol>
<li><p>linux环境下解决tomcat 8080端口被占用的方法：</p>
<ul>
<li>先查看是否有tomcat在运行，执行命令：<code>ps -ef |grep tomcat</code>，若出现如下的内容，说明tomcat正在运行<br><img src="http://image.leeyom.top/blog/171130/gEhm4IF65L.png?imageslim" alt="mark"></li>
<li>输入命令：<code>netstat -anp|grep 8080</code>，找到这个端口对应的进程(PID)<br><img src="http://image.leeyom.top/blog/171130/BLKjjJ20Ei.png?imageslim" alt="mark"></li>
<li>杀死该进程：<code>kill -9 51379</code></li>
</ul>
</li>
<li><p>windows下解决tomcat 8080端口被占用的方法：</p>
<ul>
<li>输入命令：<code>netstat -aon|findstr &quot;8080&quot;</code>，找到了这个端口对应的进程(PID)<br><img src="http://image.leeyom.top/blog/171130/5GHl00hm24.png?imageslim" alt="mark"></li>
<li>查看什么应用占用了该端口，输入命令：<code>tasklist|findstr &quot;12956&quot;</code><br><img src="http://image.leeyom.top/blog/171130/ic63aiB8gg.png?imageslim" alt="mark"></li>
<li>杀死该进程，输入命令：<code>taskkill /pid 12956 /f</code><br><img src="http://image.leeyom.top/blog/171130/D26kDhB916.png?imageslim" alt="mark"></li>
</ul>
</li>
</ol>
<h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>ubuntu自带的主题感觉很丑，所以准备换个扁平化的主题-<code>Flatabulous</code>。安装步骤如下：</p>
<ul>
<li>安装Unity 图形化管理工具-<code>Unity Tweak Tool</code>，安装命令：<ul>
<li><code>sudo apt-get install unity-tweak-tool</code>。</li>
</ul>
</li>
<li>安装<code>Flatabulous</code>主题，并按顺序执行如下的命令：<ul>
<li><code>sudo add-apt-repository ppa:noobslab/themes</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install flatabulous-theme</code></li>
</ul>
</li>
<li>安装该主题配套的图标，按顺序执行如下的命令：<ul>
<li><code>sudo add-apt-repository ppa:noobslab/icons</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install ultra-flat-icons</code></li>
</ul>
</li>
</ul>
<p>安装完成后，打开<code>unity-tweak-tool</code>，修改主题和图标：</p>
<ul>
<li>点击<code>Theme</code>，选择<code>Flatabulous</code>。</li>
<li>点击<code>Icons</code>，选择<code>Ultra-flat</code>。</li>
<li>最后重启系统。</li>
</ul>
<p>最终效果图如下：</p>
<p align="center"><img src="http://og1m51u2s.bkt.clouddn.com/20171112151049907266113.png" width="80%" height="80%"></p>

<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>基本步骤如下：</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a>。</li>
<li>安装版本为：<code>jdk-8u151-linux-x64.tar.gz</code>。</li>
<li>我习惯将软件安装到<code>/usr/local/develop-tools/</code>目录，方便管理，如果没有<code>develop-tools</code>目录，先创建该目录。</li>
<li>进入到源码包所在的文件夹，将源码包解压到<code>/usr/local/develop-tools/</code>目录下。<ul>
<li><code>sudo tar -zxvf jdk-8u151-linux-x64.tar.gz -C /usr/local/develop-tools/</code></li>
</ul>
</li>
<li>编辑全局环境变量：<ul>
<li>编辑配置文件：<code>sudo vim /etc/profile</code></li>
<li>在该文件的最尾巴，添加下面内容：<pre><code class="xml"># JDK
JAVA_HOME=/usr/local/develop-tools/jdk1.8.0_151
JRE_HOME=$JAVA_HOME/jre
PATH=$PATH:$JAVA_HOME/bin
CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export JAVA_HOME
export JRE_HOME
export PATH
export CLASSPATH
</code></pre>
</li>
<li>执行命令，刷新该配置：<code>source /etc/profile</code></li>
<li>检查JDK是否生效：<code>java -version</code></li>
</ul>
</li>
</ul>
<h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><p>详情见：<a href="http://leeyom.top/2017/11/08/zookeeper-install/">zookeeper安装教程</a>。</p>
<h2 id="VMware安装ubuntu问题"><a href="#VMware安装ubuntu问题" class="headerlink" title="VMware安装ubuntu问题"></a>VMware安装ubuntu问题</h2><h3 id="VMware-tools-无法安装问题"><a href="#VMware-tools-无法安装问题" class="headerlink" title="VMware tools 无法安装问题"></a>VMware tools 无法安装问题</h3><p>使用VMware Workstation安装Ubuntu 16.04，<code>安装VMware Tools</code>选项按钮为灰色，如果不安装<code>VMware Tools</code>，则会出现以下几个问题：</p>
<ul>
<li>物理机无法向直接向虚拟机复制和粘贴。</li>
<li>虚拟机的分辨率无法进行自动适配。</li>
</ul>
<p>解决方法：</p>
<ol>
<li>先关闭虚拟机。</li>
<li>点击<code>编辑虚拟机设置</code>，添加<code>CD/DVD</code>驱动器。</li>
<li>接下来，驱动器介质，选择<code>使用ISO映像(M)</code>。</li>
<li>选择ISO映像地址，这个ISO映像就是<code>VMware Workstation</code>安装根目录下面的那个<code>linux.iso</code>，别选错了！</li>
<li>点击确定后，然后重启Ubuntu虚拟机，这个时候，会在左侧的任务栏看到一个CD/DVD，点击打开，将<code>VMwareTools-9.9.2-2496486.tar.gz</code>源码包拷贝到桌面，并解压。</li>
<li>进入到解压后的文件夹内，执行<code>sudo ./vmware-install.pl</code>，安装VMware Tools。</li>
<li>中间会有一些询问项，一路回车即可。</li>
<li>安装完成后，重启系统即可。</li>
</ol>
<h3 id="Ubuntu登陆后花屏"><a href="#Ubuntu登陆后花屏" class="headerlink" title="Ubuntu登陆后花屏"></a>Ubuntu登陆后花屏</h3><p><strong>虚拟机 –&gt; 设置 –&gt; 显示器 –&gt;加速3D图形加速前面的勾去掉就可以了</strong>，降低显卡的的负担。</p>
<h3 id="显示器分辨率问题"><a href="#显示器分辨率问题" class="headerlink" title="显示器分辨率问题"></a>显示器分辨率问题</h3><p>ubuntu登录后报错：<code>could not apply the stored configuration for monitors</code>，意思是无法将存储的配置应用于当前的显示器。解决办法就是：</p>
<ul>
<li>终端执行<code>sudo rm -f ~/.config/monitors.xml</code>，移除掉之前的显示器配置文件即可，之后会自动生成当前分辨率分配置文件。</li>
</ul>
<h2 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h2><p>为了在windows平台使用<code>SecureCRT</code>和<code>Xshell</code>等终端工具连接ubuntu等linux服务器，linux服务器需要安装<code>SSH</code>，执行如下的命令：</p>
<ul>
<li><code>sudo apt-get install openssh-server</code></li>
</ul>
<p>确认ssh server是否启动，执行如下命令：</p>
<ul>
<li><code>ps -e | grep ssh</code></li>
</ul>
<p>如果只有<code>ssh-agent</code>，那<code>ssh-server</code>还没有启动，需要执行<code>/etc/init.d/ssh start</code>，如果看到<code>sshd</code>那说明<code>ssh-server</code>已经启动了。</p>
<p><code>ssh-server</code>配置文件位于<code>/etc/ssh/sshd_config</code>，在这里可以定义SSH的服务端口，默认端口是<code>22</code>，你可以自己定义成其他端口号，如222。然后重启SSH服务：</p>
<ul>
<li><code>sudo /etc/init.d/ssh resart</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper安装教程]]></title>
      <url>/2017/11/08/zookeeper-install/</url>
      <content type="html"><![CDATA[<p>zookeeper安装教程。</p>
<a id="more"></a>
<h1 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h1><h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><table>
<thead>
<tr>
<th style="text-align:center">系统</th>
<th style="text-align:center">开发环境</th>
<th style="text-align:center">生产环境</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Linux</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">Solaris</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">FreeBSD</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">Windows</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center">MacOS</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
</tr>
</tbody>
</table>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>ZooKeeper运行在java平台，需要<strong>JRE 1.6或者以上</strong>的版本。对于集群模式下的ZooKeeper部署，3个ZooKeeper服务进程是建议的最小进程数量。</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul>
<li>下载地址：<a href="http://apache.forsale.plus/zookeeper/" target="_blank" rel="noopener">http://apache.forsale.plus/zookeeper/</a>。</li>
<li>我下载的版本是<code>zookeeper-3.4.10</code>，这个版本比较稳定。</li>
</ul>
<h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><p>ZooKeeper有三种安装方式，分别是单机模式、集群模式、伪集群模式。</p>
<h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p>将下载的<code>zookeeper-3.4.10.tar.gz</code>压缩包解压到<code>/home/leeyom/develop-tools/</code>，执行命令：</p>
<ul>
<li><code>sudo tar -zxvf zookeeper-3.4.10.tar.gz -C /home/leeyom/develop-tools/</code></li>
</ul>
<p>在<code>/etc/profile</code>文件中加入ZooKeeper的环境变量设置，具体的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ZooKeeper</span><br><span class="line">export ZOOKEEPER_HOME=/home/leeyom/develop-tools/zookeeper-3.4.10</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf</span><br></pre></td></tr></table></figure>
<p>ZooKeeper服务器包含在单个的jar文件中，安装此服务需要用户创建一个配置文档，对其进行设置。进入ZooKeeper配置文件目录<code>/home/leeyom/develop-tools/zookeeper-3.4.10/conf</code>，该目录下面有一个参考的配置文件<code>zoo_sample.cfg</code>，可供参考。在conf目录下创建我们自己的配置文件<code>zoo.cfg</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-logs</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>
<p>目录<code>/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-data/</code>和<code>/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-logs/</code>默认是没有创建的，需要我们自己<strong>手动创建此目录</strong>，下面是每个参数的含义：</p>
<ul>
<li><strong>tickTime</strong>：基本的时间单元，以毫秒为单位，用他来指示心跳。</li>
<li><strong>dataDir</strong>：存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置。</li>
<li><strong>clientPort</strong>：监听客户端连接的端口。</li>
<li><strong>dataLogDir</strong> : 保存zookeeper日志路径，当此配置不存在时默认路径与dataDir一致。</li>
</ul>
<p>单机模式下需要注意：<strong>在这种配置方式下，是没有ZooKeeper副本，如果zookeeper服务器出现故障，zookeeper服务将会停止</strong>！。</p>
<h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>为了获得可靠的zookeeper服务，我们应该在一个集群上部署zookeeper。只要集群上的大多数zookeeper服务启动了，那么总的zookeeper服务便是可用的。另外，最好使用奇数台服务器。如果zookeeper拥有5台服务器，那么在最多2台服务器出现故障后，整个服务还可以正常使用。</p>
<p>具体的安装其实跟单机模式下基本上差不多，不同之处在于每台机器上的<code>conf/zoo.cfg</code>配置文件的参数设置不同，可以参考其中一台的机器的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">server.1=zoo1:2888:3888</span><br><span class="line">server.2=zoo2:2888:3888</span><br><span class="line">server.3=zoo3:2888:3888</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure>
<p>在这个配置文件中，出现几个新的参数，其含义如下：</p>
<ul>
<li><strong>initLimit</strong>：此配置表示允许follower连接并同步到leader的初始化时间，它以tickTime的倍数来表示。当超过设置倍数的tickTime时间，则连接失败。</li>
<li><strong>syncLimit</strong>：Leader服务器与follower服务器之间信息同步允许的最大时间间隔，如果超过次间隔，默认follower服务器与leader服务器之间断开链接。</li>
<li><strong>maxClientCnxns</strong>：限制连接到zookeeper服务器客户端的数量。</li>
<li><strong>server.id=host:port:port</strong>：表示了不同的zookeeper服务器的自身标识，作为集群的一部分，每一台服务器应该知道其他服务器的信息。用户可以从<code>server.id=host:port:port</code>中读取到相关信息。在服务器的data(dataDir参数所指定的目录)下创建一个文件名为myid的文件，这个文件的内容只有一行，指定的是自身的id值。比如，服务器“1”应该在myid文件中写入“1”。这个id必须在集群环境中服务器标识中是唯一的，且大小在1～255之间。这一样配置中，zoo1代表第一台服务器的IP地址。第一个端口号（port）是从follower连接到leader机器的端口，第二个端口是用来进行leader选举时所用的端口。所以，在集群配置过程中有三个非常重要的端口：<strong>clientPort：2181、port:2888、port:3888</strong>。</li>
</ul>
<h2 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h2><p>伪集群模式就是在单机环境下模拟集群的Zookeeper服务。</p>
<p>在zookeeper集群配置文件中，clientPort参数用来设置客户端连接zookeeper服务器的端口。server.1=IP1:2888:3888中，IP1指的是Zookeeper服务器的IP地址，2888为组成zookeeper服务器之间的通信端口，3888为用来选举leader的端口。由于伪集群模式中，我们使用的是同一台服务器，也就是说，需要在单台机器上运行多个zookeeper实例，所以我们必须要保证多个zookeeper实例的配置文件的client端口不能冲突。</p>
<blockquote>
<p>server.A=B:C:D：其中A是一个数字，代表第几号服务器，B是服务器的ip地址，C表示服务器与群集中的“领导者”交换信息的端口；当领导者失效后，D表示用来执行选举时服务器相互通信的端口。所以说伪集群的模式下，每个zookeeper实例需要保证clientPort、C、D三个端口都要不同，否则zookeeper服务将启动报错。</p>
</blockquote>
<p>首先先将<code>zookeeper-3.4.10.tar.gz</code>分别解压到server1，server2，server3目录下，执行如下的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server1</span><br><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server2</span><br><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server3</span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>server1</code>、<code>server2</code>、<code>server3</code>目录下先创建<code>data</code>和<code>dataLog</code>目录，然后在<code>server1/data/</code>目录下创建文件myid文件，并写入“1”，同样在<code>server2/data/</code>，目录下创建文件myid，并写入“2”，server3进行同样的操作。</li>
<li>然后分别在<code>server1/conf/</code>、<code>server2/conf/</code>、<code>server3/conf/</code>目录下创建<code>zoo.cfg</code>配置文件，三个配置文件如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 1</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server1/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server1/dataLog</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 2</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server2/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server2/dataLog</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 3</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server3/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server3/dataLog</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure>
<p>以上便是伪集群模式下的配置。</p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><ol>
<li><p>单机模式：</p>
<ul>
<li>进入到zookeeper的安装目录下的<code>bin</code>目录下。</li>
<li>执行命令：<code>bash zkServer.sh start</code></li>
<li><p>若出现如下的内容，不要以为就启动成功了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/leeyom/develop-tools/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>
<p>继续执行：<code>bash zkServer.sh status</code>，查看启动状态，若出现如下内容，才说明zookeeper服务才是真的启动成功，否则都是启动失败：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/leeyom/develop-tools/zookeeper-3.4.10/bin/../conf zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>集群模式下需要用户在每台 ZooKeeper 机器上运行单机模式下的命令，这里不再赘述。</p>
</li>
<li><p>在集群伪分布模式下，按先后顺序依次启动<code>Server1</code>、<code>Server2</code>、<code>Server3</code>。这里拿<code>Server1</code>示例。</p>
<ul>
<li>进入到<code>server1/bin</code>目录下。</li>
<li>执行<code>bash zkServer.sh start</code>命令。</li>
<li>出现<code>Starting zookeeper ...STARTED</code>提示，说明服务启动成功。</li>
</ul>
</li>
<li><p>其他命令，需要进入到<code>zookeeper-3.4.10/bin</code>目录下，然后执行如下命令：</p>
<ul>
<li>查看ZK服务状态: <code>bash zkServer.sh status</code></li>
<li>停止ZK服务：<code>bash zkServer.sh stop</code></li>
<li>重启ZK服务：<code>bash zkServer.sh restart</code></li>
</ul>
</li>
</ol>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>因为我实验的环境是ubuntu桌面版的linux系统，我是用普通账户登录的，我之前是将zookeeper安装到<code>/usr/local/develop-tools</code>文件夹下，然后执行命令：<code>sudo bash zkServer.sh start</code>启动服务。虽然说终端打印了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/develop-tools/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>
<p>我便以为服务启动了，其实是错误的，此时服务并没有启动，由于权限的问题，当我启动服务的时候，zookeeper在<code>/usr/local</code>目录下没有读写权限，所以导致服务启动失败。具体的解决办法是：</p>
<ul>
<li>方式一：<code>cd /usr/local/</code>目录下，执行chmod命令增加权限，然后再次启动。<ul>
<li><code>chmod a+xwr zookeeper-3.4.10/</code></li>
</ul>
</li>
<li>方式二：将zookeeper安装到<code>/home/leeyom/</code>目录下面，这样zookeeper不会出现读写权限的问题。</li>
</ul>
<p>所以我们在启动zookeeper服务的时候，最好要用<code>bash zkServer.sh status</code>命令检查下zookeeper服务状态，确保zookeeper服务启动。</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于前后端分离的思考和总结]]></title>
      <url>/2017/11/04/fontend-backend-separation/</url>
      <content type="html"><![CDATA[<p>我之前一直对前后端分离的思想一直很模糊，最近恰好碰上公司的项目进行重构，也采用前后端分离。所以就根据自己在实际项目中的开发，总结自己对于前后端分离中遇到的一些疑惑。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先在此之前，我跟大多数人一样，心中有如下的疑问？</p>
<ol>
<li>什么是前后端分离？</li>
<li>前后端分离的意义大不大？</li>
<li>如何进行前后端分离？</li>
</ol>
<p>那么文章将围绕这三个疑问进行展开，当然文章的重点还是总结如何进行前后端分离。</p>
<h1 id="什么是前后端分离？"><a href="#什么是前后端分离？" class="headerlink" title="什么是前后端分离？"></a>什么是前后端分离？</h1><p>前后端分离：就是前后端只通过JSON进行交流，前端通过ajax请求后台，后台返回json格式的数据（当然json只是一种可选的格式，并不是唯一的）。前端可以通过Vue、Angular实现组件化，降低前后端的耦合程度。</p>
<h1 id="前后端分离的意义大不大？"><a href="#前后端分离的意义大不大？" class="headerlink" title="前后端分离的意义大不大？"></a>前后端分离的意义大不大？</h1><ol>
<li>如果系统的业务比较复杂，网站前端变化远比后端变化频繁，则意义大。</li>
<li>该网站尚处于原始开发模式，数据逻辑与表现逻辑混杂不清，则意义大。</li>
<li>该网站要适配多平台，需要对设备的兼容性有要求，则意义大。</li>
<li>该网站将业务拆分成微服务，则意义大。</li>
</ol>
<h1 id="如何进行前后端分离？"><a href="#如何进行前后端分离？" class="headerlink" title="如何进行前后端分离？"></a>如何进行前后端分离？</h1><p>那如何进行前后端分离，这里我只针对后台来讨论，因为现在主要负责后台的开发，那至于说前端如何请求数据，前端数据的缓存等等这个就不在这里讨论了。要想实现前后端解耦，后端必须遵守RESTful API的设计准则。RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论，至于具体什么是 RESTful API，可以参考阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，便会对RESTful API 有个大概的了解。那要搭建一个RESTful API的后台项目具体需要考虑哪些东西呢？我根据我自己的实际开发，总结了如下几个点：</p>
<ol>
<li><strong>统一响应结构。</strong></li>
<li><strong>前台请求规范。</strong></li>
<li><strong>API接口文档。</strong></li>
<li><strong>统一异常处理。</strong></li>
<li><strong>后台参数验证。</strong></li>
<li><strong>跨域请求处理。</strong></li>
<li><strong>请求鉴权机制。</strong></li>
</ol>
<p>接下来将逐一的对每个点进行总结。</p>
<h1 id="统一响应结构"><a href="#统一响应结构" class="headerlink" title="统一响应结构"></a>统一响应结构</h1><p>我们在开发之前，需要跟前后端约定好，每次ajax请求，后端都需要返回一个统一的数据格式。如果格式不统一，前端请求每次拿到的数据很乱，如果前端页面变化的比较频繁，那么后期维护的成本很大。下面就是一个json格式的响应结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data : &#123; <span class="comment">// 请求数据，对象或数组均可</span></span><br><span class="line">        user_id: <span class="number">123</span>,</span><br><span class="line">        user_name: <span class="string">"tutuge"</span>,</span><br><span class="line">        user_avatar_url: <span class="string">"http://tutuge.me/avatar.jpg"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    msg : <span class="string">"请求成功！"</span>, <span class="comment">// 请求状态描述，调试用</span></span><br><span class="line">    code: <span class="number">500</span>, <span class="comment">// 业务自定义状态码，比如500表示请求失败，200表示请求成功</span></span><br><span class="line">    extra : &#123; <span class="comment">// 全局附加数据，字段、内容不定，可能为null</span></span><br><span class="line">        type: <span class="number">1</span>,</span><br><span class="line">        desc: <span class="string">"签到成功！"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的java的实体类<code>ResultBean.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"Request Success！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务自定义状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局附加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object etxra = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getEtxra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> etxra;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEtxra</span><span class="params">(Object etxra)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.etxra = etxra;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="前台请求规范"><a href="#前台请求规范" class="headerlink" title="前台请求规范"></a>前台请求规范</h1><p>后台的响应结构已经确定好，那么前端的请求是不是得规范一下呢，答案肯定是的！因为我们采用的是RESTful API设计原则，我们会严格按照约定来使用 HTTP method：</p>
<ul>
<li>GET: 查询<ul>
<li>若查询参数在3个以下（包含3个），采用如下的请求方式：<code>http://localhost:8080/app/getUserList?age=12&amp;name=Jack&amp;sex=1</code>，将参数拼接到url后面，后台采用@RequestParam注解接收。</li>
<li>若查询参数在三个以上，这里就采用POST请求，后台用@RequestBody注解将参数自动解析成查询的实体实例。</li>
</ul>
</li>
<li>POST: 创建<ul>
<li>请求参数类型为body，也就是json对象，将对应的参数封装成一个类，然后后台使用@RequestBody注解将参数自动解析成该类的一个实例。</li>
</ul>
</li>
<li>PUT: 修改<ul>
<li>第一个主键参数，他的请求url为：<code>http://localhost:8080/app/updateUser/{userId}</code>，采用@PathVariable注解接收。</li>
<li>第二个请求参数，类型为body，json对象，跟POST创建请求一样，只是该json对象只放修改的属性内容，采用@RequestBody注解接收。</li>
</ul>
</li>
<li>DELETE: 删除<ul>
<li>请求url：<code>http://localhost:8080/app/deleteUser/{userId}</code></li>
<li>后台采用@PathVariable注解接收参数。</li>
</ul>
</li>
</ul>
<p>其实关于GET查询这里，如果查询参数在三个以上的话，并不说一定要采用GET请求。我思考了下，这里用POST请求的方式更加合理，post请求参数类型可以为body，也就是用json对象。后台用@RequestBody注解将参数自动解析成查询的实体实例。虽然说不符合RESTful API设计原则，但是我觉得这里的<strong><em>业务合理性大于设计准则</em></strong>，因为像京东商城，他们的复杂的查询都是采用都是POST的请求方式，所以到底采用哪种方式，还是得根据业务需求来。</p>
<h1 id="API接口文档"><a href="#API接口文档" class="headerlink" title="API接口文档"></a>API接口文档</h1><p>写后台的同学有没有这样的烦劳，每次写完相关的接口，都要写相关的接口文档，然后跟前端小伙伴进行联调，过程很是繁琐和费时间。那为了解决这些问题，Swagger2 就是一个很好的解决方案，它与 spring mvc 整合后，我们只需要少量的注解，它便可以自动的帮我们生成一份 RESTful API 文档，大大的减轻了劳动力。因为之前有写过一篇关于这个问题文章：<a href="http://leeyom.top/2017/09/23/tech-spring-mvc-swagger2/">Spring MVC中使用Swagger2构建Restful API</a>，这里就不在重复叙述了。</p>
<h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><p>采用spring的AOP（面向切面编程），编写一个全局的异常处理切面类，统一处理所有的异常。定义一个类，然后用<code>@ControllerAdvice</code>注解将其标注即可，同时用<code>@ResponseBody</code>注解表示返回值可序列化为JSON字符串。代码如下(<code>ExceptionAspect.java</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(ExceptionAspect.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpMessageNotReadableException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpMessageNotReadableException</span><span class="params">(HttpMessageNotReadableException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"Could not read json..."</span>);</span><br><span class="line">        log.error(<span class="string">"Could not read json..."</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;MethodArgumentNotValidException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleValidationException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"参数检验异常！"</span>);</span><br><span class="line">        log.error(<span class="string">"参数检验异常！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405 - Method Not Allowed。HttpRequestMethodNotSupportedException</span></span><br><span class="line"><span class="comment">     * 是ServletException的子类,需要Servlet API支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.METHOD_NOT_ALLOWED)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpRequestMethodNotSupportedException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpRequestMethodNotSupportedException</span><span class="params">(HttpRequestMethodNotSupportedException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">405</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"请求方法不支持！"</span>);</span><br><span class="line">        log.error(<span class="string">"请求方法不支持！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 415 - Unsupported Media Type。HttpMediaTypeNotSupportedException</span></span><br><span class="line"><span class="comment">     * 是ServletException的子类,需要Servlet API支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.UNSUPPORTED_MEDIA_TYPE)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpMediaTypeNotSupportedException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpMediaTypeNotSupportedException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">415</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"内容类型不支持！"</span>);</span><br><span class="line">        log.error(<span class="string">"内容类型不支持！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 401 - Internal Server Error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(TokenException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleTokenException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">401</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"Token已失效"</span>);</span><br><span class="line">        log.error(<span class="string">"Token已失效"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500 - Internal Server Error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">500</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"内部服务器错误！"</span>);</span><br><span class="line">        log.error(<span class="string">"内部服务器错误！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ValidationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleValidationException</span><span class="params">(ValidationException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"参数验证失败！"</span>);</span><br><span class="line">        log.error(<span class="string">"参数验证失败！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了能让<code>@ControllerAdvice</code>注解生效，还需要在spring MVC的配置文件：<code>spring-mvc.xml</code>添加如下一句：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.artisan.*"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了全局的异常处理，一旦后台出现异常，就返回给前台指定的异常的JSON数据。前台开发人员看到此异常后，就应该立即反馈给后台开发人员。</p>
<h1 id="后台参数验证"><a href="#后台参数验证" class="headerlink" title="后台参数验证"></a>后台参数验证</h1><p>前台在请求之前也会进行参数验证，但是为了程序更加严谨，后台也需要进行参数验证，这样做的好处就是，可以防止<code>脏数据</code>的出现，过滤掉一些不符合要求的请求。打个比方吧，就比如新增一个用户，<code>username</code>和<code>password</code>都是必填字段，假如说前端没有做判断，这个时候用户点击保存，后台没做参数验证，就将这个脏数据保存进数据库。</p>
<p>这里我们将采用<code>Hibernate Validator</code>框架去实现后台的参数校验。别看到这里有<code>hibernate</code>这个单词，其实跟<code>hibernate</code>这个orm框架一毛钱关系都没有，他们之间是没有任何的依赖关系的。在<code>pom.xml</code>中添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hibernate Validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在spring的配置文件<code>applicationConext.xml</code>中装配参数验证器：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hibernate Validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在对应的controller的请求方法中，对需要验证的请求参数用<code>@Valid</code>进行标注，表示这个实体类的有些属性是需要进行参数验证的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增User"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultBean <span class="title">add</span><span class="params">(@ApiParam(value = <span class="string">"新增User实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody @Valid User user) </span>&#123;</span><br><span class="line">   ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       userService.insert(user);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       resultBean.setCode(StatusCode.HTTP_FAILURE);</span><br><span class="line">       resultBean.setMsg(<span class="string">"Create User Failed！"</span>);</span><br><span class="line">       LOGGER.error(<span class="string">"新增User！参数信息：User = "</span> + user.toString(), e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resultBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的<code>User.java</code>实体类中，需要使用<code>@NotEmpty</code>标注某个属性是不能为空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"u_id"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_name"</span>)</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那当然是不止<code>@NotEmpty</code>这一个检验注解，<code>Hibernate Validator</code>框架给我们提供了丰富的校验注解，常用的如下：</p>
<ul>
<li>Bean Validation 中内置的 constraint：<ul>
<li><strong>@Null</strong>：被注释的元素必须为 null</li>
<li><strong>@NotNull</strong>：被注释的元素必须不为 null</li>
<li><strong>@AssertTrue</strong>：被注释的元素必须为 true</li>
<li><strong>@AssertFalse</strong>：被注释的元素必须为 false</li>
<li><strong>@Min(value)</strong>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><strong>@Max(value)</strong>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><strong>@DecimalMin(value)</strong>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><strong>@DecimalMax(value)</strong>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><strong>@Size(max, min)</strong>：被注释的元素的大小必须在指定的范围内</li>
<li><strong>@Digits (integer, fraction)</strong>：被注释的元素必须是一个数字，其值必须在可接受的范围内</li>
<li><strong>@Past</strong>：被注释的元素必须是一个过去的日期</li>
<li><strong>@Future</strong>：被注释的元素必须是一个将来的日期</li>
<li><strong>@Pattern(value)</strong>：被注释的元素必须符合指定的正则表达式</li>
</ul>
</li>
<li>Hibernate Validator 附加的 constraint：<ul>
<li><strong>@Email</strong>：被注释的元素必须是电子邮箱地址</li>
<li><strong>@Length</strong>：被注释的字符串的大小必须在指定的范围内</li>
<li><strong>@NotEmpty</strong>：被注释的字符串的必须非空</li>
<li><strong>@Range</strong>：被注释的元素必须在合适的范围内</li>
</ul>
</li>
</ul>
<p>这样我们的项目就集成了<code>Bean Validation</code>特性，就可以使用这些注解要进行参数校验了。</p>
<h1 id="跨域请求处理"><a href="#跨域请求处理" class="headerlink" title="跨域请求处理"></a>跨域请求处理</h1><p>前端是纯静态的页面，通过ajax请求后台，但是我们知道，ajax存在一个问题就是不支持跨域访问的。也就是说，前后端两个应用必须在同一个域名下才能访问。那该怎么样才能解决这个问题呢？这里采用的是CORS（Cross Origin Resource Sharing）方案，翻译过来就是：<strong>跨域资源共享</strong>。CORS技术很简单，现在大多数的浏览器都已经支持了，只需后台将CORS相应头写入response对象中即可。</p>
<p>那后台就需要编写一个过滤器：<code>CorsFilter.java</code>，拦截所有的http请求，然后将CORS响应头写入到response对象中即可，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理跨域的过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leeyom Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(CorsFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String allowOrigin;</span><br><span class="line">    <span class="keyword">private</span> String allowMethods;</span><br><span class="line">    <span class="keyword">private</span> String allowCredentials;</span><br><span class="line">    <span class="keyword">private</span> String allowHeaders;</span><br><span class="line">    <span class="keyword">private</span> String exposeHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        allowOrigin = filterConfig.getInitParameter(<span class="string">"allowOrigin"</span>);</span><br><span class="line">        allowMethods = filterConfig.getInitParameter(<span class="string">"allowMethods"</span>);</span><br><span class="line">        allowCredentials = filterConfig.getInitParameter(<span class="string">"allowCredentials"</span>);</span><br><span class="line">        allowHeaders = filterConfig.getInitParameter(<span class="string">"allowHeaders"</span>);</span><br><span class="line">        exposeHeaders = filterConfig.getInitParameter(<span class="string">"exposeHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过CORS技术实现AJAX跨域访问, 只要将CORS响应头写入response对象中即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowOrigin)) &#123;</span><br><span class="line">            <span class="comment">//允许访问的客户端域名，例如：http://web.xxx.com，若为*，则表示从任意域都能访问，即不做任何限制；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowMethods)) &#123;</span><br><span class="line">            <span class="comment">//允许访问的请求方式，多个用逗号分割，例如：GET,POST,PUT,DELETE,OPTIONS；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, allowMethods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowCredentials)) &#123;</span><br><span class="line">            <span class="comment">//是否允许请求带有验证信息，若要获取客户端域下的cookie时，需要将其设置为true；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, allowCredentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowHeaders)) &#123;</span><br><span class="line">            <span class="comment">//允许服务端访问的客户端请求头，多个请求头用逗号分割，例如：Content-Type,Access-Token,timestamp</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, allowHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(exposeHeaders)) &#123;</span><br><span class="line">            <span class="comment">//允许客户端访问的服务端响应头，多个响应头用逗号分割。</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Expose-Headers"</span>, exposeHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>web.xml</code>中配置CorsFilter过滤器：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过CORS技术实现AJAX跨域访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.artisan.common.filter.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowOrigin<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowMethods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,PUT,DELETE,OPTIONS<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowCredentials<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,Access-Token,timestamp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样我们就解决了跨域的问题。</p>
<h1 id="请求鉴权机制"><a href="#请求鉴权机制" class="headerlink" title="请求鉴权机制"></a>请求鉴权机制</h1><p>由于http请求是无状态的，我们后端写好了API接口，然后发布出去，如果不做安全控制，谁都可以调用，这很明显是非常不安全的，所以我们需要采用JWT（Json web token）鉴权机制去保护我们的API接口安全，整个的思路如下：</p>
<ol>
<li>用户登陆后，服务器端使用 jjwt(当然也可以采用其他的方式，比如时间戳，签名url) 生成 Token ，保存在 Redis 中，以用户名作为 Key，同时将此token值返回给前端。</li>
<li>通过设置 Redis 键的 TTL 来实现 Token 自动过期。</li>
<li>前端将token值存到localStorage中，后面每次请求，都将次token放到header（请求头）中。</li>
<li>服务端通过在 Filter 中拦截请求判断 Token 是否有效，如果有效，则请求通过，无效，返回401，提示无此权限。</li>
<li>由于 Redis 是基于 Key-Value 进行存储，因此可以实现新的 Token 将覆盖旧的 Token ，保证一个用户在一个时间段只有一个可用 Token，但是如果有些系统允许当前用户可以多处登陆，则不需要处理这一步。</li>
<li>从头至尾，整个过程没有涉及cookie，所以CSRF或者XXS等相关的攻击 是不可能发生的。</li>
</ol>
<p>首先定义一个管理token的接口，<code>TokenManager.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对Token进行操作的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个token关联上指定用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 指定用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TokenModel <span class="title">createToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查token是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(TokenModel model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符串中解析token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 加密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TokenModel <span class="title">getToken</span><span class="params">(String authentication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 登录用户的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一个用户在一个时间段只有一个可用 Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其对应的接口实现类<code>RedisTokenManager.java</code>，对token进行增删改查操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Redis存储和验证token的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> com.artisan.authorization.manager.TokenManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenManager</span> <span class="keyword">implements</span> <span class="title">TokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Long, String&gt; redis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedis</span><span class="params">(RedisTemplate redis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redis = redis;</span><br><span class="line">        <span class="comment">//泛型设置成Long后必须更改对应的序列化方案</span></span><br><span class="line">        redis.setKeySerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenModel <span class="title">createToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//uuid</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">//时间戳</span></span><br><span class="line">        String timestamp = SDF.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//token =&gt; userId_timestamp_uuid;</span></span><br><span class="line">        String token = userId + <span class="string">"_"</span> + timestamp + <span class="string">"_"</span> + uuid;</span><br><span class="line">        TokenModel model = <span class="keyword">new</span> TokenModel(userId, uuid, timestamp);</span><br><span class="line">        <span class="comment">//存储到redis并设置过期时间(有效期为2个小时)</span></span><br><span class="line">        redis.boundValueOps(userId).set(Base64Util.encodeData(token), Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenModel <span class="title">getToken</span><span class="params">(String authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication == <span class="keyword">null</span> || authentication.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] param = authentication.split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">if</span> (param.length != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用userId和源token简单拼接成的token，可以增加加密措施</span></span><br><span class="line">        <span class="keyword">long</span> userId = Long.parseLong(param[<span class="number">0</span>]);</span><br><span class="line">        String timestamp = param[<span class="number">1</span>];</span><br><span class="line">        String uuid = param[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TokenModel(userId, uuid, timestamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(TokenModel model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = redis.boundValueOps(model.getUserId()).get();</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || !(Base64Util.decodeData(token)).equals(model.getToken())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果验证成功，说明此用户进行了一次有效操作，延长token的过期时间(2个小时)</span></span><br><span class="line">        redis.boundValueOps(model.getUserId()).expire(Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        redis.delete(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        String token = redis.boundValueOps(userId).get();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.notNull(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用spring的APO技术，编写一个切面类<code>SecurityAspect.java</code>，拦截所有Controller类的方法，并从请求头中获取token，最后对token有效性进行判断，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token有效性判断切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(SecurityAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenManager tokenManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(org.springframework.web.bind.annotation.RequestMapping)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//SimpleDateFormat是线程不安全的，设置为static，多线程情况下会报java.lang.NumberFormatException: multiple points</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">        <span class="comment">// 从切点上获取目标方法</span></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        LOGGER.debug(<span class="string">"methodSignature : "</span> + methodSignature);</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line">        LOGGER.debug(<span class="string">"Method : "</span> + method.getName() + <span class="string">" : "</span> + method.isAnnotationPresent(IgnoreSecurity.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是获取Swagger API文档，直接调用目标方法，生产环境下需要注释掉</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"getDocumentation"</span>.equals(methodName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若目标方法忽略了安全性检查,则直接调用目标方法</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(IgnoreSecurity.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 request header 中获取当前 token</span></span><br><span class="line">        String authentication = WebContextUtil.getRequest().getHeader(Constants.DEFAULT_TOKEN_NAME);</span><br><span class="line">        <span class="comment">// 从 request header 中获取时间戳</span></span><br><span class="line">        String timestampStr = WebContextUtil.getRequest().getHeader(Constants.TIME_STAMP);</span><br><span class="line">        TokenModel tokenModel = tokenManager.getToken(Base64Util.decodeData(authentication));</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        Date timestamp = sdf.parse(timestampStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证时间戳是否超过五分钟，如果超过五分钟，则服务端删除此token，防止抓包</span></span><br><span class="line">        <span class="keyword">if</span> (((date.getTime()) - timestamp.getTime()) / <span class="number">60000</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tokenModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//删除token</span></span><br><span class="line">                tokenManager.deleteToken(tokenModel.getUserId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenException(<span class="string">"请求超时~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 token 有效性</span></span><br><span class="line">        <span class="keyword">if</span> (!tokenManager.checkToken(tokenModel)) &#123;</span><br><span class="line">            String message = <span class="string">"token "</span> + Base64Util.decodeData(authentication) + <span class="string">" is invalid！！！"</span>;</span><br><span class="line">            LOGGER.debug(<span class="string">"message : "</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenException(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用目标方法</span></span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若要使SecurityAspect生效，则需要在SpringMVC配置文件中添加如下Spring 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持Controller的AOP代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后还需要在<code>web.xml</code>中添加Access-Token,以及时间戳timestamp。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,Access-Token,timestamp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那为什么要请求头要带一个时间戳呢？其实是防止人家抓包：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证时间戳是否超过五分钟，如果超过五分钟，则服务端删除此token，防止抓包</span></span><br><span class="line"><span class="keyword">if</span> (((date.getTime()) - timestamp.getTime()) / <span class="number">60000</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (tokenModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//删除token</span></span><br><span class="line">      tokenManager.deleteToken(tokenModel.getUserId());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> TokenException(<span class="string">"请求超时~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ok，这样我们的后端的API接口就有安全保障了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上便是我自己在实际开发中对于前后端分离的一些思考，可能有些地方考虑的不够周全，但是也算是一个基础的RESTful API接口平台了，文章相关的示例代码我已经整理成了一个基本的项目，托管在github，大家可以自由下载，github地址：<a href="https://github.com/wangleeyom/code-artisan" target="_blank" rel="noopener">https://github.com/wangleeyom/code-artisan</a>，如果对你有帮助的话，就点个star，有疑惑的地方，就在文章下面评论吧，大家一起讨论。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前后端分离 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java开发工程师进阶书单]]></title>
      <url>/2017/10/15/tech-java-book-list/</url>
      <content type="html"><![CDATA[<p>不想做架构师的程序员不是好程序员，希望这份书单能帮到你。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做了一年多的开发后，感觉自己一直在停留在只会用的水平，但是要深究到某项技术的核心原理，自己也答不上个所以然来。每个程序员都是从最简单的CRUD写起，但是简单的业务逻辑代码写多了的时候，就会让人陷入一个麻木的状态，会让人安于现状。如何才能脱离这个怪圈，让自己成为一名合格的程序员呢？书籍是人类最好的精神粮食，程序员除了写代码，也应该静下心来，多阅读些技术相关的书籍。这样可以帮助我们更深层次的理解某个知识点。下面我自己从网上收集到的一些Java开发的进阶书籍，均为高清的pdf文档，重点都是有书签目录的，方便可以定位查阅。文档我都上传到百度云，如果经济允许的话，可以购买纸质实体书支持原作者。</p>
<h1 id="书籍列表"><a href="#书籍列表" class="headerlink" title="书籍列表"></a>书籍列表</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol>
<li><a href="https://pan.baidu.com/s/1c1653Ug" target="_blank" rel="noopener">Java多线程编程核心技术.pdf</a> ，提取密码：xxck</li>
<li><a href="https://pan.baidu.com/s/1dFxWjU5" target="_blank" rel="noopener">Java面试宝典2016版.pdf</a>，提取密码：31hp</li>
<li><a href="https://pan.baidu.com/s/1pKEW2x1" target="_blank" rel="noopener">Spring源码深度解析.pdf</a>，提取密码：aaa2</li>
<li><a href="https://pan.baidu.com/s/1bpljacJ" target="_blank" rel="noopener">深入理解Java虚拟机 JVM高级特性与最佳实践.pdf</a>，提取密码：8dwz</li>
<li><a href="https://pan.baidu.com/s/1c8RAMy" target="_blank" rel="noopener">java编程思想(第4版).pdf</a>，提取密码：rz4e</li>
<li><a href="https://pan.baidu.com/s/1boGaXll" target="_blank" rel="noopener">Java核心技术 卷1 基础知识.pdf</a>，提取密码：3x6k</li>
<li><a href="https://pan.baidu.com/s/1kVwyf3L" target="_blank" rel="noopener">Java核心技术 卷II 高级特性.pdf</a>，提取密码：ihhx</li>
<li><a href="https://pan.baidu.com/s/1bSUjRg" target="_blank" rel="noopener">大型网站系统与Java中间件实践.pdf</a>，提取密码：822j</li>
<li><a href="https://pan.baidu.com/s/1b47Fdk" target="_blank" rel="noopener">深入分析Java Web技术内幕修订版.pdf</a>，提取密码：cr1p</li>
<li><a href="https://pan.baidu.com/s/1miHuJl2" target="_blank" rel="noopener">大型网站技术架构：核心原理与案例分析.pdf</a>，提取密码：vsbt</li>
<li><a href="https://pan.baidu.com/s/1boHwNRh" target="_blank" rel="noopener">阿里巴巴Java开发手册（终极版）.pdf</a>，提取密码：f27n</li>
</ol>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol>
<li><a href="https://pan.baidu.com/s/1jIos8a6" target="_blank" rel="noopener">高性能MySQL第3版.pdf</a>，提取密码：6kk2</li>
<li><a href="https://pan.baidu.com/s/1mhVrHm4" target="_blank" rel="noopener">MySQL必知必会.pdf</a>，提取密码：nphh</li>
</ol>
<h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ul>
<li>安卓：<ul>
<li><a href="https://daimajia.com/" target="_blank" rel="noopener">代码家</a></li>
</ul>
</li>
<li>Java：<ul>
<li><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序员DD</a></li>
<li><a href="https://hacpai.com/member/88250" target="_blank" rel="noopener">D大</a></li>
<li><a href="http://www.youmeek.com/" target="_blank" rel="noopener">YouMeek</a></li>
</ul>
</li>
<li>前端：<ul>
<li><a href="https://blog.jimmylv.info/" target="_blank" rel="noopener">吕立青的博客</a></li>
<li><a href="https://github.com/fouber/blog" target="_blank" rel="noopener">张云龙</a></li>
<li><a href="https://github.com/lifesinger/blog" target="_blank" rel="noopener">玉伯</a></li>
</ul>
</li>
</ul>
<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>文档收集于网络，如若侵犯到您的权益，请及时联系我删除。</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RBAC权限模型]]></title>
      <url>/2017/09/27/tech-rbac-model/</url>
      <content type="html"><![CDATA[<p>csdn上一篇很好的讲解权限模型的文章，特地摘抄下来，供大家阅读参考。</p>
<a id="more"></a>
<p>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。（如下图）</p>
<p><img src="https://i.imgur.com/BDUYwPp.jpg" alt="RBAC权限模型"></p>
<p>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。 </p>
<p>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。（下图为用户组、用户与角色三者的关联关系）</p>
<p><img src="https://i.imgur.com/UPW1hAj.jpg" alt="引入用户组"></p>
<p>在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮、某个图片的可见性控制，都可属于权限的范畴。有些权限设计，会把功能操作作为一类，而把文件、菜单、页面元素等作为另一类，这样构成“用户-角色-权限-资源”的授权模型。而在做数据表建模时，可把功能操作和资源统一管理，也就是都直接与权限表进行关联，这样可能更具便捷性和易扩展性。（见下图）</p>
<p><img src="https://i.imgur.com/l951rjd.jpg" alt="权限分类"></p>
<p>请留意权限表中有一列“权限类型”，我们根据它的取值来区分是哪一类权限，如“MENU”表示菜单的访问权限、“OPERATION”表示功能模块的操作权限、“FILE”表示文件的修改权限、“ELEMENT”表示页面元素的可见性控制等。</p>
<p>这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。其二，方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</p>
<p>这里要注意的是，权限表与权限菜单关联表、权限菜单关联表与菜单表都是一对一的关系。（文件、页面权限点、功能操作等同理）。也就是每添加一个菜单，就得同时往这三个表中各插入一条记录。这样，可以不需要权限菜单关联表，让权限表与菜单表直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过“权限类型”和这个ID来区分是种类型下的哪条记录。</p>
<p>到这里，RBAC权限模型的扩展模型的完整设计图如下：</p>
<p><img src="https://i.imgur.com/NoJhB1e.jpg" alt="RBAC权限模型扩展"></p>
<p>随着系统的日益庞大，为了方便管理，可引入角色组对角色进行分类管理，跟用户组不同，角色组不参与授权。例如：某电网系统的权限管理模块中，角色就是挂在区局下，而区局在这里可当作角色组，它不参于权限分配。另外，为方便上面各主表自身的管理与查找，可采用树型结构，如菜单树、功能树等，当然这些可不需要参于权限分配。</p>
<ul>
<li>原文地址：<a href="http://blog.csdn.net/painsonline/article/details/7183613/" target="_blank" rel="noopener">RBAC权限管理</a>。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 权限模型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo指令错误修复记录]]></title>
      <url>/2017/09/26/tech-hexo-error/</url>
      <content type="html"><![CDATA[<p>最近不知道为什么，反正只要终端执行 hexo 命令，都会报一个莫名奇妙的错误，但是又不影响程序的运行。作为一名强迫症患者，实在无法忍受，经过无数次实验，最终将此问题进行解决。</p>
<a id="more"></a>
<p>此错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>
<p>具体的意思应该是什么模块找不到，我试了网上各种办法，什么重装 hexo，安装简洁版的 hexo，将 npm 镜像换成淘宝镜像，hexo 重装不知道多少次还是报同样的错误，但是他报错就报错，又不影响程序运行，就很奇怪。搞得我快疯了，最后我没办法了，根据异常，找到出错的文件：<code>/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js</code>。定位到如下的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> builds) &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">var</span> binding = <span class="built_in">require</span>(<span class="string">'./build/'</span> + builds[i] + <span class="string">'/DTraceProviderBindings'</span>);</span><br><span class="line">         DTraceProvider = binding.DTraceProvider;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         <span class="keyword">if</span> (err === <span class="literal">null</span>) &#123;</span><br><span class="line">             err = e;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!DTraceProvider) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the platform looks like it _should_ have DTrace</span></span><br><span class="line"><span class="comment">     * available, log a failure to load the bindings.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (process.platform === <span class="string">'darwin'</span> ||</span><br><span class="line">        process.platform === <span class="string">'sunos'</span> ||</span><br><span class="line">        process.platform === <span class="string">'freebsd'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DTraceProvider = DTraceProviderStub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个异常不就是从这里 console 打印的出来的吗？我把你注释掉，眼不见心不烦，反正你又不影响程序运行，注释如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for (var i in builds) &#123;</span></span><br><span class="line"><span class="comment">//     try &#123;</span></span><br><span class="line"><span class="comment">//         var binding = require('./build/' + builds[i] + '/DTraceProviderBindings');</span></span><br><span class="line"><span class="comment">//         DTraceProvider = binding.DTraceProvider;</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//     &#125; catch (e) &#123;</span></span><br><span class="line"><span class="comment">//         if (err === null) &#123;</span></span><br><span class="line"><span class="comment">//             err = e;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!DTraceProvider) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the platform looks like it _should_ have DTrace</span></span><br><span class="line"><span class="comment">     * available, log a failure to load the bindings.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (process.platform === <span class="string">'darwin'</span> ||</span><br><span class="line">        process.platform === <span class="string">'sunos'</span> ||</span><br><span class="line">        process.platform === <span class="string">'freebsd'</span>) &#123;</span><br><span class="line">        <span class="comment">// console.error(err);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DTraceProvider = DTraceProviderStub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后随便运行一个 hexo 指令，发现错误确实没有了~ 终于治好了我的强迫症~ </p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[swagger注解总结]]></title>
      <url>/2017/09/25/tech-swagger-annotation/</url>
      <content type="html"><![CDATA[<p>总结常用的swagger注解。</p>
<a id="more"></a>
<h1 id="快速预览"><a href="#快速预览" class="headerlink" title="快速预览"></a>快速预览</h1><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="#Api">@Api</a></td>
<td style="text-align:center">将当前注解所在的类作为 Swagger 资源</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiImplicitParam">@ApiImplicitParam</a></td>
<td style="text-align:center">代表某个接口中的一个参数</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiImplicitParams">@ApiImplicitParams</a></td>
<td style="text-align:center">代表某个接口中的多个参数，由多个ApiImplicitParam对象组成</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiModel">@ApiModel</a></td>
<td style="text-align:center">为 Swagger 模型提供额外的信息</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiModelProperty">@ApiModelProperty</a></td>
<td style="text-align:center">添加和使用模型属性数据</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiOperation">@ApiOperation</a></td>
<td style="text-align:center">对特定操作路径的 http 方法进行描述</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiParam">@ApiParam</a></td>
<td style="text-align:center">为操作参数添加其他元数据</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiResponse">@ApiResponse</a></td>
<td style="text-align:center">描述一个操作可能的回应</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ApiResponses">@ApiResponses</a></td>
<td style="text-align:center">描述一个操作的多个回应，由多个ApiResponse对象组成</td>
</tr>
<tr>
<td style="text-align:center"><a href="#Authorization">@Authorization</a></td>
<td style="text-align:center">声明要在资源或操作上使用的授权方案。</td>
</tr>
<tr>
<td style="text-align:center"><a href="#AuthorizationScope">@AuthorizationScope</a></td>
<td style="text-align:center">描述一个OAuth2的授权范围</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ResponseHeader">@ResponseHeader</a></td>
<td style="text-align:center">表示可以作为响应的部分表头</td>
</tr>
</tbody>
</table>
<p>最新版本还增加了一些用于 Swagger 定义级别添加扩展和元数据的注释：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="#SwaggerDefinition">@SwaggerDefinition</a></td>
<td style="text-align:center">定义级别属性将添加到生成的 Swagger定义中</td>
</tr>
<tr>
<td style="text-align:center"><a href="#Info">@Info</a></td>
<td style="text-align:center">一个 Swagger 定义通用的元数据</td>
</tr>
<tr>
<td style="text-align:center"><a href="#Contact">@Contact</a></td>
<td style="text-align:center">为一个 Swagger 定义添加联系人相关属性</td>
</tr>
<tr>
<td style="text-align:center"><a href="#License">@License</a></td>
<td style="text-align:center">为一个Swagger 定义添加许可证</td>
</tr>
<tr>
<td style="text-align:center"><a href="#Extension">@Extension</a></td>
<td style="text-align:center">添加带有包含属性的扩展</td>
</tr>
<tr>
<td style="text-align:center"><a href="#ExtensionProperty">@ExtensionProperty</a></td>
<td style="text-align:center">向扩展添加自定义属性</td>
</tr>
</tbody>
</table>
<h1 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h1><h2 id="Api"><a href="#Api" class="headerlink" title="@Api"></a><a id="Api">@Api</a></h2><p>用来标记当前Controller类为swagger文档资源，使用如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/CounterfeitSellerPurchaseAccount"</span>, description = <span class="string">"跟卖订单购买账号接口"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterfeitSellerPurchaseAccountHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性配置：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:center">url的路径值</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">如果设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">对api资源的描述</td>
</tr>
<tr>
<td style="text-align:center">basePath</td>
<td style="text-align:center">基本路径可以不配置</td>
</tr>
<tr>
<td style="text-align:center">position</td>
<td style="text-align:center">如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td style="text-align:center">produces</td>
<td style="text-align:center">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center">consumes</td>
<td style="text-align:center">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center">protocols</td>
<td style="text-align:center">Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td style="text-align:center">authorizations</td>
<td style="text-align:center">高级特性认证时配置</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">配置为true 将在文档中隐藏</td>
</tr>
</tbody>
</table>
<h2 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a><a id="ApiOperation">@ApiOperation</a></h2><p>该注解主要作用在方法上，对该方法进行描述，说明方法的作用，使用如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增购买账号"</span>, notes = <span class="string">"根据purchaseAccount创建新的购买账户"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/addPurchaseAccount"</span>, method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPurchaseAccount</span><span class="params">(@ApiParam(value = <span class="string">"新增购买账号实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody CounterfeitSellerPurchaseAccount purchaseAccount, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性配置：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:center">url的路径值</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">如果设置这个值、value的值会被覆盖</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">对api资源的描述</td>
</tr>
<tr>
<td style="text-align:center">basePath</td>
<td style="text-align:center">基本路径可以不配置</td>
</tr>
<tr>
<td style="text-align:center">position</td>
<td style="text-align:center">如果配置多个Api 想改变显示的顺序位置</td>
</tr>
<tr>
<td style="text-align:center">produces</td>
<td style="text-align:center">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center">consumes</td>
<td style="text-align:center">For example, “application/json, application/xml”</td>
</tr>
<tr>
<td style="text-align:center">protocols</td>
<td style="text-align:center">Possible values: http, https, ws, wss.</td>
</tr>
<tr>
<td style="text-align:center">authorizations</td>
<td style="text-align:center">高级特性认证时配置</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">配置为true 将在文档中隐藏</td>
</tr>
<tr>
<td style="text-align:center">response</td>
<td style="text-align:center">返回的对象</td>
</tr>
<tr>
<td style="text-align:center">responseContainer</td>
<td style="text-align:center">这些对象是有效的 “List”, “Set” or “Map”.，其他无效</td>
</tr>
<tr>
<td style="text-align:center">httpMethod</td>
<td style="text-align:center">“GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”</td>
</tr>
<tr>
<td style="text-align:center">code</td>
<td style="text-align:center">http的状态码 默认 200</td>
</tr>
<tr>
<td style="text-align:center">extensions</td>
<td style="text-align:center">扩展属性</td>
</tr>
</tbody>
</table>
<h2 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a><a id="ApiParam">@ApiParam</a></h2><p>该标签的主要作用是描述请求参数的属性，感觉它的作用跟<a href="#ApiImplicitParam">@ApiImplicitParam</a>有点类似，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增购买账号"</span>, notes = <span class="string">"根据purchaseAccount创建新的购买账户"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/addPurchaseAccount"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addPurchaseAccount</span><span class="params">(@ApiParam(value = <span class="string">"新增购买账号实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody CounterfeitSellerPurchaseAccount purchaseAccount, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性配置：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">属性名称</td>
</tr>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:center">属性值</td>
</tr>
<tr>
<td style="text-align:center">defaultValue</td>
<td style="text-align:center">默认属性值</td>
</tr>
<tr>
<td style="text-align:center">allowableValues</td>
<td style="text-align:center">可以不配置</td>
</tr>
<tr>
<td style="text-align:center">required</td>
<td style="text-align:center">是否属性必填</td>
</tr>
<tr>
<td style="text-align:center">access</td>
<td style="text-align:center">不过多描述</td>
</tr>
<tr>
<td style="text-align:center">allowMultiple</td>
<td style="text-align:center">默认为false</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">隐藏该属性</td>
</tr>
<tr>
<td style="text-align:center">example</td>
<td style="text-align:center">举例子</td>
</tr>
</tbody>
</table>
<h2 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a><a id="ApiResponse">@ApiResponse</a></h2><p>响应设置，比如当前请求响应为400，则提示”Invalid Order”，使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/order"</span>, method = POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"Place an order for a pet"</span>, response = Order.class)</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid Order"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">placeOrder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @ApiParam(value = <span class="string">"order placed for purchasing the pet"</span>, required = <span class="keyword">true</span>)</span> Order order) </span>&#123;</span><br><span class="line">    storeData.add(order);</span><br><span class="line">    <span class="keyword">return</span> ok(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>属性说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">code</td>
<td style="text-align:center">http的状态码</td>
</tr>
<tr>
<td style="text-align:center">message</td>
<td style="text-align:center">描述</td>
</tr>
<tr>
<td style="text-align:center">response</td>
<td style="text-align:center">默认响应类 Void</td>
</tr>
<tr>
<td style="text-align:center">reference</td>
<td style="text-align:center">参考ApiOperation中配置</td>
</tr>
<tr>
<td style="text-align:center">responseHeaders</td>
<td style="text-align:center">参考 ResponseHeader 属性配置说明</td>
</tr>
<tr>
<td style="text-align:center">responseContainer</td>
<td style="text-align:center">参考ApiOperation中配置</td>
</tr>
</tbody>
</table>
<h2 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a><a id="ApiResponses">@ApiResponses</a></h2><p>设置一组响应集，使用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/order"</span>, method = POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"Place an order for a pet"</span>, response = Order.class)</span><br><span class="line"><span class="meta">@ApiResponses</span>(&#123; </span><br><span class="line">    <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid Order"</span>),</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code = <span class="number">500</span>, message = <span class="string">"Server Error"</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">placeOrder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @ApiParam(value = <span class="string">"order placed for purchasing the pet"</span>, required = <span class="keyword">true</span>)</span> Order order) </span>&#123;</span><br><span class="line">    storeData.add(order);</span><br><span class="line">    <span class="keyword">return</span> ok(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a><a id="ApiImplicitParam">@ApiImplicitParam</a></h2><p>对方法的请求参数的描述，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取购买账户详情"</span>, notes = <span class="string">"根据url的accountId来获取购买账户详情信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"accountId"</span>, value = <span class="string">"账户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"long"</span>, paramType = <span class="string">"path"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getPurchaseAccount/&#123;accountId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CounterfeitSellerPurchaseAccount <span class="title">getPurchaseAccount</span><span class="params">(@PathVariable <span class="keyword">long</span> accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sellerPurchaseAccountService.getPurchaseAccountById(accountId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>属性说明：</p>
<ul>
<li>paramType：参数放在哪个地方<ul>
<li>header：请求参数的获取：@RequestHeader</li>
<li>query：请求参数的获取：@RequestParam</li>
<li>path：（用于restful接口）url后面跟着的请求参数的获取：@PathVariable</li>
<li>body：（不常用）</li>
<li>form：（不常用）</li>
</ul>
</li>
<li>name：参数名</li>
<li>dataType：参数类型，long，string，int</li>
<li>required：参数是否必须传</li>
<li>value：参数的意思</li>
<li>defaultValue：参数的默认值</li>
</ul>
<h2 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a><a id="ApiImplicitParams">@ApiImplicitParams</a></h2><p>这个注解自然就是说一组参数的使用说明，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取购买账号列表"</span>, notes = <span class="string">"获取购买账号列表"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"limit"</span>, value = <span class="string">"分页参数"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"offset"</span>, value = <span class="string">"分页参数2"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"countryId"</span>, value = <span class="string">"国家id，查询参数，默认为null"</span>, required = <span class="keyword">false</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"deliveryFullName"</span>, value = <span class="string">"账号名字，查询参数，默认为null"</span>, required = <span class="keyword">false</span>, dataType = <span class="string">"string"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getPurchaseAccountList"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPurchaseAccountList</span><span class="params">(@RequestParam(value = <span class="string">"countryId"</span>, required = <span class="keyword">false</span>)</span> Integer countryId, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"deliveryFullName"</span>, required = <span class="keyword">false</span>)</span> String deliveryFullName, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"limit"</span>)</span> Integer limit, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"offset"</span>)</span> Integer offset, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a><a id="ResponseHeader">@ResponseHeader</a></h2><p>用于描述一个响应的请求头，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123; </span><br><span class="line">      <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid ID supplied"</span>, </span><br><span class="line">                   responseHeaders = <span class="meta">@ResponseHeader</span>(name = <span class="string">"X-Rack-Cache"</span>, description = <span class="string">"Explains whether or not a cache was used"</span>, response = Boolean.class)),</span><br><span class="line">      <span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"Pet not found"</span>) &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">getPetById</span><span class="params">(...)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a><a id="ApiModel">@ApiModel</a></h2><p>如果我么的请求参数是一个比较复杂的对象，比如 User 对象，就需要我们使用该属性对 User 对象进行描述，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"User"</span>, description = <span class="string">"用户对象"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"地址"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>,access = <span class="string">"hidden"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户-传递复杂对象"</span>, notes=<span class="string">"传递复杂对象DTO，json格式传递数据"</span>,produces = <span class="string">"application/json"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users-3"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="comment">//json格式传递对象使用RequestBody注解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">postUser3</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    users.put(user.getId(),user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a><a id="ApiModelProperty">@ApiModelProperty</a></h2><p>该注解用于描述复杂请求对象的属性，参考<a href="#ApiModel">@ApiModel</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> swagger注解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC中使用Swagger2构建Restful API]]></title>
      <url>/2017/09/23/tech-spring-mvc-swagger2/</url>
      <content type="html"><![CDATA[<p>不知道写后台的同学有没有这样的烦劳，每次写完相关的接口，都要写相关的接口文档，然后跟前端小伙伴进行联调，过程很是繁琐和费时间。那为了解决这些问题，Swagger2 就是一个很好的解决方案，它与 spring mvc 整合后，我们只需要少量的注解，它便可以自动的帮我们生成一份 RESTful API 文档，大大的减轻了劳动力。</p>
<a id="more"></a>
<p>现在越来越多的项目开始进行前后端分离，那为了方便前后端进行通信，就需要一套 API 准则，RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论，至于具体什么是 RESTful API，可以参考阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，便会对RESTful API 有个大概的了解。下面整理下 Spring MVC 中整合 Swagger2，我这里的测试项目架构是 SSM ，如果是 Spring Boot 架构的项目，配置的时候注解稍微有点区别，在文章的代码中有注释。</p>
<h1 id="添加-maven-依赖"><a href="#添加-maven-依赖" class="headerlink" title="添加 maven 依赖"></a>添加 maven 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="新增Swagger配置类"><a href="#新增Swagger配置类" class="headerlink" title="新增Swagger配置类"></a>新增Swagger配置类</h1><p><strong>SwaggerConfig.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Configuration 这里需要注意，如果项目架构是SSM，那就不要加这个注解，如果是 spring boot 架构类型的项目，就必须加上这个注解，让 spring 加载该配置。</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// spring boot 项目不需要添加此注解，SSM 项目需要加上此注解，否则将会报错。</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">buildDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInfo())</span><br><span class="line">                .select().apis(RequestHandlerSelectors.basePackage(<span class="string">"com.leeyom.controller"</span>))<span class="comment">// controller路径。</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 API 文档标题、描述、作者等等相关信息。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">buildApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"XXX系统API接口文档"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://leeyom.top/"</span>)</span><br><span class="line">                .description(<span class="string">"Spring MVC中使用Swagger2构建Restful API"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"leeyom"</span>, <span class="string">"http://leeyom.top/"</span>, <span class="string">"leeyomwang@gmail.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再通过buildDocket函数创建Docket的Bean之后，buildApiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。 </p>
</blockquote>
<h1 id="配置spring-mvc-xml"><a href="#配置spring-mvc-xml" class="headerlink" title="配置spring-mvc.xml"></a>配置spring-mvc.xml</h1><p>装配 Swagger 配置文件的 bean，需要在 spring-mvc.xml 配置文件中添加如下一句：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.leeyom.common.util.SwaggerConfig"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="使用Swagger注解"><a href="#使用Swagger注解" class="headerlink" title="使用Swagger注解"></a>使用Swagger注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们在 <strong>controller</strong> 中通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p>
<ul>
<li><strong>@ApiOperation</strong>：给API增加说明。</li>
<li><strong>@ApiImplicitParam</strong>：给单个参数添加说明。</li>
<li><strong>@ApiImplicitParams</strong>：给多个参数添加说明。</li>
<li>更多swagger 注解参考<a href="http://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a>。</li>
</ul>
<h1 id="API文档访问"><a href="#API文档访问" class="headerlink" title="API文档访问"></a>API文档访问</h1><p>启动项目，然后访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/你的项目名/swagger-ui.html</a>，出现如下界面，说明则整合成功。<br><img src="http://s1.wailian.download/2017/10/31/restful-api.png" alt=""><br>那至此，spring mvc 整合 swagger 基本上就完毕了，有什么不懂的可以留言讨论~</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/u014231523/article/details/54411026" target="_blank" rel="noopener">SpringMVC集成springfox-swagger2构建restful API</a></li>
<li><a href="http://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a></li>
<li><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">Spring Boot中使用Swagger2构建强大的RESTful API文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> swagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 学习笔记]]></title>
      <url>/2017/09/20/tech-spring-boot-note/</url>
      <content type="html"><![CDATA[<p>spring boot 学习笔记，记录，总结。</p>
<a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="#hello-world">Hello World</a><ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="#官方推荐目录">官方推荐目录</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#热部署">热部署</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#实例中涉及到的注解">实例中涉及到的注解</a></li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#快速web开发">快速Web开发</a><ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="#json的支持">Json的支持</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#请求传参">请求传参</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#参数校验">参数校验</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#自定义过滤器">自定义过滤器</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#读取properties">读取Properties</a></li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#spring-data-jpa-的使用">Spring Data JPA 的使用</a><ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="#jpa简单概念">JPA简单概念</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#快速上手">快速上手</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#基本查询">基本查询</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#复杂查询">复杂查询</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#关联查询">关联查询</a></li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#模板引擎-thymeleaf">模板引擎Thymeleaf</a><ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="#简单上手">简单上手</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="#常用标签汇总">常用标签汇总</a></li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> JPA 和 Thymeleaf 实践</li>
<li style="list-style: none"><input type="checkbox"> 使用Swagger2构建RESTful API 文档</li>
<li style="list-style: none"><input type="checkbox"> Spring Boot 集成 MyBatis</li>
<li style="list-style: none"><input type="checkbox"> MyBatis Druid 多数据源</li>
<li style="list-style: none"><input type="checkbox"> 集成 Redis 实现数据缓存和 Session 共享</li>
<li style="list-style: none"><input type="checkbox"> 集成 dubbo+zookeeper</li>
<li style="list-style: none"><input type="checkbox"> 集成 RabbitMQ</li>
<li style="list-style: none"><input type="checkbox"> 集成 MongoDB</li>
<li style="list-style: none"><input type="checkbox"> Spring Boot 发送邮件</li>
<li style="list-style: none"><input type="checkbox"> 集成 quartz</li>
<li style="list-style: none"><input type="checkbox"> Spring Boot 集成测试和部署运维</li>
<li style="list-style: none"><input type="checkbox"> 综合实战用户管理系统</li>
</ul>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul>
<li>jdk 1.8</li>
<li>IntelliJ IDEA 2017.2.4</li>
<li>spring boot 1.5.9</li>
</ul>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="官方推荐目录"><a href="#官方推荐目录" class="headerlink" title="官方推荐目录"></a>官方推荐目录</h2><p>spring boot官方建议的目录如下：</p>
<ul>
<li><p>root package 结构：<code>com.example.myproject</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">myproject</span><br><span class="line"> +-src</span><br><span class="line">    +- main</span><br><span class="line">         +- java</span><br><span class="line">              +- com.example.myproject</span><br><span class="line">                    +- comm</span><br><span class="line">                    +- domain</span><br><span class="line">                    +- repository</span><br><span class="line">                    +- service</span><br><span class="line">                    +- web</span><br><span class="line">                    +- Application.java</span><br><span class="line">         +- resources</span><br><span class="line">              +- static</span><br><span class="line">              +- templates</span><br><span class="line">              +- application.properties</span><br><span class="line">    +- test</span><br><span class="line"> +-pom.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>com.example.myproject 目录下：</p>
<ul>
<li>Application.java：建议放到根目录下面，是项目的启动类，Spring Boot 项目只能有一个 main() 方法。</li>
<li>comm：目录建议放置公共的类，如全局的配置文件、工具类等。</li>
<li>domain：目录主要用于实体（Entity）与数据访问层（Repository）。</li>
<li>repository：数据库访问层代码。</li>
<li>service：该层主要是业务类代码。</li>
<li>web：该层负责页面访问控制。</li>
</ul>
</li>
<li>resources 目录下：<ul>
<li>static：目录存放 Web 访问的静态资源，如 JS、CSS、图片等。</li>
<li>templates：目录存放页面模板。</li>
<li>application.properties：项目的配置信息。</li>
</ul>
</li>
<li>test目录下：<ul>
<li>单元测试的代码</li>
</ul>
</li>
<li>pom.xml：用于配置项目依赖包</li>
</ul>
<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><ul>
<li><p>pom文件中引入热部署的依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 plugin 中配置另外一个属性 fork，并且配置为 true：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Eclipse到此就已经支持spring boot的热部署了，idea还需要配置如下的几步：</p>
<ul>
<li>选择 <code>File--&gt;Settings--&gt;Compiler</code> 勾选 <code>Build project automatically</code>，低版本 idea 勾选 <code>make project automatically</code>。</li>
<li>使用快捷键：<code>CTRL + SHIFT + A</code> 输入<code>Registry</code> 找到选项 <code>compile.automake.allow.when.app.running</code> 勾选。ok，搞定！</li>
</ul>
</li>
</ul>
<h2 id="实例中涉及到的注解"><a href="#实例中涉及到的注解" class="headerlink" title="实例中涉及到的注解"></a>实例中涉及到的注解</h2><ul>
<li>web开发：<ul>
<li><code>@RestController</code>：controller里面返回的结果都以json格式输出，就不需要引入<code>fastjson</code>相关的依赖，也不需要每个方法都要加<code>@ResponseBody</code>注解。</li>
<li><code>@Controller</code>：就代表着输出为页面内容，跟spring mvc里面的注解一样。</li>
</ul>
</li>
<li>单元测试：<ul>
<li><code>@SpringBootTest</code>：有此标签，系统会加载spring boot容器，这样就可以注入实例bean进行业务测试。</li>
<li><code>@Test</code>：测试类启动入口。</li>
<li>使用 <code>mockmvc</code> 进行 web 测试：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloWorldController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/hello?name=小明"</span>)</span><br><span class="line">        .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="快速Web开发"><a href="#快速Web开发" class="headerlink" title="快速Web开发"></a>快速Web开发</h1><h2 id="Json的支持"><a href="#Json的支持" class="headerlink" title="Json的支持"></a>Json的支持</h2><p>在使用SSM架构编写controller的时候，如果要返回json格式的数据，需要如下几步：</p>
<ol>
<li>在pom文件中添加解析json的库，比如<code>gson</code>、<code>fastjson</code>。</li>
<li>配置spring mvc。</li>
<li>在controller里的每个方法的上面添加<code>@ResponseBody</code>注解。</li>
</ol>
<p><code>@RestController</code>注解是Spring4之后加入的注解，原来在<code>@Controller</code>中返回json需要<code>@ResponseBody</code>来配合，如果直接用<code>@RestController</code>替代<code>@Controller</code>就不需要再配置，也不需要配置spring mvc，就可以发布一个http接口，非常方便快捷。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"leeyom"</span>);</span><br><span class="line">        user.setAge(<span class="number">24</span>);</span><br><span class="line">        user.setPass(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h2><p>常用的传参注解：</p>
<ul>
<li><code>@RequestBody</code>：绑定参数到指定对象，只适用于post和put请求，get请求不适用，在Spring Boot中，这个注解其实都不需要加。</li>
<li><code>@ModelAttribute</code>: 绑定请求参数到指定的对象，跟<code>@RequestBody</code>差不多。</li>
<li><p><code>@PathVariable</code>：获取请求url中的动态参数。</p>
<ul>
<li><p>比如请求url：<code>http://localhost:8080/get/leeyom</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"get/&#123;name&#125;"</span>, method= RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setName(name);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，参数<code>name</code>的值为：<code>leeyom</code>。</p>
</li>
</ul>
</li>
<li><code>@RequestParam</code>: 接受简单类型的属性，也可以接受对象类型。类似<code>@requestparam(&quot;id&quot;)</code>等价于<code>request.getParameter(&quot;id&quot;)</code>;</li>
</ul>
<h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>实际请求中除了前端要做参数校验，后台也需要做参数校验，在Spring Boot的<code>spring-boot-starter-web</code>库中集成了 <code>hibernate-validator</code> 来进行参数校验，常用的校验注解：</p>
<ul>
<li>Bean Validation 中内置的 constraint 注解：<ul>
<li><code>@Valid</code>：用于标识指定的校验对象。</li>
<li><code>@Null</code>：被注释的元素必须为 null。</li>
<li><code>@NotNull</code>：被注释的元素必须不为 null。</li>
<li><code>@AssertTrue</code>：被注释的元素必须为 true。</li>
<li><code>@AssertFalse</code>：被注释的元素必须为 false。</li>
<li><code>@Min(value)</code>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值。</li>
<li><code>@Max(value)</code>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值。</li>
<li><code>@DecimalMin(value)</code>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值。</li>
<li><code>@DecimalMax(value)</code>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值。</li>
<li><code>@Size(max, min)</code>：被注释的元素的大小必须在指定的范围内。</li>
<li><code>@Digits (integer, fraction)</code>：被注释的元素必须是一个数字，其值必须在可接受的范围内。</li>
<li><code>@Past</code>：被注释的元素必须是一个过去的日期。</li>
<li><code>@Future</code>：被注释的元素必须是一个将来的日期。</li>
<li><code>@Pattern(value)</code>：被注释的元素必须符合指定的正则表达式。</li>
</ul>
</li>
<li>Hibernate Validator 附加的 constraint 注解：<ul>
<li><code>@Email</code>：被注释的元素必须是电子邮箱地址。</li>
<li><code>@Length</code>：被注释的字符串的大小必须在指定的范围内。</li>
<li><code>@NotEmpty</code>：被注释的字符串的必须非空。</li>
<li><code>@Range</code>：被注释的元素必须在合适的范围内。</li>
</ul>
</li>
</ul>
<p>对User参数进行参数校验：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message=<span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">100</span>, message = <span class="string">"年龄不能大于 100 岁"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value= <span class="number">18</span> ,message= <span class="string">"必须年满 18 岁！"</span> )</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message=<span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min=<span class="number">6</span>,message=<span class="string">"密码长度不能小于 6 位"</span>)</span><br><span class="line">    <span class="keyword">private</span> String pass;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller里面采用使用 <code>@Valid + BindingResult</code>绑定参数和打印校验结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(@Valid User user, BindingResult result)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"user:"</span> + user);</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        List&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : list) &#123;</span><br><span class="line">            System.out.println(error.getCode() + <span class="string">"-"</span> + error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>创建一个名为<code>MyFilter</code>过滤器，实现Filter，拦截所有的请求，然后打印对应的请求的URL：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse</span></span></span><br><span class="line"><span class="function"><span class="params">    , FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        System.out.println(<span class="string">"this is MyFilter,url :"</span> + request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在SSM架构中，需要在<code>web.xml</code>文件中配置自定义的过滤器，在Spring Boot中，需要创建一个带<code>@Configuration</code>注解的类<code>MyWebConfiguration.java</code>，用于注册我们自定义的过滤器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteIpFilter <span class="title">remoteIpFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RemoteIpFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义的过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">testFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.addInitParameter(<span class="string">"paramName"</span>, <span class="string">"paramValue"</span>);</span><br><span class="line">        registration.setName(<span class="string">"MyFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="读取Properties"><a href="#读取Properties" class="headerlink" title="读取Properties"></a>读取Properties</h2><p>在<code>application.properties</code>文件中添加如下的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.leeyom.title=leeyom</span><br><span class="line">com.leeyom.description=一只有梦想的咸鱼</span><br></pre></td></tr></table></figure>
<p>将<code>application.properties</code>里面的属性映射到一个配置类中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeeyomProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.leeyom.title&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.leeyom.description&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在测试类中打印<code>application.properties</code>里面的属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> LeeyomProperties leeyomProperties;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"title:"</span> + leeyomProperties.getTitle());</span><br><span class="line">    System.out.println(<span class="string">"description:"</span> + leeyomProperties.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title:leeyom</span><br><span class="line">description:一只有梦想的咸鱼</span><br></pre></td></tr></table></figure>
<h1 id="Spring-Data-JPA-的使用"><a href="#Spring-Data-JPA-的使用" class="headerlink" title="Spring Data JPA 的使用"></a>Spring Data JPA 的使用</h1><h2 id="JPA简单概念"><a href="#JPA简单概念" class="headerlink" title="JPA简单概念"></a>JPA简单概念</h2><p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展。学习并使用 Spring Data JPA 可以极大提高开发效率。</p>
<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul>
<li><p>添加相关的依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.Springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Spring.datasource.url=jdbc:mysql://localhost:3306/jpa-test</span><br><span class="line">Spring.datasource.username=root</span><br><span class="line">Spring.datasource.password=root</span><br><span class="line">Spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">Spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class="line">Spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">Spring.jpa.show-sql= true</span><br></pre></td></tr></table></figure>
<ul>
<li><code>hibernate.hbm2ddl.auto</code>：用于：自动创建 | 更新 | 验证数据库表结构<ul>
<li><code>create</code>：每次加载 hibernate 时都会删除上一次的生成的表，然后根据 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</li>
<li><code>create-drop</code>：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。</li>
<li><code>update</code>：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</li>
<li><code>validate</code>：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li>
</ul>
</li>
<li><code>dialect</code>：设置数据库方言，指定生成表名的存储引擎为 InneoDB。</li>
<li><code>show-sql</code>：是否打印出自动生产的 SQL，方便调试的时候查看。</li>
</ul>
</li>
<li><p>实体类：实体类中不映射成列的字段得加 <code>@Transient</code> 注解，不加注解也会映射成列：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">true</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String regTime;</span><br><span class="line">    <span class="comment">//省略 getter settet 方法、构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dao层：Dao 只要继承 <code>JpaRepository</code> 类就可以使用常用的一些增删改成，对于一些复杂的查询，可以在dao层新增方法进行扩展。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByUserNameOrEmail</span><span class="params">(String username, String email)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserRespository</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    String formattedDate = dateFormat.format(date);</span><br><span class="line"></span><br><span class="line">    userRepository.save(<span class="keyword">new</span> User(<span class="string">"leeyom1"</span>, <span class="string">"123"</span>, <span class="string">"leeyomwang1@qq.com"</span>, <span class="string">"Leeyom1"</span>, formattedDate));</span><br><span class="line">    userRepository.save(<span class="keyword">new</span> User(<span class="string">"leeyom2"</span>, <span class="string">"456"</span>, <span class="string">"leeyomwang2@qq.com"</span>, <span class="string">"Leeyom2"</span>, formattedDate));</span><br><span class="line">    userRepository.save(<span class="keyword">new</span> User(<span class="string">"leeyom3"</span>, <span class="string">"789"</span>, <span class="string">"leeyomwang3@qq.com"</span>, <span class="string">"Leeyom3"</span>, formattedDate));</span><br><span class="line"></span><br><span class="line">    System.out.println(userRepository.findAll().size());</span><br><span class="line">    System.out.println(<span class="string">"Leeyom3"</span>.equals(</span><br><span class="line">    userRepository.findByUserNameOrEmail(<span class="string">"leeyom3"</span>, <span class="string">"leeyomwang3@qq.com"</span>).getNickName()));</span><br><span class="line">    userRepository.delete(userRepository.findByUserName(<span class="string">"leeyom2"</span>));</span><br><span class="line">    System.out.println(userRepository.findAll().size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印后的结果为：</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>第一种，使用Spring Data JPA默认预先生成了一些基本的 CURD 的方法，如增、删、改等。只需要我们创建到dao继承<code>JpaRepository</code> 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>提供的方法有：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBaseQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userRepository.findAll();</span><br><span class="line">    userRepository.findOne(<span class="number">1l</span>);</span><br><span class="line">    userRepository.save(user);</span><br><span class="line">    userRepository.delete(user);</span><br><span class="line">    userRepository.count();</span><br><span class="line">    userRepository.exists(<span class="number">1l</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二种，Spring Data JPA 提供自定义的简单查询，根据方法名来自动生成 SQL，主要的语法是 findXXBy、readAXXBy、queryXXBy、countXXBy、getXXBy 后面跟属性名称：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByUserNameOrEmail</span><span class="params">(String username, String email)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><p>可以使用在方法上加注解<code>@Query</code>，进行自定义查询，但是需要注意的是，由于Spring Data JPA底层采用的Hibernate，<strong>所以这里的查询语句为HQL，不是sql，需要注意</strong>，比如分页查询：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分页查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pageable 分页参数封装</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function">Page&lt;User&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page=<span class="number">1</span>,size=<span class="number">20</span>;</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>);</span><br><span class="line">    Pageable pageable = <span class="keyword">new</span> PageRequest(page, size, sort);</span><br><span class="line">    Page&lt;User&gt; userPage = userRepository.findAll(pageable);</span><br><span class="line">    System.out.println(<span class="string">"总数量："</span>+userPage.getTotalPages());</span><br><span class="line">    System.out.println(userPage.getContent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><ul>
<li><p>有时候会有多表关联查询，首先先创建用户详情类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line">    <span class="comment">//省略 getter settet 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个结果集的接口类，接口类的内容来自于用户表和用户详情表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getUserName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getEmail</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getAddress</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getHobby</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对应的dao，接口的返回类型为UserInfo：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u.userName as userName, u.email as email, d.address as address ,</span></span><br><span class="line"><span class="string">d.hobby as hobby from User u , UserDetail d "</span> +</span><br><span class="line">    <span class="string">"where u.id=d.userId  and  d.hobby = ?1 "</span>)</span><br><span class="line"><span class="function">List&lt;UserInfo&gt; <span class="title">findUserInfo</span><span class="params">(String hobby)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDetailRepository userDetailRepository;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userDetailRepository.save(<span class="keyword">new</span> UserDetail(<span class="string">"12"</span>,<span class="string">"Hong Kong"</span>,<span class="string">"running"</span>));</span><br><span class="line">    List&lt;UserInfo&gt; userInfos=userDetailRepository.findUserInfo(<span class="string">"running"</span>);</span><br><span class="line">    <span class="keyword">for</span> (UserInfo userInfo:userInfos)&#123;</span><br><span class="line">        System.out.println(<span class="string">"addree "</span>+userInfo.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addree Hong Kong</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="模板引擎-Thymeleaf"><a href="#模板引擎-Thymeleaf" class="headerlink" title="模板引擎 Thymeleaf"></a>模板引擎 Thymeleaf</h1><h2 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h2><ul>
<li><p>添加相关的依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置文件<code>application.properties</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 是否启用缓存，生产环境开启，开发环境关闭</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"># 检查当前模板文件是否存在</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line"># 设置模板文件的Content-Type</span><br><span class="line">spring.thymeleaf.content-type=text/html</span><br><span class="line"># 是否启用thymeleaf模板引擎</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line"># 编码格式</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"># 模板文件的模式</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line"># 模板文件的路径</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line"># 模板文件的后缀</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>controller</code>控制器<code>HelloController.java</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">(ModelMap map)</span> </span>&#123;</span><br><span class="line">     map.addAttribute(<span class="string">"message"</span>, <span class="string">"http:www.leeyom.top"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个简单的页面<code>index.html</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>spring boot 模板引擎示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:include 和 th:replace 区别，include 只是加载，replace 是替换。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"layout/copyright :: copyright"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"layout/copyright :: copyright"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，页面打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:www.leeyom.top</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="常用标签汇总"><a href="#常用标签汇总" class="headerlink" title="常用标签汇总"></a>常用标签汇总</h2><table>
<thead>
<tr>
<th>关键字</th>
<th style="text-align:center">功能介绍</th>
<th>案例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>th:id</code></td>
<td style="text-align:center">替换id</td>
<td><code>&lt;input th:id=&quot;&#39;xxx&#39; + ${collect.id}&quot;/&gt;</code></td>
</tr>
<tr>
<td><code>th:text</code></td>
<td style="text-align:center">文本替换</td>
<td><code>&lt;p th:text=&quot;${collect.description}&quot;&gt;description&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>th:utext</code></td>
<td style="text-align:center">支持html的文本替换</td>
<td><code>&lt;p th:utext=&quot;${htmlcontent}&quot;&gt;conten&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>th:object</code></td>
<td style="text-align:center">替换对象</td>
<td><code>&lt;div th:object=&quot;${session.user}&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:value</code></td>
<td style="text-align:center">属性赋值</td>
<td><code>&lt;input th:value=&quot;${user.name}&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>th:with</code></td>
<td style="text-align:center">变量赋值运算</td>
<td><code>&lt;div th:with=&quot;isEven=${prodStat.count}%2==0&quot;&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td><code>th:style</code></td>
<td style="text-align:center">设置样式</td>
<td><code>th:style=&quot;&#39;display:&#39; + @{(${sitrue} ? &#39;none&#39; : &#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td>
</tr>
<tr>
<td><code>th:onclick</code></td>
<td style="text-align:center">点击事件</td>
<td><code>th:onclick=&quot;&#39;getCollect()&#39;&quot;</code></td>
</tr>
<tr>
<td><code>th:each</code></td>
<td style="text-align:center">循环</td>
<td><code>&lt;tr th:each=&quot;user,userStat:${users}&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:if</code></td>
<td style="text-align:center">条件判断</td>
<td><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td>
</tr>
<tr>
<td><code>th:unless</code></td>
<td style="text-align:center">和th:if判断相反</td>
<td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td>
</tr>
<tr>
<td><code>th:href</code></td>
<td style="text-align:center">链接地址</td>
<td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt; /&gt;</code></td>
</tr>
<tr>
<td><code>th:switch</code></td>
<td style="text-align:center">多路选择 配合th:case 使用</td>
<td><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:case</code></td>
<td style="text-align:center">th:switch的一个分支</td>
<td><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>th:fragment</code></td>
<td style="text-align:center">布局标签，定义一个代码片段，方便其它地方引用</td>
<td><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:include</code></td>
<td style="text-align:center">布局标签，替换内容到引入的文件</td>
<td><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt; /&gt;</code></td>
</tr>
<tr>
<td><code>th:replace</code></td>
<td style="text-align:center">布局标签，替换整个标签到引入的文件</td>
<td><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td><code>th:selected</code></td>
<td style="text-align:center">selected选择框选中</td>
<td><code>th:selected=&quot;(${xxx.id} == ${configObj.dd})&quot;</code></td>
</tr>
<tr>
<td><code>th:src</code></td>
<td style="text-align:center">图片类地址引入</td>
<td><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>th:inline</code></td>
<td style="text-align:center">定义js脚本可以使用变量</td>
<td><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:action</code></td>
<td style="text-align:center">表单提交的地址</td>
<td><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@{/subscribe}&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:remove</code></td>
<td style="text-align:center">删除某个属性</td>
<td><code>&lt;tr th:remove=&quot;all/body/tag/all-but-first/none&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:attr</code></td>
<td style="text-align:center">设置标签属性，多个属性可以用逗号分隔</td>
<td><code>th:attr=&quot;src=@{/image/aa.jpg},title=#{logo}&quot;</code></td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 中 Integer 的缓存问题]]></title>
      <url>/2017/09/09/tech-java-Integer-cache-problem/</url>
      <content type="html"><![CDATA[<p>曾在微信群里跟同学讨论一道关于 java 包装类 Integer 的面试题, 这个道题目虽然看似很简单, 但是如果没有仔细研读过 jdk 源码的人, 是很容易答错的, 那肯定自然我也是答错了的, 所以才有了今天这篇文章.</p>
<a id="more"></a> 
<p>首先来看下这个题目, 问输出的结果是多少?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        Integer i1 = <span class="number">127</span>;    </span><br><span class="line">        Integer i2 = <span class="number">127</span>;    </span><br><span class="line">        System.out.println(i1 == i2);    </span><br><span class="line">            </span><br><span class="line">        Integer i3 = <span class="number">128</span>;    </span><br><span class="line">        Integer i4 = <span class="number">128</span>;    </span><br><span class="line">        System.out.println(i3 == i4);    </span><br><span class="line">        </span><br><span class="line">        Integer i5 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer i6 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i5 == i6);</span><br><span class="line">        </span><br><span class="line">        Integer i7 = <span class="number">100</span>;</span><br><span class="line">        Integer i8 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i7 == i8);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i9 = <span class="number">100</span>;</span><br><span class="line">        Integer i10 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i9 == i10);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面逐条分析结果</p>
<h2 id="i1-i2-为-true"><a href="#i1-i2-为-true" class="headerlink" title="i1 == i2 为 true"></a>i1 == i2 为 true</h2><p>Integer i1 = 127 这种方式等价于<code>Integer i1 = Integer.valueOf(127).</code> 这里变涉及到Integer 缓存机制的问题, Integer 对于小数据(-128 ~ 127)是有缓存的, 在 jvm 初始化的时候, <strong>-128 ~ 127 之间的数据就已经被缓存到本地的内存当中去了. 这样初始化-128 ~ 127之间的数字, 便会直接从内存中读取, 而不需要再创建对象. 所以 i1 和 i2 实际上引用的是同一个内存地址,</strong> 那自然的结果也就是 true 了.</p>
<p>我们看 jdk 的源码, 查看<code>Integer.valueOf</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">           <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在执行valueOf的时候，会先去检查内存中是否存在该数字，如果存在的话，就直接从内存中取出返回，如果不存在的话，就新建一个Integer对象.</p>
<p>其中该缓存数据的初始化代码在:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="comment">// high value may be configured by property</span></span><br><span class="line">         <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">         String integerCacheHighPropValue =</span><br><span class="line">             sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">         <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                 i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                 <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                 h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                 <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         high = h;</span><br><span class="line"></span><br><span class="line">         cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">int</span> j = low;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">             cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">         <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="i3-i4-为-false"><a href="#i3-i4-为-false" class="headerlink" title="i3 == i4 为 false"></a>i3 == i4 为 false</h2><p>有了以上的解释我们已经知道, 128已经超乎了缓存数据范围, 所以会使用new新建个对象，那么i3和i4的内存地址就不一样了，结果就是false.</p>
<h2 id="i5-i6-为-false"><a href="#i5-i6-为-false" class="headerlink" title="i5 == i6 为 false"></a>i5 == i6 为 false</h2><p>i5和i6的内存地址不一样，==的左右操作数如果是对象的话，那么比较的是引用的地址，new产生的对象一定是新的内存地址, 两者引用地址不一样,所以为 false.</p>
<h2 id="i7-i8-为-false"><a href="#i7-i8-为-false" class="headerlink" title="i7 == i8 为 false"></a>i7 == i8 为 false</h2><p>i7是内存中的缓存数据, 有指定的内存地址, 而 i8是 new 出来的, 他指向的是新的内存地址, 二者之间指向的内存地址不一样, 所以结果为 false.</p>
<h2 id="i9-i10-为-true"><a href="#i9-i10-为-true" class="headerlink" title="i9 == i10 为 true"></a>i9 == i10 为 true</h2><p>Integer 是 int 的包装类, Integer 类型的数据在跟 int 类型的数据做比较的时候, 会自动进行拆箱变成 int, 这样一来就是两个 int 类型的数据比较, 所以自然结果就是 true.</p>
<h2 id="其他包装类有缓存机制吗"><a href="#其他包装类有缓存机制吗" class="headerlink" title="其他包装类有缓存机制吗?"></a>其他包装类有缓存机制吗?</h2><p>答案肯定是! 以下做个总结:</p>
<table>
<thead>
<tr>
<th style="text-align:center">包装类</th>
<th style="text-align:center">缓存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">全部缓存</td>
</tr>
<tr>
<td style="text-align:center">Byte</td>
<td style="text-align:center">全部缓存</td>
</tr>
<tr>
<td style="text-align:center">Character</td>
<td style="text-align:center">&lt;= 127缓存</td>
</tr>
<tr>
<td style="text-align:center">Short</td>
<td style="text-align:center">-128 ~ 127缓存</td>
</tr>
<tr>
<td style="text-align:center">Integer</td>
<td style="text-align:center">-128 ~ 127缓存</td>
</tr>
<tr>
<td style="text-align:center">Long</td>
<td style="text-align:center">-128 ~ 127缓存</td>
</tr>
<tr>
<td style="text-align:center">Float</td>
<td style="text-align:center">没有缓存</td>
</tr>
<tr>
<td style="text-align:center">Doulbe</td>
<td style="text-align:center">没有缓存</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven的多模块 Spring MVC + Spring + Mybatis 项目的搭建]]></title>
      <url>/2017/08/01/tech-maven-multi-module-ssm/</url>
      <content type="html"><![CDATA[<p>我想大多数做java开发的同学对SSM框架的搭建已经都轻车熟路了，但是大家搭建的大多数是单模块的，网上也有非常多的例子，但是如何用maven去构建多module的ssm项目呢？下面来手把手的，利用IntelliJ IDEA搭建一次多module的ssm项目，给大家一个参考。</p>
<a id="more"></a>
<h1 id="为什么要搭建多模块的maven项目？"><a href="#为什么要搭建多模块的maven项目？" class="headerlink" title="为什么要搭建多模块的maven项目？"></a>为什么要搭建多模块的maven项目？</h1><p>首先抛出这么一个问题，我们为什么要搭建多模块的maven项目呢？以多模块的方式组织项目，其实也是maven一直倡导的。做开发的同学都知道的一个概念就是“低耦合，高内聚”，将项目划分多模块，可以极大的增大代码的重用性，防止随着项目的增大，pom文件越来越臃肿。</p>
<p>对于一般的java项目我们一般是这么分层的：</p>
<ul>
<li>dao层负责数据库的交互。</li>
<li>service层主要处理业务逻辑。</li>
<li>web层负责与客户端交互。</li>
<li>pojo层存放的是实体类。</li>
<li>common层存放我们常用的一些公用的工具类等。</li>
</ul>
<p>对应的，在一个项目中，我们会看到一些包名：</p>
<ul>
<li>com.leeyom.ssm.dao</li>
<li>com.leeyom.ssm.service</li>
<li>com.leeyom.ssm.web</li>
<li>com.leeyom.ssm.common</li>
<li>com.leeyom.ssm.pojo</li>
</ul>
<p>这样整个项目的框架就清晰了，但随着项目的进行，你可能会遇到如下问题：</p>
<ol>
<li>这个应用可能需要有一个前台和一个后台管理端，你发现大部分dao，一些service，和大部分util是在两个应用中均可用。</li>
<li>pom.xml中的依赖列表越来越长以重用的，但是，由于目前只有一个项目（WAR），你不得不新建一个项目依赖这个WAR，这变得非常的恶心，因为在Maven中配置对WAR的依赖远不如依赖JAR那样简单明了，而且你根本不需要com.leeyom.ssm.web。有人修改了dao，提交到svn并且不小心导致build失败了，你在编写service的代码，发现编译不过，只能等那人把dao修复了，你才能继续进行，很多人都在修改，到后来你根本就不清楚哪个依赖是谁需要的，渐渐的，很多不必要的依赖被引入。甚至出现了一个依赖有多个版本存在。</li>
<li>build整个项目的时间越来越长，尽管你只是一直在web层工作，但你不得不build整个项目。</li>
<li>某个模块，比如util，你只想让一些经验丰富的人来维护，可是，现在这种情况，每个开发者都能修改，这导致关键模块的代码质量不能达到你的要求。</li>
</ol>
<p>我们会发现，其实这里实际上没有遵守一个设计模式原则：“高内聚，低耦合”。虽然我们通过包名划分了层次，并且你还会说，这些包的依赖都是单向的，没有包的环依赖。这很好，但还不够，因为就构建层次来说，所有东西都被耦合在一起了。因此我们需要使用Maven划分模块。</p>
<blockquote>
<p>以上的讲解是参考：<a href="http://juvenshun.iteye.com/blog/305865" target="_blank" rel="noopener">Maven最佳实践：划分模块</a></p>
</blockquote>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h2 id="项目整体目录"><a href="#项目整体目录" class="headerlink" title="项目整体目录"></a>项目整体目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ssm-demo</span><br><span class="line">├── ssm-common -- 公共模块，主要存放一些工具类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-dao -- 存放mybatis相关的mapper接口</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-pojo -- 存放实体类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-service -- 存放业务逻辑类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-web -- 存放前台页面，客户端交互相关的handler</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：war</span><br><span class="line">├── pom.xml --打包方式为pom，一些公用的依赖</span><br></pre></td></tr></table></figure>
<h2 id="各模块的依赖关系"><a href="#各模块的依赖关系" class="headerlink" title="各模块的依赖关系"></a>各模块的依赖关系</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/15015988179183.jpg" alt=""></p>
<h1 id="Maven多模块项目创建"><a href="#Maven多模块项目创建" class="headerlink" title="Maven多模块项目创建"></a>Maven多模块项目创建</h1><ol>
<li><p>先创建一个空的maven项目(ssm-demo)作为父级项目，创建成功后，<strong><span style="color:red">删除掉src目录!</span></strong>。<img src="http://og1m51u2s.bkt.clouddn.com/15016006142785.jpg" alt=""><img src="http://og1m51u2s.bkt.clouddn.com/15016007759468.jpg" alt=""><img src="http://og1m51u2s.bkt.clouddn.com/15016009256846.jpg" alt=""></p>
</li>
<li><p>右击我们刚刚创建的父级项目<strong>ssm-demo</strong>，选择 <code>new --&gt; Module</code>,创建<code>ssm-common</code>模块。<img src="http://og1m51u2s.bkt.clouddn.com/15016011837649.jpg" alt="">填写Artifactld<img src="http://og1m51u2s.bkt.clouddn.com/15016013559961.jpg" alt="">点击Finish，就可以建好<code>ssm-common</code>模块。<img src="http://og1m51u2s.bkt.clouddn.com/15016014089277.jpg" alt=""><br> 打开<code>ssm-common</code>下面的pom.xml文件，添加该模块的打包方式为jar:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同理，跟创建<code>ssm-common</code>模块一样，继续创建<code>ssm-pojo</code>、<code>ssm-service</code>、<code>ssm-dao</code>、<code>ssm-web</code>等相应的模块。但是我们需要注意的一点是：在我们的依赖模块关系图里，我们知道<code>ssm-web</code>模块的打包方式是war包，那我们需要将他的打包方式设置为war包，而不是jar了，为什么要设置成war呢？因为我们的war包最终是要放到tomcat web容器中跑的，你打包成jar怎么放web容器里面跑，是不是？同时<code>ssm-web</code>依赖<code>ssm-service</code>和<code>ssm-common</code>两个模块，我在这里就拿<code>ssm-web</code>模块的pom文件讲解下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssm-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit单元测试，因为父级的pom中junit的scope为test，所以在其他的module要用junit使用单元测试要单独添加junit依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加 ssm-service module依赖，需要调用业务层处理业务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--编译插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置source和target版本，解决IDEA自动重置Language Level和JavaCompiler版本的问题--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果lib目录下面有jar包，将lib目录已有的jar包打包进war--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>src\main\webapp\WEB-INF\lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--tomcat7插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--项目访问路径，如果你设置为根路径，那么访问地址为: http://localhost:8080/ --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果你改为ssm，那么访问路径变为: http://localhost:8080/ssm/--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/ssm-demo<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--tomcat访问端口--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--tomcat管理界面路径，固定--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/html<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>知道<code>ssm-web</code>模块的pom文件的处理方式，那剩下的<code>ssm-pojo</code>、<code>ssm-dao</code>、<code>ssm-service</code>自然就很清楚了吧！具体的话可以看我上传到<a href="https://github.com/wangleeyom/ssm-demo" target="_blank" rel="noopener">github</a>的项目代码。</p>
</li>
<li><p>重点分析父级 pom.xml 文件，下面贴出父级的完整的pom.xml文件，分析都写在pom文件中。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--聚合的子module，父级的pom聚合他下面的所有的子模块，而子模块可以继承父级pom里面的依赖，这就是maven的聚合与继承--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jar包版本控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>4.1.4<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql-connector.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaee-api.version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">javaee-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jstl.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jstl.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jsp-api.version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">jsp-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">json-lib.version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">json-lib.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--编译级别，如果不设置编译级别，IDEA 老是将 language level 重置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父级 pom 主要管理公共依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring核心包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis集成spring包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mysql数据库链接jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--阿里巴巴德鲁伊数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JSTL标签类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jstl.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jsp-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- java ee jar 包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javaee-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- json格式化组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;json-lib.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上传组件包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--apache工具包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="SSM框架的整合"><a href="#SSM框架的整合" class="headerlink" title="SSM框架的整合"></a>SSM框架的整合</h1><p>通过上面搭建maven好的maven多模块项目的骨架，现在就可以开始ssm项目的整合了，我的开发环境和所用的三大框架的版本如下：</p>
<ul>
<li>开发环境是：<ul>
<li>IntelliJ IDEA 2017.1</li>
<li>JDK 1.8.0_45</li>
<li>Tomcat 7</li>
<li>Maven 3.3.9</li>
<li>MySQL 5.7.16  </li>
</ul>
</li>
<li>三大框架版本：<ul>
<li>Spring 4.1.7.RELEASE</li>
<li>Spring MVC 4.1.7.RELEASE</li>
<li>MyBatis 3.3.0</li>
</ul>
</li>
<li>核心配置文件： </li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">文件名</th>
<th style="text-align:center">所属目录</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mybatis-config.xml</td>
<td style="text-align:center">ssm-web/src/main/resources/spring</td>
<td style="text-align:center">mybatis分页插件pagehelper配置文件</td>
</tr>
<tr>
<td style="text-align:center">spring-mvc.xml</td>
<td style="text-align:center">ssm-web/src/main/resources/spring</td>
<td style="text-align:center">配置spring mvc，比如配置视图解析器、文件上传、spring mvc 注解等等。</td>
</tr>
<tr>
<td style="text-align:center">spring-mybatis.xml</td>
<td style="text-align:center">ssm-web/src/main/resources/spring</td>
<td style="text-align:center">spring与mybatis的整合文件，数据源、自动扫描、事务管理等都是在这里配置。</td>
</tr>
<tr>
<td style="text-align:center">xxxMapper.xml</td>
<td style="text-align:center">ssm-web/src/main/resources/mapper</td>
<td style="text-align:center">这个就是通过<a href="https://github.com/wangleeyom/mybatis-generator" target="_blank" rel="noopener">mybatis-generator</a>自动生成的mapper数据库映射文件。</td>
</tr>
<tr>
<td style="text-align:center">jdbc.properties</td>
<td style="text-align:center">ssm-web/src/main/resources/</td>
<td style="text-align:center">这个不多说，配置数据库连接信息</td>
</tr>
<tr>
<td style="text-align:center">log4j.properties</td>
<td style="text-align:center">ssm-web/src/main/resources/</td>
<td style="text-align:center">日志配置文件，方便调试bug，打印日志，需要配置此项</td>
</tr>
</tbody>
</table>
<h2 id="Spring-与-mybatis-的整合"><a href="#Spring-与-mybatis-的整合" class="headerlink" title="Spring 与 mybatis 的整合"></a>Spring 与 mybatis 的整合</h2><p>所有的ssm整合配置项都是在<code>ssm-web</code>这个子模块下面进行配置，先来看一下<code>ssm-web</code>模块的目录结构：<img src="http://og1m51u2s.bkt.clouddn.com/15017651453821.jpg" alt=""></p>
<ol>
<li><p><strong>建立<code>jdbc.properties</code>数据库属性文件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/ssm-demo?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure>
<p>因为我们这边用的是阿里巴巴的<strong>德鲁伊数据库连接池</strong>，并不需要配置jdbc.driver，如果你用的是c3p0或者dbcp数据库连接池，是要配置jdbc.driver。</p>
</li>
<li><p><strong>创建<code>spring-mybatis.xml</code>核心配置文件</strong></p>
<p>该配置文件也是spring整合mybatis的核心配置文件，事务管理，数据源，自动扫描都是在这里配置，具体的详情，可以看配置文件里面的注释。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.leeyom"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用阿里巴巴的德鲁伊数据源，这里使用官方给出的参考，德鲁伊官方配置参考：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring和MyBatis整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:spring/mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.leeyom.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建<code>mybatis-config.xml</code>分页插件配置文件</strong></p>
<p>mybatis分页插件<code>PaheHelper</code>是一个非常好用的分页插件，也可以通过配置文件的形式整合到mybatis中，具体怎么使用可以参考我以前写的文章:<a href="http://leeyom.top/%2F2016%2F12%2F05%2Fmybatis-%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%80%BB%E7%BB%93%2F"><strong>mybatis 分页插件PageHelper使用及总结。</strong></a>具体的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置分页插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 指定数据库方言 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建Log4j日志配</strong><br>为了方便查看控制台打印的日志，需要配置log4j日志配置文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#定义LOG输出级别</span><br><span class="line">log4j.rootLogger=INFO,Console,File  </span><br><span class="line">#定义日志输出目的地为控制台</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.Console.Target=System.out  </span><br><span class="line">#可以灵活地指定日志输出格式，下面一行是指定具体的格式</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  </span><br><span class="line">#文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="line">log4j.appender.File=org.apache.log4j.RollingFileAppender  </span><br><span class="line">#指定输出目录</span><br><span class="line">log4j.appender.File.File=logs/ssm-demo.log  </span><br><span class="line">#定义文件最大大小</span><br><span class="line">log4j.appender.File.MaxFileSize=<span class="number">10</span>MB  </span><br><span class="line">#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志</span><br><span class="line">log4j.appender.File.Threshold=ALL  </span><br><span class="line">log4j.appender.File.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.File.layout.ConversionPattern=[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试spring与mybatis的整合情况</strong></p>
<p>创建测试表<code>t_user</code>，表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`u_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`u_password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`u_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>再往该表中随便插入两条条数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'leeyom'</span>, <span class="string">'root'</span>), (<span class="string">'2'</span>, <span class="string">'小明'</span>, <span class="string">'admin'</span>);</span><br></pre></td></tr></table></figure>
<p>利用<a href="https://github.com/wangleeyom/mybatis-generator" target="_blank" rel="noopener">mybatis-generator</a>生成<code>UserMapper.java</code>、<code>User.java</code>、<code>UserMapper.xml</code>等相关的文件。文件是生成了，但是得放到对的位置，<code>UserMapper.java</code>放到<code>ssm-dao</code>模块下面，因为该层主要跟数据库进行交互，所以，dao层的接口文件就是放在该模块下面。<code>User.java</code>放到<code>ssm-pojo</code>模块下面，该模块主要存放实体类的bean，而<code>UserMapper.xml</code>文件<br>则放在<code>ssm-web</code>模块的resources资源目录下面的<code>mapper</code>文件夹下面，放在此模块下面的原因是，该映射文件将打包一起部署到web服务器上面，如果放到<code>ssm-dao</code>模块，<code>ssm-dao</code>的打包方式是jar，到时候会出现引用到不该数据库映射文件。最后我们还需要在<code>ssm-service</code>模块创建接口类<code>UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.service.user;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口的实现类<code>UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.service.user.impl;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.dao.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个的目录如下:<br><img src="http://og1m51u2s.bkt.clouddn.com/15017702169074.jpg" alt=""></p>
<p>下面进行测试，在<code>ssm-web</code>模块的的<code>test/java</code>目录下面，新建测试类<code>TestMybatis.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/spring-mybatis.xml"</span>);</span><br><span class="line">        userService = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybtis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.getuName() + <span class="string">"------&gt;"</span> + user.getuPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p> 如果打印信息如下，说明是spring与mybatis整合成功</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/15017709844151.jpg" alt=""></p>
<p>那其实现在就有个问题，为什么<code>ssm-service</code>模块可以调用到<code>ssm-dao</code>模块呢？这就是我们之前说的，模块之间的依赖的关系，因为<code>ssm-service</code>的pom文件中有依赖到<code>ssm-dao</code>和<code>ssm-common</code>两个模块，所以在<code>ssm-service</code>模块可以调用到<code>ssm-dao</code>中的类，这也就验证了我们之前的各模块的依赖关系图。</p>
<h2 id="整合Spring-mvc"><a href="#整合Spring-mvc" class="headerlink" title="整合Spring mvc"></a>整合Spring mvc</h2><p>spring 与 mybatis已经整合完毕，接下来Spring mvc的整合。<br><img src="http://og1m51u2s.bkt.clouddn.com/15017723644703.jpg" alt=""></p>
<ol>
<li><p><strong>创建spring-mvc.xml配置文件</strong></p>
<p>该配置文件的存放路径依旧是<code>ssm-web</code>模块的资源文件夹<code>resources/spring</code>下面，主要的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动装配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.leeyom.controller"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用该标签代表 spring mvc 不拦截css、js、jpg等相关的静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置ssm-web模块下面的web.xml文件</strong><br>千万别忘记配置web.xml文件，否则的话，在实际的生产测试环境下，之前的整合都白费了，将不起作用，具体内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring和mybatis的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 防止Spring内存溢出监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p><strong>在ssm-web模块的java文件夹下面创建<code>UserHandler.java</code>测试handler类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 测试 spring mvc</span></span><br><span class="line"><span class="comment">     * author: leeyom</span></span><br><span class="line"><span class="comment">     * date: 2017-07-31 10:47</span></span><br><span class="line"><span class="comment">     * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUserById"</span>, method = &#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        Integer userId = StringUtils.notNull(request.getParameter(<span class="string">"userId"</span>)) ? Integer.parseInt(request.getParameter(<span class="string">"userId"</span>)) : <span class="number">1</span>;</span><br><span class="line">        User user = userService.getUserById(userId);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在ssm-web模块的WEB-INF文件夹下面创建test.jsp页面</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试spring mvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> hello world! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> $&#123;user.uName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>经过以上的准备，我们现在就可以编译整个项目，编译的结果如下，就说明编译成功，否则就是编译失败。 </p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/15017725961376.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15017726289381.jpg" alt=""></p>
</li>
<li><p>通过整个项目的编译，<strong>ssm-common</strong>，<strong>ssm-pojo</strong>，<strong>ssm-dao</strong>，<strong>ssm-service</strong>分别被达成jar，<strong>ssm-web</strong>被打包成war，最后我们就是要把war通过tomcat容器跑起来。<br><img src="http://og1m51u2s.bkt.clouddn.com/15017730044316.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15017730986546.jpg" alt=""></p>
</li>
<li><p>访问<a href="localhost:8089/ssm-demo/getUserById?userId=1" target="_blank" rel="noopener">localhost:8089/ssm-demo/getUserById?userId=1</a>，如果页面出现如下的熟悉界面，恭喜你，三大框架整合成功！！！<br><img src="http://og1m51u2s.bkt.clouddn.com/15017732128821.jpg" alt=""></p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此为止我们<strong>Maven的多模块 Spring MVC + Spring + Mybatis 项目的搭建</strong>就已经完成，后期就可以在此基础上添加更多的功能。写这篇文章的目的是看到很多的单模块的ssm项目的搭建，却很少看到多模块的ssm项目搭建，所以就在此抛砖迎玉，重新搭建了一番，中间如果有什么不懂的，或者我写的不对的，大家都可以讨论。如果你觉得有用，就帮忙点个star吧！<br>源码地址：<a href="https://github.com/wangleeyom/ssm-demo" target="_blank" rel="noopener">https://github.com/wangleeyom/ssm-demo</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多模块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java消息中间件ActiveMQ学习笔记]]></title>
      <url>/2017/07/23/tech-java-activemq-note/</url>
      <content type="html"><![CDATA[<p>一篇关于ActiveMQ学习笔记.</p>
<a id="more"></a>
<h2 id="什么是ActiveMQ？"><a href="#什么是ActiveMQ？" class="headerlink" title="什么是ActiveMQ？"></a>什么是ActiveMQ？</h2><ul>
<li>术语定义 <ul>
<li>维基百科：<a href="https://zh.wikipedia.org/wiki/Apache_ActiveMQ" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Apache_ActiveMQ</a><blockquote>
<p>Apache ActiveMQ是Apache软件基金会所研发的开放源代码消息中间件；由于ActiveMQ是一个纯Java程序，因此只需要操作系统支持Java虚拟机，ActiveMQ便可运行。</p>
</blockquote>
</li>
<li>百度百科：<a href="https://baike.baidu.com/item/ActiveMQ/7889688?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/ActiveMQ/7889688?fr=aladdin</a><blockquote>
<p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。</p>
<!-- more --></blockquote>
</li>
</ul>
</li>
<li>同类技术对比<ul>
<li><img src="/img/15007971416993.jpg" alt=""></li>
</ul>
</li>
<li>学习前提<ul>
<li>要有 Java 基础</li>
<li>要有 Java Web 基础</li>
<li>要有 Spring 基础</li>
</ul>
</li>
</ul>
<h2 id="为什么使用ActiveMQ-消息中间件-？"><a href="#为什么使用ActiveMQ-消息中间件-？" class="headerlink" title="为什么使用ActiveMQ(消息中间件)？"></a>为什么使用ActiveMQ(消息中间件)？</h2><p>我们都知道，应用程序之间的调用都是通过暴露接口形式的相互调用，但是如果业务越来越复杂，接口会越来越多，各个应用程序之间相互耦合，后期管理起来会非常的麻烦，如下图所示：<br><img src="/img/15007985608005.jpg" alt=""><br>这时候如果通过消息中间件的方法的话，只要在需要的时候把消息发送到消息中间件就可以，这时候<code>消息中间件</code>就成了嫁接各个系统之间的桥梁，如下图所示：<br><img src="/img/15007986805155.jpg" alt=""><br>那么从上面两张图片我们可以总结出：<code>通过消息中间件可以解耦服务调用！</code></p>
<h2 id="了解JMS规范"><a href="#了解JMS规范" class="headerlink" title="了解JMS规范"></a>了解JMS规范</h2><ul>
<li>术语定义<ul>
<li>JMS即 Java 消息服务（Java Message Service）应用程序接口，是一个 Java 平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数MOM提供商都对JMS提供支持。</li>
</ul>
</li>
<li>相关概念<ul>
<li>提供者：实现JMS规范的消息中间件服务器。</li>
<li>客户端：发送或者接受消息的客户端。</li>
<li>生产者/发布者：创建并发送消息的客户端。</li>
<li>消费者/订阅者：接受并处理消息的客户端。</li>
<li>消息：应用程序之间传递的数据内容。</li>
<li>消息模式：在客户端之间传递消息的方式，JMS中定义了主题和队列两种模式。</li>
</ul>
</li>
<li>JMS消息模式<ul>
<li><strong>队列模型</strong>：<ul>
<li>客户端包括生产者和消费者。</li>
<li>队列中的消息只能被一个消费者消费。</li>
<li>消费者可以随时的消费队列中的消息。</li>
<li>队列模型示意图<img src="/img/15007999134263.jpg" alt="队列模型示意图"></li>
</ul>
</li>
<li><strong>主题模型</strong>：<ul>
<li>客户端包括发布者和订阅者。</li>
<li>主题中的消息被所有的订阅者消费。</li>
<li>消费者不能消费订阅之前就发送到主题中的消息。</li>
<li>主题模型示意图<img src="/img/15008002971212.jpg" alt=""></li>
</ul>
</li>
</ul>
</li>
<li>JMS编码接口<ul>
<li><code>ConnectionFactory</code>用于创建连接到消息中间件的连接工厂。</li>
<li><code>Destination</code>指消息发布和接收的地点，包括主题和队列。</li>
<li><code>Connection</code>代表了应用程序和消息服务器之间的通信链路。</li>
<li><code>Session</code>代表一个单线程的上下文，用于发送和接收消息。</li>
<li><code>MessageConsumer</code>由会话创建，用于接收发送到目标的消息。</li>
<li><code>MessageProducer</code>由会话创建，用于发送消息到目标。</li>
<li><code>Message</code>是消费者和生产者之间传送的消息对象，消息头，一组消息属性，一个消息体。 </li>
<li>编码接口关系示意图<img src="/img/15008010925844.jpg" alt=""></li>
</ul>
</li>
</ul>
<h2 id="安装ActiveMQ"><a href="#安装ActiveMQ" class="headerlink" title="安装ActiveMQ"></a>安装ActiveMQ</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul>
<li>win10/OSX 10.11.6</li>
<li>JDK 1.8 (<strong>注意一点，ActiveMQ 5.15的版本需要JDK 的最低版本为1.8，否则将安装失败！！！</strong>)</li>
<li>ActiveMQ 5.15</li>
</ul>
<h3 id="win安装ActiveMQ"><a href="#win安装ActiveMQ" class="headerlink" title="win安装ActiveMQ"></a>win安装ActiveMQ</h3><ol>
<li>下载ActiveMQ安装包，地址：<a href="http://activemq.apache.org/activemq-5150-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5150-release.html</a><br><img src="/img/15008015863809.jpg" alt=""></li>
<li>解压到本地目录，进入<code>C:\software\apache-activemq-5.15.0\bin\win64</code>下面，32位系统进入到win32目录下面。<img src="/img/15008025079668.jpg" alt=""></li>
<li>启动服务，鼠标右击<code>activemq.bat</code>，以管理员权限运行。这时候会弹出一个终端窗口，表示服务已经启动。关闭终端窗口，服务将会被停止。<strong>PS：如果一直无法启动ActiveMQ服务，请检查是否安装了JDK。</strong><img src="/img/15008035551025.jpg" alt=""></li>
<li>上面这种启动方式，一旦关闭终端窗口，服务讲会被停止，也可以采用注册服务的方式。鼠标右击以管理员权限运行<code>InstallService.bat</code>，然后右击我的电脑，点击管理，进入windows服务列表，启动ActiveMQ服务。这样ActiveMQ服务就会一直在后台运行。<img src="/img/15008039026918.jpg" alt=""></li>
<li>浏览器访问 <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a>，如果看到如下页面，表示已经安装成功。<img src="/img/15008041048386.jpg" alt=""></li>
</ol>
<h3 id="Linux-mac安装ActiveMQ"><a href="#Linux-mac安装ActiveMQ" class="headerlink" title="Linux/mac安装ActiveMQ"></a>Linux/mac安装ActiveMQ</h3><ol>
<li>下载ActiveMQ安装包，地址：<a href="http://activemq.apache.org/activemq-5150-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5150-release.html</a><br><img src="/img/15008044271116.jpg" alt=""></li>
<li>根据个人习惯，将源码解压到指定的目录，我的解压路径：<code>/usr/local/apache-activemq-5.15.0</code>。</li>
<li>打开终端，cd 到<code>/usr/local/apache-activemq-5.15.0/bin</code>目录下面，执行<code>./activemq start</code> 命令，启动 ActiveMQ服务。如果要停止服务，执行<code>./activemq stop</code>命令。</li>
<li>浏览器访问 <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a>，如果看到如下页面，表示已经安装成功。<img src="/img/15008041048386.jpg" alt=""></li>
</ol>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h3><ol>
<li><p>创建一个maven项目，项目名为：jms-test，其中pom.xml文件中引入ActiveMQ的核心包</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.jms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jms-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>jms-test Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>jms-test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>项目结构</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── jms-test </span><br><span class="line">|    ├── java</span><br><span class="line">|    |   ├──com.leeyom.jms.queue <span class="comment">-- 队列模式</span></span><br><span class="line">|    |   |   ├── AppConsumer.java <span class="comment">-- 队列模式消费者</span></span><br><span class="line">|    |   |   ├── AppProducer.java <span class="comment">-- 队列模式生产者</span></span><br><span class="line">|    |   ├──com.leeyom.jms.topic <span class="comment">-- 主题模式</span></span><br><span class="line">|    |   |   ├── AppConsumer.java <span class="comment">-- 主题模式订阅者</span></span><br><span class="line">|    |   |   ├── AppProducer.java <span class="comment">-- 主题模式发布者</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="队列模式的消息演示"><a href="#队列模式的消息演示" class="headerlink" title="队列模式的消息演示"></a>队列模式的消息演示</h3><ol>
<li><p>创建一个生产者的类，<code>AppProducer.java</code>，用于发送消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.queue;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 生产者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String queueName = <span class="string">"queue-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//6. 创建一个生产者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7. 创建一个消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"test"</span> + i);</span><br><span class="line">            <span class="comment">//8. 发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个消费者的类，<code>AppConsumer.java</code>，用于接收生产者发送的消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.queue;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 队列模式消费者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:41</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String queueName = <span class="string">"queue-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//6. 创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7. 消费者接收消息</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行生产者类<code>AppProducer.java</code>，然后登陆ActiveMQ管理界面，我们会发现我们创建了100条消息。<img src="/img/15008072688122.jpg" alt=""></p>
</li>
<li>运行消费者类<code>AppConsumer.java</code>去接收刚刚生产者发送的100条消息。这里我们创建两个消费者实例，通过对比我们可以验证我们之前所说的<code>队列中的消息只能被一个消费者消费。</code>那我们创建两个消费者将平分接收那100条消息，每人各接收50条，并且不会出现重复的消息。<br><img src="/img/15008076847030.jpg" alt=""><br><img src="/img/15008077213162.jpg" alt=""></li>
</ol>
<h3 id="主题模式的消息演示"><a href="#主题模式的消息演示" class="headerlink" title="主题模式的消息演示"></a>主题模式的消息演示</h3><ol>
<li><p>创建一个发布者的类，<code>AppProducer.java</code>，用于发布消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.topic;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 主题模式发布者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName = <span class="string">"topic-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6. 创建一个发布者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7. 创建一个消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"test"</span> + i);</span><br><span class="line">            <span class="comment">//8. 发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个订阅者的类，<code>AppConsumer.java</code>，用于接收发布者发送的消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.topic;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 主题模式订阅者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName = <span class="string">"topic-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6. 创建一个订阅</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7. 订阅者接收消息</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行订阅者类<code>AppConsumer.java</code>去接收刚刚发布者发送的100条消息。这里我们创建两个订阅者实例，通过对比我们可以验证我们之前所说的JMS主题模型图，我们创建两个订阅者都接收到了100条的消息。<br><img src="/img/15008093093543.jpg" alt=""><br><img src="/img/15008093532999.jpg" alt=""></p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.imooc.com/learn/856" target="_blank" rel="noopener">慕课网Java消息中间件教学视频</a></li>
<li>项目源码地址：<a href="https://github.com/wangleeyom/demo-warehouse" target="_blank" rel="noopener">github</a>，喜欢就点个star吧😁</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat关闭报内存溢出异解决方案]]></title>
      <url>/2017/06/20/tech-shutdown-tomcat-oom-error/</url>
      <content type="html"><![CDATA[<p>在项目开发的时候，每次关闭Tomcat控制台都会报内存溢出的异常，因为是warning级别的警告，并且开发阶段也并不影响项目的运行，所以呢也就没有去在意。但是当把项目打包部署到Linux服务器上后，启动Tomcat，然后再停止，又出现内存溢出的情况，然后再启动，发现Tomcat启动再也无法启动，只能重启服务器，才意识到这个问题是比较严重的问题。通过查找一系列的资料，终于把这个问题解决了，所以记录一下这个问题解决过程，给以后可能会遇到这个问题的朋友一个解决方案。</p>
<a id="more"></a>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>JDK 1.8</li>
<li>Tomcat 8</li>
<li>MySQL 5.7</li>
<li>IDEA 2017.1</li>
</ul>
<h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><p>首先来看下我遇到的异常信息是什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">1</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">2</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">3</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">4</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">5</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">6</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">7</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">8</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">9</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">10</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [Timer-<span class="number">0</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> java.util.TimerThread.mainLoop(Timer.java:<span class="number">552</span>)</span><br><span class="line"> java.util.TimerThread.run(Timer.java:<span class="number">505</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class="number">143</span>)</span><br><span class="line"> com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:<span class="number">43</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol stop</span><br><span class="line">信息: Stopping ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol stop</span><br><span class="line">信息: Stopping ProtocolHandler [<span class="string">"ajp-nio-8009"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol destroy</span><br><span class="line">信息: Destroying ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol destroy</span><br><span class="line">信息: Destroying ProtocolHandler [<span class="string">"ajp-nio-8009"</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="异常原因分析及解决方案"><a href="#异常原因分析及解决方案" class="headerlink" title="异常原因分析及解决方案"></a>异常原因分析及解决方案</h2><p>我总结了下，出现以上的异常主要有以下几个原因：</p>
<ol>
<li>mysql jdbc 未注销</li>
<li>shiro 权限框架会话验证调度器未关闭</li>
<li>c3p0连接池链接未关闭</li>
</ol>
<p>下面来逐一的分析下为什么会出现上面这样的情况：</p>
<h3 id="mysql-jdbc-未注销"><a href="#mysql-jdbc-未注销" class="headerlink" title="mysql jdbc 未注销"></a>mysql jdbc 未注销</h3><p>在<code>tomcat 6.0.24</code>版本之后，加入了一个<code>memory leak listener</code>(JreMemoryLeakPreventionListener，有兴趣可详细查去源码), 在tomcat stop、undeployed、reloaded的时候，他会检测当前应用的classloader，查看是否有引用泄露。<br>tomcat定义了一系列的引用泄露规则：</p>
<ul>
<li>threadlocal保持引用</li>
<li>线程池保持引用</li>
<li>驱动注册</li>
</ul>
<p>如有引用泄露，则提示错误，例如<code>his is very likely to create a memory leak</code>类似这样的错误。对于<code>The web application [LeadermentEnterpriseSystemV2] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</code>这种异常其实就是MySQL的JDBC驱动无法注销的原因所造成的。我在网上查找了很多的解决方案，其中比较权威的stackoverflow给出的解决方案邮两种：</p>
<ol>
<li><p>将MySQL的驱动放到Tomcat的lib目录下面，同时移除WEB-INF/lib目录下的MySQL 驱动，但是我实验了下，对于我现在这种情况并不生效。</p>
</li>
<li><p>创建一个 <code>ServletContextListener</code>,然后在 contextDestroyed 方法中手动注销。</p>
<p>这个方案中又分为两步：</p>
<ul>
<li>2.1 将MySQL JDBC驱动在pom.xml文件中更新成最新的版本(5.1.42)。</li>
<li>2.2 新建 JdbcDriverListener.java 文件，具体内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDriverListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(UserAccountsHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解决Tomcat mysql 驱动内存泄漏，手动注销JDBC</span></span><br><span class="line">        Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();</span><br><span class="line">        Driver d = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (drivers.hasMoreElements()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                d = drivers.nextElement();</span><br><span class="line">                DriverManager.deregisterDriver(d);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AbandonedConnectionCleanupThread.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>不要忘记在web.xml文件中注册该监听器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.leaderment.common.listener.JdbcDriverListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样的话就可以解决MySQL驱动无法注销的问题。</p>
<h3 id="shiro-权限框架会话验证调度器未关闭"><a href="#shiro-权限框架会话验证调度器未关闭" class="headerlink" title="shiro 权限框架会话验证调度器未关闭"></a>shiro 权限框架会话验证调度器未关闭</h3><p>这个问题是应为shiro权限框架里有用到quartz，所以会出现<code>appears to have started a thread named [DefaultQuartzScheduler_Worker-1]</code>等异常。我的解决办法就是将shiro的配置文件中的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionValidationScheduler"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionValidationInterval"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionManager"</span> <span class="attr">ref</span>=<span class="string">"sessionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码给注释掉，自己重新写了个过滤器，去判定session是否过期，而不采用shiro的会话验证器，所以该问题也就这样被解决。</p>
<h3 id="c3p0连接池链接未关闭"><a href="#c3p0连接池链接未关闭" class="headerlink" title="c3p0连接池链接未关闭"></a>c3p0连接池链接未关闭</h3><p>修改applicationContext.xml文件，添加属性 <code>destroy-method=&quot;close&quot;</code>，即可解决数据库连接未关闭的问题。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终的原因归根结底就是Tomcat的进程无法释放的问题，那么造成这个问题出现的就是上面三个原因，只有通过一步步的排查才能根本上解决问题。这个问题花费了我一两天的时间，虽然有些地方不算是彻底解决，但是至少Tomcat停止的时候，不在报内存溢出的警告了。我的强迫症总算好受一点了。如果有更好的解决方案，可以在评论区留言一起讨论。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo主题更换记]]></title>
      <url>/2017/06/17/tech-hexo-theme-change/</url>
      <content type="html"><![CDATA[<p>突然发现已经好久没有更博客了，一直忙着赶项目进度。这个月深圳真是多雨季节，已经连续下了好几天的雨了，非常不喜欢这种下雨的天气，潮湿闷热。今天下了一整天的雨，一直宅在宿舍，趁有时间，准备把hexo博客的主题换一下。因为之前用的是NexT的主题，由于改的面目全非，导致手机端的出现各种问题，加上之前多说评论关闭，干脆换个主题，换个心情。</p>
<a id="more"></a>
<h2 id="1-下载Yelee主题"><a href="#1-下载Yelee主题" class="headerlink" title="1. 下载Yelee主题"></a>1. 下载Yelee主题</h2><ul>
<li>那前面也说了为什么要更换主题，这个主题是在Hexo官网的主题列表里面看到，整体的风格很简约，很喜欢这个style。整体的风格如下截图：<br><img src="http://og1m51u2s.bkt.clouddn.com/20170617149771105338719.png" alt="Yelee主题"></li>
<li>将项目克隆到本地：<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></li>
<li>将克隆下来的项目放到 <code>/hexo/themes/</code>文件夹下面</li>
<li>修改站点配置文件<code>_config.yml</code>，将属性theme修改为<code>theme: yelee</code></li>
</ul>
<h2 id="2-将评论更换为友言"><a href="#2-将评论更换为友言" class="headerlink" title="2. 将评论更换为友言"></a>2. 将评论更换为友言</h2><p>因为多说已经关闭，所以没办法，只能更换评论系统，该主题主目前支持 Disqus，友言评论，这里我采用友言评论。</p>
<ul>
<li>去友言官网(<a href="http://www.uyan.cc/index.php" target="_blank" rel="noopener">http://www.uyan.cc/index.php</a>) 注册账号，会生成一个友言的数字ID</li>
<li>打开主题配置文件，找到<code>youyan</code>属性，修改为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">youyan:</span><br><span class="line">  on: true</span><br><span class="line">  id: 你的友言账号数字ID</span><br></pre></td></tr></table></figure>
<ul>
<li>更换评论后，需要部署后才能测试是否可以评论回复</li>
<li>不知道为什么，明明友言的官网是支持将多说的评论导入进去，然而我把之前备份的多说评论json数据导入，始终导入失败。所以导致我的好多<strong><code>评论丢失</code></strong>！</li>
</ul>
<h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2><ul>
<li>Yelee主题作者Blog：<a href="http://moxfive.xyz/" target="_blank" rel="noopener">http://moxfive.xyz/</a> (感谢其无私的开源精神)</li>
<li>Yelee主题使用说明：<a href="http://moxfive.xyz/yelee/" target="_blank" rel="noopener">http://moxfive.xyz/yelee/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[触发器与存储过程讲义]]></title>
      <url>/2017/04/27/tech-trigger-procedure-note/</url>
      <content type="html"><![CDATA[<p>什么是触发器？什么是存储过程？因为用的少，对这两块的知识有点模糊，趁着公司每周三技术分享，通过网上资料和看书，将这两块的知识点梳理了下，做成了一个讲义。</p>
<a id="more"></a>
<h1 id="TRIGGER-触发器"><a href="#TRIGGER-触发器" class="headerlink" title="TRIGGER(触发器)"></a>TRIGGER(触发器)</h1><h2 id="1-什么是触发器"><a href="#1-什么是触发器" class="headerlink" title="1. 什么是触发器?"></a>1. 什么是触发器?</h2><p>触发器，从字面来理解，一触即发的一个器，简称触发器（哈哈，个人理解），举个例子吧，好比天黑了，你开灯了，你看到东西了。你放炮仗，点燃了，一会就炸了。在MySQL Server里面也就是对某一个表的一定的操作，触发某种条件（Insert,Update,Delete 等），从而自动执行的一段程序，这就是触发器。</p>
<p>支持触发器的语句有:</p>
<blockquote>
<p>DELETE;</p>
<p>INSERT;</p>
<p>UPDATE;</p>
</blockquote>
<p>其他的mysql语句不支持触发器，像select语句等。</p>
<h2 id="2-如何创建触发器？"><a href="#2-如何创建触发器？" class="headerlink" title="2. 如何创建触发器？"></a>2. 如何创建触发器？</h2><p>在创建触发器的时候，需要给出4条信息：</p>
<ol>
<li>唯一的触发器名；</li>
<li>触发器关联的表；</li>
<li>触发器应该响应的活动(DELETE、INSERT、UPDATE);</li>
<li>触发器何时执行(处理之前还是之后)；</li>
</ol>
<blockquote>
<p>在MySQL5中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一。这表示同一数据库中的两个表可具有相同名字的触发器。</p>
</blockquote>
<p>示例:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> products </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> message(message) <span class="keyword">VALUES</span>(<span class="string">'Product added'</span>);</span><br></pre></td></tr></table></figure>
<p>分析:</p>
<p><code>CREATE TRIGGER</code> 用来创建名为 <code>newproduct</code> 的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了 <code>AFTER INSERT</code>，所以此触发器将在 <code>INSERT</code> 语句成功执行后执行。这个触发器还指定 <code>FOR EACH ROW</code>，因此代码对每个插入行执行。在这个例子中， 将每次products插入一行的时候，同时往message的表中插入文本 <code>Product added</code>。</p>
<p>注意：</p>
<ol>
<li>只有表才支持触发器，视图不支持，临时表也不支持。</li>
<li>每个表最多支持6个触发器（每条INSERT、UPDATE 和DELETE的之前和之后）</li>
</ol>
<h2 id="3-如何删除触发器？"><a href="#3-如何删除触发器？" class="headerlink" title="3 .如何删除触发器？"></a>3 .如何删除触发器？</h2><p>示例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> newproduct</span><br></pre></td></tr></table></figure>
<p>注意：触发器不能更新或者覆盖，为了修改一个触发器，必须先删除它，再重新创建</p>
<h2 id="4-如何使用触发器？"><a href="#4-如何使用触发器？" class="headerlink" title="4. 如何使用触发器？"></a>4. 如何使用触发器？</h2><h3 id="4-1-NSERT触发器"><a href="#4-1-NSERT触发器" class="headerlink" title="4.1 NSERT触发器"></a>4.1 NSERT触发器</h3><p>INSERT触发器就是当对定义触发器的表执行INSERT语句时，就会调用的触发器，INSERT触发器可以用来修改，甚至拒绝接受正插入的记录。</p>
<p>下面来看一个实例：</p>
<p>首先先创建ClassInfo(班级表)、StudentInfo(学生表)</p>
<p>教室表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`classInfo`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`classInfo`</span> (</span><br><span class="line">  <span class="string">`ClassNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ClassName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TotalNum`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ClassNo`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`classInfo`</span> <span class="keyword">VALUES</span> (<span class="string">'002'</span>, <span class="string">'计算机一班'</span>, <span class="string">'4'</span>, <span class="string">'王老师'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>学生表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`StudentInfo`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`StudentInfo`</span> (</span><br><span class="line">  <span class="string">`StuName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuClass`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`StuNo`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<p>创建触发器</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> T_addStudent</span><br><span class="line"></span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ON</span> StudentInfo <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">UPDATE</span> classInfo</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SET</span> TotalNum = TotalNum + <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">WHERE</span> ClassNo = (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ClassNo</span><br><span class="line">                   </span><br><span class="line">                   <span class="keyword">FROM</span> StudentInfo);</span><br></pre></td></tr></table></figure>
<p>上面这段代码就是建立了一个插入触发器</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fex17cloyrj30vm0c2myw.jpg" alt=""></p>
<p>如上图所示</p>
<ol>
<li>写明触发器的名称</li>
<li>该触发器是在那个表改变的时候发生</li>
<li>当这个表进行什么操作的时候发生</li>
<li>发生上述操作之后还要进行怎样的操作。</li>
</ol>
<p>这段代码的意思是：当在studentInfo表中添加一条记录的时候，就要更新ClassInfo中的TotalNum这一列，这一列的数据要增加1</p>
<p>下面我们验证一下：<br>输入下面的代码：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> totalNum</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo</span><br><span class="line"><span class="keyword">WHERE</span> ClassNo = <span class="string">'002'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小明'</span>, <span class="string">'003'</span>, <span class="string">'002'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小花'</span>, <span class="string">'002'</span>, <span class="string">'002'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小高'</span>, <span class="string">'004'</span>, <span class="string">'002'</span>, <span class="string">'女'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalNum</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo</span><br><span class="line"><span class="keyword">WHERE</span> ClassNo = <span class="string">'002'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-DELETE触发器"><a href="#4-2-DELETE触发器" class="headerlink" title="4.2 DELETE触发器"></a>4.2 DELETE触发器</h3><p>当数据库运行DELETE语句时，就会激活DELETE触发器，DELETE触发器用于约束用户能够从数据库中删除的数据，因为这些数据中，有些数据是不希望用户轻易删除的。</p>
<p>接下来我们创建一个TeacherInfoFor(老师信息)表，如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`TeacherInfoFor`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`TeacherInfoFor`</span> (</span><br><span class="line">  <span class="string">`TeacherID`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Telephone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`TeacherID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TeacherInfoFor`</span> <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'王芳'</span>, <span class="string">'女'</span>, <span class="string">'23'</span>, <span class="string">'158'</span>), </span><br><span class="line">(<span class="string">'003'</span>, <span class="string">'张丽'</span>, <span class="string">'女'</span>, <span class="string">'28'</span>, <span class="string">'152'</span>), </span><br><span class="line">(<span class="string">'004'</span>, <span class="string">'张明'</span>, <span class="string">'男'</span>, <span class="string">'30'</span>, <span class="string">'138'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>创建Stu_Teacher(学生教师表)，如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Stu_Teacher`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Stu_Teacher`</span> (</span><br><span class="line">  <span class="string">`StuNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherID`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Stu_Teacher`</span> <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'004'</span>, <span class="string">'二丫'</span>, <span class="string">'1'</span>), </span><br><span class="line">(<span class="string">'002'</span>, <span class="string">'004'</span>, <span class="string">'王小二'</span>, <span class="string">'2'</span>), </span><br><span class="line">(<span class="string">'003'</span>, <span class="string">'004'</span>, <span class="string">'花花'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>创建触发器：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> T_DELETETEACHERon </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> TeacherInfoFor </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Stu_Teacher</span><br><span class="line"><span class="keyword">WHERE</span> TeacherID = old.TeacherID;</span><br></pre></td></tr></table></figure>
<p>该触发器的作用是，当删除某个教师的信息的时候，这个老师下面的学生信息也将一并的删除掉。</p>
<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TeacherInfoFor <span class="keyword">WHERE</span> TeacherID = <span class="string">'004'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-UPDATE触发器"><a href="#4-3-UPDATE触发器" class="headerlink" title="4.3 UPDATE触发器"></a>4.3 UPDATE触发器</h3><p>当一个UPDATE语句在目标表上运行的时候，就会调用UPDATE触发器，这种类型的触发器专门用于约束用户能修改的现有的数据。<br>这个时候举个例子，先准备数据环境：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表shop_product</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`shop_product`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`shop_product`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`on_sale_time`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`on_sale`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`shop_product_id_uindex`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 往表中插入一条数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`shop_product`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="literal">null</span>, <span class="string">'java编程思想'</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>表（shop_product ）中有一状态值–是否上架(on_sale) 若由未上架（0）转为上架（1） 同时设置上架时间（on_sale_time）</p>
<p>触发器写法如下:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> update_on_sale_time_of_product;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> update_on_sale_time_of_product <span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> shop_product</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> OLD.on_sale = <span class="number">0</span> &amp;&amp; NEW.on_sale = <span class="number">1</span></span><br><span class="line">    <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">SET</span> NEW.on_sale_time = <span class="keyword">now</span>();</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> shop_product <span class="keyword">SET</span> on_sale = <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>最终结果 on_sale_time 字段更新为该商品上架时间!</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol>
<li><p>明确触发器语法的四要素：</p>
<ul>
<li>监视地点(table)</li>
<li>监视事件(insert/update/delete)</li>
<li>触发时间(after/before)</li>
<li>触发事件(insert/update/delete)</li>
</ul>
</li>
<li><p>触发器语法</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">trigger</span> triggerName  </span><br><span class="line"><span class="keyword">after</span>/<span class="keyword">before</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span> <span class="keyword">on</span> 表名  </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>   </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line">        <span class="keyword">sql</span>语句;  </span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>个人理解</p>
<p>我的一般理解就是触发器是一个隐藏的存储过程，因为它不需要参数，不需要显示调用，往往在你不知情的情况下已经做了很多操作。</p>
</li>
</ol>
<h1 id="PROCEDURE-存储过程"><a href="#PROCEDURE-存储过程" class="headerlink" title="PROCEDURE(存储过程)"></a>PROCEDURE(存储过程)</h1><h2 id="1-什么是存储过程？"><a href="#1-什么是存储过程？" class="headerlink" title="1. 什么是存储过程？"></a>1. 什么是存储过程？</h2><p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批件，虽然它们的作用不仅限于批处理。<br>在我看来， <span style="color:red;">存储过程就是有业务逻辑和流程的集合</span>， 可以在存储过程中创建表，更新数据， 删除等等。</p>
<h2 id="2-为什么要使用存储过程？"><a href="#2-为什么要使用存储过程？" class="headerlink" title="2. 为什么要使用存储过程？"></a>2. 为什么要使用存储过程？</h2><ol>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作（类似于java里面的封装性）。</li>
<li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</li>
<li>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</li>
</ol>
<h2 id="3-一个简单的存储过程"><a href="#3-一个简单的存储过程" class="headerlink" title="3. 一个简单的存储过程"></a>3. 一个简单的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> porcedureName ()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> StuName <span class="keyword">from</span> Stu_Teacher;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>存储过程用create procedure 创建， 业务逻辑和sql写在begin和end之间。mysql中可用call porcedureName ();来调用过程。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 调用过程</span><br><span class="line"><span class="keyword">call</span> porcedureName ();</span><br></pre></td></tr></table></figure>
<p>该存储过程没有参数， 只是在调用的时候查询了Stu_Teacher表的用户名而已。</p>
<h2 id="4-删除存储过程"><a href="#4-删除存储过程" class="headerlink" title="4. 删除存储过程"></a>4. 删除存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> porcedureName; <span class="comment">-- 没有括号()</span></span><br></pre></td></tr></table></figure>
<h2 id="5-使用参数的存储过程"><a href="#5-使用参数的存储过程" class="headerlink" title="5. 使用参数的存储过程"></a>5. 使用参数的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedureName(</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">min</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">avg</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">max</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">MIN</span>(Age) <span class="keyword">INTO</span> <span class="keyword">min</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">AVG</span>(Age) <span class="keyword">into</span> <span class="keyword">avg</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">MAX</span>(Age) <span class="keyword">into</span> <span class="keyword">max</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<p>此过程接受三个参数， 分别用于获取TeacherInfoFor表的最小、平均、最大年龄。每个参数必须具有指定的类<br>型，这里使用十进制值（decimal(8,2)）， 关键字<span style="color:red;">OUT</span>指出相应的参数用来从存储过程传出<br>一个值（返回给调用者）。</p>
<blockquote>
<p>MySQL支持IN（传递给存储过程）、OUT（从存储过程传出，如这里所用）和INOUT（对存储过程传入和传出）类型的参数。存储过程的代码位于BEGIN和END语句内，如前所见，它们是一系列SELECT语句，用来检索值，然后保存到相应的变量（通过指定INTO关键字）</p>
</blockquote>
<p>为调用此修改过的存储过程，必须指定3个变量名，如下所示：(所有MySQL变量都必须以@开始。)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 由于过程指定三个参数， 故调用必须要参数匹配</span></span><br><span class="line"><span class="keyword">call</span> procedureName(@<span class="keyword">min</span>, @<span class="keyword">avg</span>, @<span class="keyword">max</span>);</span><br></pre></td></tr></table></figure>
<p>该调用并没有任何输出， 只是把调用的结果赋给了调用时传入的变量（@min, @avg, @max）。然后即可调用显示该变量的值。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="keyword">min</span>, @<span class="keyword">avg</span>, @<span class="keyword">max</span>;</span><br></pre></td></tr></table></figure>
<p>使用in参数, 输入一个老师的id， 返回该老师下面的所有学生人数总和。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> getTotalById (</span><br><span class="line">    <span class="keyword">in</span> teacher_id <span class="built_in">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">    <span class="keyword">out</span> total <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(s.StuNo) <span class="keyword">from</span> Stu_Teacher s</span><br><span class="line">    <span class="keyword">where</span> s.TeacherID = teacher_id</span><br><span class="line">    <span class="keyword">into</span> total;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<p>调用存储过程</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> getTotalById(<span class="string">'004'</span>, @total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure>
<h2 id="6-为什么不推荐使用Mysql触发器而用存储过程？"><a href="#6-为什么不推荐使用Mysql触发器而用存储过程？" class="headerlink" title="6. 为什么不推荐使用Mysql触发器而用存储过程？"></a>6. 为什么不推荐使用Mysql触发器而用存储过程？</h2><ol>
<li>存储过程和触发器二者是有很大的联系的，我的一般理解就是触发器是一个隐藏的存储过程，因为它不需要参数，不需要显示调用，往往在你不知情的情况下已经做了很多操作。从这个角度来说，<span style="background:yellow;">由于是隐藏的，无形中增加了系统的复杂性，非DBA人员理解起来数据库就会有困难，因为它不执行根本感觉不到它的存在</span>。</li>
<li>再有，涉及到复杂的逻辑的时候，触发器的嵌套是避免不了的，如果再涉及几个存储过程，再加上事务等等，很容易出现死锁现象，再调试的时候也会经常性的从一个触发器转到另外一个，级联关系的不断追溯，很容易使人头大。其实，从性能上，触发器并没有提升多少性能，只是从代码上来说，可能在coding的时候很容易实现业务，所以我的观点是：<span style="background:red;">摒弃触发器！触发器的功能基本都可以用存储过程来实现。</span></li>
<li>在编码中存储过程显示调用很容易阅读代码，触发器隐式调用容易被忽略。<br>存储过程也有他的致命伤↓</li>
<li><span style="background:yellow;">存储过程的致命伤在于移植性，存储过程不能跨库移植，比如事先是在mysql数据库的存储过程，考虑性能要移植到oracle上面那么所有的存储过程都需要被重写一遍。</span></li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>《MySQL必知必会》: 链接: <a href="http://pan.baidu.com/s/1kVoNfGN" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVoNfGN</a> 密码: 9acp</li>
<li><a href="https://segmentfault.com/a/1190000006756268" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006756268</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 触发器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库三范式]]></title>
      <url>/2017/04/04/tech-db-three/</url>
      <content type="html"><![CDATA[<p>如何去理解数据库的三范式呢？下面是根据知乎上面的一些解答，总结出来的。</p>
<a id="more"></a>
<h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p><span style="color:red"><strong>属性不可分割</strong></span>。所谓的属性，就是我们说的字段，就比如学生信息表由姓名、年龄、性别、学号等组成，<span style="background-color:yellow">不可分割的意思按照字面理解就是不能拆分成最小的单位</span>。但是在国外，姓名是要分开的，也就是说姓名这个字段可以在分为 first name 和 last name，那么我们设计的这个表是不符合第一范式的。</p>
<h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>第二范式就是<span style="color:red"><strong>主键依赖</strong></span>，其他的字段都依赖主键。<span style="background-color:yellow">通过主键，我就可以获取到其他字段的值</span>。如果不依赖主键，我们就找不到他们。就像为什么学生信息表里面姓名不可以做主键，因为姓名存在同名，就违背了第二范式，学号是唯一的，是可以做为主键。</p>
<h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>第三范式就是要<span style="color:red"><strong>消除传递依赖</strong></span>，<span style="background-color:yellow">通俗一点就是消除冗余</span>。消除冗余应该比较好理解一些，就是各种信息只在一个地方存储，不出现在多张表中。就好比如说一个大学分了很多的系（计算机系、中文系、英语系。。。），这个系别管理表信息有以下字段组成：系编号，系主任，系简介，系架构。学生信息表中已经有姓名、年龄、学号、性别等字段，那能不能把系编号、系主任、系简介等字段一起存在学生信息表中呢？因为我们已经有系别管理表去存放系相关信息，再放到学生信息表中，就出现冗余，也就是传递依赖。这样就不符合第三范式，那么正确的做法是我们只需要添加一个系编号字段就行，根据该系编号字段，就可以获取到具体的系别信息，这就是第三范式。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《深入理解Java虚拟机》总结笔记]]></title>
      <url>/2017/02/10/tech-jvm-summary-note/</url>
      <content type="html"><![CDATA[<p>一直对JVM的内部原理不是很清楚，今天抽空看了下周志明先生的《深入理解Java虚拟机》一书，有了一点了解，做了个如下的笔记，方便日后翻看。</p>
<a id="more"></a>
<p><img src="/img/QQ20170210-0@2x.png" alt="笔记"></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring注解异常'sessionFactory' or 'hibernateTemplate' is required的解决方法]]></title>
      <url>/2017/01/19/tech-spring-hibernateTemplate-solution/</url>
      <content type="html"><![CDATA[<p>今天在做用户的注册的时候，因为采用的spring mvc ，在debug发现无法注入公共的dao这个bean。后来在网上找到解决解决方案。具体解决方案如下。</p>
<a id="more"></a>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>调试时出现异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: &apos;sessionFactory&apos; or &apos;hibernateTemplate&apos; is required    </span><br><span class="line">        at org.springframework.orm.hibernate3.support.HibernateDaoSupport.checkDaoConfig(HibernateDaoSupport.java:118)    </span><br><span class="line">        at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)    </span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)    </span><br><span class="line">        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)    </span><br><span class="line">        ... 26 more</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>项目中所有Dao实现类都继承了自定义的<code>BaseServiceSupport</code>，而<code>BaseServiceSupport</code>中注入<code>DaoSupport</code>这个bean。<code>DaoSupport</code>的实现类<code>DaoSupportImpl</code>又继承了<code>HibernateDaoSupport</code>，以前写配置文件时，<code>sessionFactory</code>需要单独配置，现在全注解方式，如何设置<code>sessionFactory</code>呢？</p>
<p>在<code>DaoSupportImpl</code>中增加如下方法，使用<code>@Autowired</code>, 自动装配<code>SessionFactory</code>，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired    </span><br><span class="line">public void setSessionFactoryOverride(SessionFactory sessionFactory)&#123;    </span><br><span class="line">  super.setSessionFactory(sessionFactory);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Excepition </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的2016]]></title>
      <url>/2016/12/31/life-2016-summary/</url>
      <content type="html"><![CDATA[<p>今天是2016年的最后一天，心中感慨颇多，趁着年末，记录一下今年这一年的心路历程，写一份年终总结，给自己一份交代。</p>
<a id="more"></a>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2016年2月份，过完春节，就早早的来到了学校。因为大四，面临着就业的问题，心里压力还是蛮大的。23号晚上，跟一个朋友在外面吃晚饭，就聊到工作的事情，我跟他说明了我的想法，但他的建议是，在学校自己学跟在企业学，是有很大区别的，企业学进步空间更大，后来自己想想也对，立马就在23晚上买了26号去深圳的火车票。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016123168817IMG_20160601_183939R.jpg" alt="2016123168817IMG_20160601_183939R.jpg"></p>
<p>2月27号早上，大概七点到达深圳北站。因为我的父母都在深圳，他们常年在深圳打工，所以到深圳之前，我就托我妈帮我找好了房子，所以下了火车后至少还有个落脚的地方。因为以前寒暑假的时候，经常来深圳，所以对深圳还算是比较熟悉，一路上比较顺利。</p>
<p>在休整了两三天后，就开始着手准备找工作的时候，刚开始的时候，有针对性投了几家公司，但是打过来的电话很少，也就一两家的样子。我记忆最深刻的就是面试的第一家，着实被坑了一把。那家公司在南山，而我在龙岗这边，坐地铁和公交得接近两个小时。约的时间是上午十点钟，早上七点就起床直奔那里，好在赶在十点之前赶到那里。到了那里后就傻眼了，居然是一家培训机构，最奇葩的是，我居然遇到了自己同一个学院的同学，两个人真是哭笑不得。所以第一次面试就这么告吹了。</p>
<p>后来意识到这样不行，机会太少，索性就直接海投，上前程无忧，全选。果然，第二天，就接到了十多个电话，面试满满的排了一周。接下来的一周面试，几乎是把整个深圳都跑遍了，有时候上午在南山区面试，下午一家在福田区面试，为了赶时间，中饭都没得时间吃。在面试过程中，面试官总喜欢拿没有毕业说事，碰了无数壁，遭受无数打击，当然也遇到过人很好的面试官。其中有一家，印象比较深刻，当时跟面试官很谈得来，后来中午饭都是那个面试官请的，他也向我抛出了橄榄枝，但是因为薪资问题，最后还是拒绝了他的好意。时间就这样过了一周，中间也拿了好几个offer，最后经过自己的慎重选择，就决定去我现在就职的公司。</p>
<h2 id="煎熬"><a href="#煎熬" class="headerlink" title="煎熬"></a>煎熬</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123127657IMG20160628091437.jpg" alt="2016123127657IMG20160628091437.jpg"></p>
<p>3月10，顺利入职。公司本部在龙岗，在公司本部办理了相关手续后，就去了福田那边，因为那边有个项目，大部分人都在那边，所以我也就去了那边。</p>
<p>进入开发组，还是跟往常一样，装环境，熟悉项目，认识新的同事。比较庆幸的一点，周围的同事都很合得来，我是做java的，我们java组加上我一共三个人，一个外号叫老王，他也姓王，跟我一个姓，所以大家叫他老王，他人比较随和，技术很好，喜欢唱歌，没事总会哼两句。另外一个叫励志（本名叫立志），带着个眼睛，看上去比较正经，但其实是一个内心非常活跃的人，技术也非常厉害。让我比较惊讶的是，他们本科阶段都不是学计算机的，老王是学教育学的，励志是搞建筑的，半路出家，居然这么厉害，让人钦佩。另外这个项目组还有c#端，安卓端，这些同事人都不错，非常的有个性，也就是在这样的工作环境下，我开始了我的开发历程。</p>
<p>一周后，基本上对项目的业务也算比较熟悉，接到了老大布置的第一个任务，报表开发。说实话，还是第一次做报表开发，以前没做过，他们这个报表之前是用的微软的reporting service报表服务器，研究了快一两个星期，虽然懂了一点，但是依旧做不出什么实质性的东西，内心是非常煎熬的。那段时间基本上是天天熬夜，但是还好，努力总是有收获的，最后在规定的时间做出来了，心里还是有点满足感的。</p>
<h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123162690mmexport1483153082049.jpg" alt="2016123162690mmexport1483153082049.jpg"></p>
<p>6月6号，我终于正式毕业了！那一天，班上一共33位同学，一共32位同学到齐，比较遗憾的是，有一位同学因为工作的原因，没能参见最后的毕业聚会。毕业散伙饭的那天，大家喝酒吃饭唱k，各种回顾自己大学阶段的各种往事。因为今天一过，标志着学生时代的结束，大家各奔东西，很难再聚的齐。我之前就跟班上的同学说过，我一定要第一个收拾东西走，因为看到他们一个个走后，空荡荡的寝室，心里会非常的难受。四年之前不想来，四年之后不想走，亲爱的你们，现在还过的好吗？</p>
<h2 id="数码"><a href="#数码" class="headerlink" title="数码"></a>数码</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123112580IMG_0905.JPG" alt="2016123112580IMG_0905.JPG"></p>
<p>8月份，上了几个月班后，也攒了点小钱，这个时候，瞬间忍不住想剁手了。我对数码行业是非常的感兴趣，是个十足的手机发烧友。我非常喜欢的两家科技公司是锤子科技和Apple，因为我觉得这两家公司是实实在在认真做产品的公司。这里不得不说的就是锤子科技，因为老罗做产品的态度，以及他鲜明的个性，使得我成为了老罗的脑残粉。之前在学校的时候，一直想买一部锤子手机支持下老罗，但是那个时候囊中羞涩，所以作罢。现在工作了，也是是时候支持支持下老罗了。接着就在京东购入了第一台锤子手机-T2，拿到手的时候，被它深深吸引了，目前T2还一直在我的手上服役，丝毫没有卡顿的感觉。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016123125547IMG_20161103_225459R.jpg" alt="2016123125547IMG_20161103_225459R.jpg"></p>
<p>10月1号，国庆节，之前一直垂涎苹果 macbook pro ，在积攒了几个月的银子后，我终于入手了人生第一台 macbook pro。我为什么要选择买macbook pro 呢？因为每天要挤地铁，每天背着五六斤重的电脑，让人生不如死，再个它有着超高的颜值，天生的unix血统，程序员的必备神器。唉，不说了。。。我得吃土了。</p>
<h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123121553QQ20161231-111446@2x.png" alt="2016123121553QQ20161231-111446@2x.png"></p>
<p>9月23号，我自己搭建的个人博客网站终于顺利上线。之所以想搭建一个博客网站，主要是想用它来记录自己的一些技术笔记和生活感想，也顺便练练自己的文笔，程序员也可以很文艺的嘛。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016123146632IMG_20161006_133350R.jpg" alt="2016123146632IMG_20161006_133350R.jpg"></p>
<p>10月6号，跟友人一起登上了深圳最顶峰，梧桐山，那一天，我想我已经把今年一年的山全爬完了，早上十点钟上山，晚上七点天黑才下山，非常艰辛。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>回首展望这一年，有过心酸，也有过快乐，新的一年也即将来临，我也给自己定了个小目标，比如挣他个。。。，额。。说错了，来点实际的：</p>
<ul>
<li>看几本自己喜欢看的书。</li>
<li>健身、减肥</li>
<li>买一块超大的显示器</li>
<li>考驾照</li>
<li>多写博客</li>
<li>去丽江旅行一次</li>
</ul>
<p>别了，难忘的2016，你好，2017！</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS上搭建FastDFS图片服务器教程]]></title>
      <url>/2016/12/22/tech-centos-fastDFS/</url>
      <content type="html"><![CDATA[<p>centOS上搭建FastDFS图片服务器教程。<br><a id="more"></a></p>
<h2 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h2><p>FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/20161223801021.png" alt="20161223801021.png"></p>
<h2 id="文件上传流程"><a href="#文件上传流程" class="headerlink" title="文件上传流程"></a>文件上传流程</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223932372.png" alt="20161223932372.png"></p>
<h2 id="文件下载流程"><a href="#文件下载流程" class="headerlink" title="文件下载流程"></a>文件下载流程</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223635383.png" alt="20161223635383.png"></p>
<h2 id="上传文件的文件名"><a href="#上传文件的文件名" class="headerlink" title="上传文件的文件名"></a>上传文件的文件名</h2><p>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/20161223506684.png" alt="20161223506684.png"></p>
<ul>
<li>组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。</li>
<li>虚拟磁盘路径：storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。</li>
<li>数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</li>
<li>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</li>
</ul>
<h2 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223488205.png" alt="20161223488205.png"></p>
<p>可以使用一台虚拟机来模拟，只有一个Tracker、一个Storage服务。配置nginx访问图片。</p>
<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol>
<li>第一步：把fastDFS源码上传到linux系统。</li>
<li>第二步：安装FastDFS之前，先安装libevent工具包。命令：<code>yum -y install libevent</code>。</li>
<li><p>第三步：安装libfastcommonV1.0.7工具包。</p>
<ul>
<li>将libfastcommonV1.0.7源码解压缩</li>
<li><code>./make.sh</code></li>
<li><code>./make.sh install</code></li>
<li>把<code>/usr/lib64/libfastcommon.so</code>文件向<code>/usr/lib/</code>下复制一份</li>
</ul>
</li>
<li><p>第四步：安装Tracker服务。</p>
<ul>
<li>fastDFS源码解压缩</li>
<li><code>./make.sh</code></li>
<li><code>./make.sh install</code></li>
<li>把<code>/root/FastDFS/conf</code>目录下的所有的配置文件都复制到<code>/etc/fdfs</code>下。</li>
<li>配置<code>tracker</code>服务。修改<code>/etc/fdfs/tracker.conf</code>文件。配置<code>tracker</code>日志文件路径。</li>
</ul>
<p><img src="http://og1m51u2s.bkt.clouddn.com/20161223411366.png" alt="20161223411366.png"></p>
<ul>
<li>启动tracker，执行命令：<code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</code>，重启命令：<code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code>。</li>
</ul>
</li>
<li><p>第五步：安装storage服务。</p>
<ul>
<li>如果storage是按照在其他的服务器上面，第四步的1~4需要重新执行。</li>
<li>配置storage服务。修改<code>/etc/fdfs/storage.conf</code>文件。</li>
</ul>
<p><img src="http://og1m51u2s.bkt.clouddn.com/20161223669197.png" alt="20161223669197.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/201612234318.png" alt="201612234318.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/20161223979359.png" alt="20161223979359.png"></p>
<ul>
<li>启动storage服务。<code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</code></li>
</ul>
</li>
<li><p>第六步：测试服务。修改客户端配置文件<code>/etc/fdfs/client.conf</code>。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/201612231068010.png" alt="201612231068010.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/201612235555411.png" alt="201612235555411.png"></p>
<p>执行命令：<code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code></p>
</li>
<li><p>第七步：搭建nginx提供http服务</p>
<p>使用官方提供的nginx插件，<code>fastdfs-nginx-module_v1.16.tar.gz</code>，添加该插件后，nginx则需要重新编译。</p>
<ul>
<li>将源码包上传到root根目录，然后解压缩。</li>
<li><p>修改/root/fastdfs-nginx-module/src/config文件，把其中的local去掉。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011282674nginxModule.png" alt="2017011282674nginxModule.png"></p>
</li>
<li><p>对nginx重新config，进入到<code>/root/nginx-1.8.0/</code>，在终端执行如下代码：</p>
</li>
</ul>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011223778QQ20170112-225927@2x.png" alt="2017011223778QQ20170112-225927@2x.png"></p>
<blockquote>
<p>不晓得是markdown格式不对还是怎么，这贴上去老是打乱整个文章格式，无奈只能截图。</p>
</blockquote>
<ul>
<li><code>make</code></li>
<li><code>make install</code></li>
<li>把/root/fastdfs-nginx-module/src/mod_fastdfs.conf文件复制到/etc/fdfs目录下。并编辑该文件，修改如下几个地方：</li>
</ul>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011266710nginxModule1.png" alt="2017011266710nginxModule1.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011232614nginxModule2.png" alt="2017011232614nginxModule2.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011279200nginxModule3.png" alt="2017011279200nginxModule3.png"></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011257498nginxModule4.png" alt="2017011257498nginxModule4.png"></p>
<ul>
<li>修改<code>/usr/local/nginx/conf/nginx.conf</code>nginx配置文件，修改server节点，如下所示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location /group1/M00/&#123;</span><br><span class="line">                ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>将libfdfsclient.so拷贝至/usr/lib下，执行命令：<code>cp /usr/lib64/libfdfsclient.so /usr/lib/</code></p>
</li>
<li><p>启动nginx,启动tracker，启动storage。</p>
</li>
</ul>
</li>
<li><p>第八步：测试</p>
</li>
</ol>
<p><code>cd /etc/fdfs/</code>,然后执行上传命令：<code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code>，假如出现如下的图，说明是上传成功的。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011214771QQ20170112-225034@2x.png" alt="2017011214771QQ20170112-225034@2x.png"></p>
<p>然后再浏览器访问生成的链接，假如能访问到我们刚上传的图片，就说明完整搭建好FastDFS。中间我一直上传不了，后来才发现自己没有启动tracker和storage，这里需要注意一下。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011235411QQ20170112-225350@2x.png" alt="2017011235411QQ20170112-225350@2x.png"></p>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>链接: <a href="https://pan.baidu.com/s/1mipA8QG" target="_blank" rel="noopener">https://pan.baidu.com/s/1mipA8QG</a> 密码: yd6r</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx的反向代理与负载均衡总结]]></title>
      <url>/2016/12/15/tech-nginx-summary/</url>
      <content type="html"><![CDATA[<p>nginx有两个非常重要的功能就是反向代理和负载均衡，今天就这两个重要的功能做个总结。</p>
<a id="more"></a>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121747446nginx.png" alt="2016121747446nginx.png"></p>
<p>从图中可以看出，当用户发送一个请求后，<code>nginx</code>会把请求随机转发给不同的服务器，<code>nginx</code>在当中担任一个<strong>请求转发</strong>的功能。</p>
<h3 id="哪些场景要用反向代理"><a href="#哪些场景要用反向代理" class="headerlink" title="哪些场景要用反向代理"></a>哪些场景要用反向代理</h3><p>当用户访问的数据量比较大的时候，一台服务器无法承受如此大的数据量的时候，需要多台服务器去处理，而nginx就负责把这些请求转发给不同的服务器。</p>
<h3 id="模拟反向代理实例"><a href="#模拟反向代理实例" class="headerlink" title="模拟反向代理实例"></a>模拟反向代理实例</h3><p>在这里我在centOS虚拟机上部署两个tomact来模拟两台服务器，这两台服务器部署了同一套代码。然后我在本机用<code>switchHost</code>来修改hosts，用浏览器访问<code>tomact.taotao.com</code>来模拟用户请求，然后观察相对应的处理结果。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><ol>
<li>在虚拟机安装jdk。</li>
<li>在虚拟机安装tomact，修改第一个tomact，主界面欢迎界面加入 <strong>8080</strong> 关键字， 修改第二个tomact，主界面欢迎界面加入 <strong>8081</strong> 关键字，来区别我们访问是不同的服务器（tomact)，然后我们启动两个tomact。</li>
<li><p>配置<code>nginx.conf</code>配置文件，添加server节点，配置请求转发。然后启动<code>nginx</code>。如下</p>
<pre><code>upstream tomcats{  
     server 10.211.55.6:8080;  
     server 10.211.55.6:8081;  
 }  
server {  
      listen       80;  
      server_name  tomact.taotao.com;  
      #charset koi8-r;  
      #access_log  logs/host.access.log  main;  
     location / {  
         proxy_pass   http://tomcats;  
         index  index.html index.htm;  
         }  
        }
</code></pre></li>
</ol>
<h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><ol>
<li><p>第一次请求，界面结果，显示<code>8080</code>界面，说明<code>nginx</code>将请求转发给了<code>tomact-1</code>。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121798219QQ20161217-171057@2x.png" alt="2016121798219QQ20161217-171057@2x.png"></p>
</li>
<li><p>第二次请求，界面结果，显示<code>8081</code>，说明<code>nginx</code>将请求转发给了<code>tomact-2</code>。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121758263QQ20161217-171319@2x.png" alt="2016121758263QQ20161217-171319@2x.png"></p>
</li>
</ol>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="http://og1m51u2s.bkt.clouddn.com/201612174195QQ20161217-172130@2x.png" alt="201612174195QQ20161217-172130@2x.png"></p>
<p>从图中可以看出，用户发起请求后，<code>nginx</code>检测到，服务器1出现宕机，立马将请求转移给服务器4，将压力转移到服务器4上面，从而实现负载均衡。</p>
<h3 id="哪些场景要用到负载均衡"><a href="#哪些场景要用到负载均衡" class="headerlink" title="哪些场景要用到负载均衡"></a>哪些场景要用到负载均衡</h3><p>如果我们的服务器的配置各有不同，那么我们就可以通过<code>nginx</code>为每台服务器设置权重，配置好的服务器可以承受更多请求，配置差一点的承担的压力要少一点，从而实现负载均衡。</p>
<h3 id="模拟负载均衡实例"><a href="#模拟负载均衡实例" class="headerlink" title="模拟负载均衡实例"></a>模拟负载均衡实例</h3><p>在之前配置的基础上，再次配置<code>nginx.conf</code>配置文件，为每台服务器添加权重<code>weight</code>，<code>weight</code>的值默认为1，<code>weight</code>的值越大，<code>nginx</code>将请求转发到该服务器的概率也就越大，然后启动<code>nginx</code>。如下：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121714181QQ20161217-180240@2x.png" alt="2016121714181QQ20161217-180240@2x.png">        </p>
<p>发起请求，发现界面显示的是<code>8080</code>，再次发起请求，界面依旧显示的是<code>8080</code>，第三次刷新的时候，界面才显示<code>8081</code>，由此可见，权重越大，nginx将请求转发给该服务器的概率越大，这就是负载均衡。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反向代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 使用技巧汇总(长期更新)]]></title>
      <url>/2016/12/12/tech-intellij-idea/</url>
      <content type="html"><![CDATA[<p>主要用来记录自己在使用 IntelliJ IDEA 遇到的一些问题</p>
<a id="more"></a>
<h2 id="web项目打war包"><a href="#web项目打war包" class="headerlink" title="web项目打war包"></a>web项目打war包</h2><p>在Project Structure里选择 <code>Artifact</code> ，新建一个 <code>Web Application: Archive --&gt; for XXX exploded</code> ，选择保存war包的路径，确定。然后 <code>Build--&gt;Build Artifact</code> ，在我们之前设置的路径下便可以找到已经打好的war包。</p>
<h2 id="IDEA导入多个eclipse项目到同一个workspace下"><a href="#IDEA导入多个eclipse项目到同一个workspace下" class="headerlink" title="IDEA导入多个eclipse项目到同一个workspace下"></a>IDEA导入多个eclipse项目到同一个workspace下</h2><p>首先先要明确，<code>eclipse</code> 中的 <code>workspace</code> 对应 <code>IDEA</code> 中的 <code>project</code> ，<code>eclipse</code> 中的 <code>project</code> 对应 <code>IDEA</code> 中的 <code>module</code>。</p>
<ol>
<li>先创建一个空的 <code>project</code>,<code>File --&gt; new Project --&gt; Empty Project</code>。</li>
<li>创建好新的 <code>project</code> 后，<code>File --&gt; new module from Existing source</code>，导入已经存在的 <code>Eclipse project</code>，一次只能导入一个<code>Eclipse project</code>，多个<code>Eclipse project</code>就导入多次即可。</li>
<li><p>点击 <code>file --&gt; project structure --&gt; artifacts</code>，创建部署包，方便部署到 <code>tomact</code> 上面。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016122293256QQ20161222-0@2x.png" alt="2016122293256QQ20161222-0@2x.png"></p>
</li>
<li><p><code>tomact</code> 部署 <code>artifact</code>即可。</p>
</li>
</ol>
<h2 id="一个Tomact中启动多个项目"><a href="#一个Tomact中启动多个项目" class="headerlink" title="一个Tomact中启动多个项目"></a>一个Tomact中启动多个项目</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121287326WX20161212-145750@2x.png" alt="2016121287326WX20161212-145750@2x.png"></p>
<ol>
<li>将 <code>Deploy application configured in Tomact Instance</code> 挑选上，他的意思是部署应用的时候启动不同的tomact实例。</li>
<li>更改tomact端口，这个跟eclipse中有点不太一样，eclipse中一个tomact部署多个项目的时候，只要一个端口即可，但是这里有多个项目的时候，需为每一个项目配置端口号。</li>
<li>如果启动，报 <code>java.lang.OutOfMemoryError: PermGen space</code>，在VM options中添加 <code>-Xms256m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=512m -Dfile.encoding=UTF8</code> ，增加tomact内存。</li>
</ol>
<h2 id="修改IDEA内存"><a href="#修改IDEA内存" class="headerlink" title="修改IDEA内存"></a>修改IDEA内存</h2><p>选中intellij IDEA并右击后点击显示包内容，路径：<code>/Applications/IntelliJ IDEA 15.app/Contents/bin/idea.vmoptions</code>打开idea.vmoptions，修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:MaxPermSize=1024m</span><br><span class="line">-XX:ReservedCodeCacheSize=700m</span><br><span class="line">-XX:+UseCompressedOops</span><br></pre></td></tr></table></figure>
<h2 id="IDEA自带svn与本地安装的svn客户端不匹配"><a href="#IDEA自带svn与本地安装的svn客户端不匹配" class="headerlink" title="IDEA自带svn与本地安装的svn客户端不匹配"></a>IDEA自带svn与本地安装的svn客户端不匹配</h2><p>用IDEA的时候，之前其实是有遇到过这个问题，但是当时没在意，直接用的<code>SnailSVN</code>（<strong>花了60大洋</strong>）这个软件提交代码，但是今天我把IDEA升级到<code>IDEA 15</code>这个版本的时候，依旧出现<code>SVN: E155021: this client is too old to work with the working copy</code>这个问题，没法使用IDEA的svn提交代码，就决定一定要把这个问题解决。</p>
<p>经过Google，最后发现，其实是我的本地安装的svn客户端太新，我安装的是1.9的版本，不是<code>too old</code>，按理说是<code>too new</code>。知道原因后，就准备安装1.8版本的svn，本来想<code>homebrew</code>安装，但是不晓得用它安装指定版本的svn，改用其他方法。经过网上查找，在<a href="https://www.wandisco.com/subversion/download#osx" target="_blank" rel="noopener">https://www.wandisco.com/subversion/download#osx</a> 找到相应的安装包。在下载的时候遇到一个比较蛋疼的问题，点击下载对应的按钮后，弹出如下的弹出框：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121264349QQ20161212-211419@2x.png" alt="2016121264349QQ20161212-211419@2x.png"></p>
<p>然后点击submit，啥也没了，按理说就可以下载了，后来蛋疼的发现，<strong>他把下载连接发到你填写的邮箱中去了</strong>，实在让人摸不着头脑。</p>
<p>接下来更改如下图所示：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121224619svn.png" alt="2016121224619svn.png"></p>
<p>重启idea，打开项目，就不会再出现这个错误了！</p>
<h2 id="IDEA中使用svn提交代码时忽略class等文件"><a href="#IDEA中使用svn提交代码时忽略class等文件" class="headerlink" title="IDEA中使用svn提交代码时忽略class等文件"></a>IDEA中使用svn提交代码时忽略class等文件</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016122185555QQ20161221-114348@2x.png" alt="2016122185555QQ20161221-114348@2x.png"></p>
<h2 id="“found-duplicate-code”-黄色下划线提示关闭"><a href="#“found-duplicate-code”-黄色下划线提示关闭" class="headerlink" title="“found duplicate code” 黄色下划线提示关闭"></a>“found duplicate code” 黄色下划线提示关闭</h2><p>打开 Settings → Editor → Inspections. 在出现的搜索栏处搜索 Duplicated Code ，回车，取消掉Duplicated Code后面的钩钩，然后OK即可取消提示。</p>
<h2 id="IDEA-maven项目导入本地jar包"><a href="#IDEA-maven项目导入本地jar包" class="headerlink" title="IDEA maven项目导入本地jar包"></a>IDEA maven项目导入本地jar包</h2><p>首先需要利用maven命令手动添加jar包到本地仓库，执行如下的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=jar包的位置 -DgroupId=jar包的groupId -DartifactId=jar包的artifactId -Dversion=jar包的version -Dpackaging=jar</span><br></pre></td></tr></table></figure>
<p>执行该命令后，出现如下图，便说明已经将jar添加到本地仓库。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2017011560594QQ20170115-190506@2x.png" alt="2017011560594QQ20170115-190506@2x.png"></p>
<p>接下来就是到项目的pom.xml配置文件中添加如下的配置，添加相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>fastdfs_client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs_client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/27660888/intellij-14-on-osx-how-to-specify-version-of-svn-client-used-through-the-ide" target="_blank" rel="noopener">http://stackoverflow.com/questions/27660888/intellij-14-on-osx-how-to-specify-version-of-svn-client-used-through-the-ide</a><br><a href="https://www.zhihu.com/question/35224913" target="_blank" rel="noopener">https://www.zhihu.com/question/35224913</a><br><a href="http://stackoverflow.com/questions/32062819/subversion-command-line-client-version-is-too-old-error-in-android-studio" target="_blank" rel="noopener">http://stackoverflow.com/questions/32062819/subversion-command-line-client-version-is-too-old-error-in-android-studio</a><br><a href="https://www.wandisco.com/subversion/download#osx" target="_blank" rel="noopener">https://www.wandisco.com/subversion/download#osx</a><br><a href="http://blog.csdn.net/jeepxiaozi/article/details/39856081" target="_blank" rel="noopener">http://blog.csdn.net/jeepxiaozi/article/details/39856081</a><br><a href="https://segmentfault.com/a/1190000005686920" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005686920</a></p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome浏览器插件推荐]]></title>
      <url>/2016/12/09/life-chrome-plugin/</url>
      <content type="html"><![CDATA[<p>作为一名java开发者，自然离不开浏览器，要问到我最喜欢用哪个浏览器，我可以毫不犹豫的告诉你，chrome！chrome浏览器简洁，启动速度快，兼容性好，最最最重要的一点，它拥有丰富的插件，有了这些插件，从此上网变成一件愉悦的事情，你再也不用忍受各种烦人的弹窗广告，以及恶心的某度公司的搜索置顶。下面我就我自己使用的一些chrome插件做一个总结。</p>
<a id="more"></a>
<hr>
<center><strong>开始之前，由于某种原因，我在这儿就不说了，请大家自备梯子！</strong></center>

<hr>
<h2 id="Adblock-Plus"><a href="#Adblock-Plus" class="headerlink" title="Adblock Plus"></a>Adblock Plus</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>神级插件，这个必须放到第一个，超过5000万人使用，免费的广告拦截器，可阻止所有烦人的广告及恶意软件和跟踪，从此终于可以享受没有恼人广告的网络世界。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN</a></p>
<h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>脚本管理器，通过这个插件，我们可以装一些实用的脚本，比如屏蔽百度推广、去掉贴吧中隐藏的广告、突破下载链接等等。非常的强大，像Firefox中的油猴脚本，跟这个类似。下图就是我安装的一些脚本。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120975554QQ20161209-224717@2x.png" alt="2016120975554QQ20161209-224717@2x.png"></p>
<p>该插件有着丰富的脚本库，比如<a href="https://openuserjs.org/" target="_blank" rel="noopener">OpenUserJS</a>、<a href="https://greasyfork.org/" target="_blank" rel="noopener">GreasyFork</a>、<a href="http://userscripts-mirror.org/" target="_blank" rel="noopener">Userscripts.org</a>，但是需要注意的一点是，Userscripts.org这个网站已经不再更新了，有许多的垃圾和病毒脚本,比如说,它们可能会试图窃取你的 Facebook 账户,还是要小心点哦!</p>
<h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN</a></p>
<h2 id="Stylish"><a href="#Stylish" class="headerlink" title="Stylish"></a>Stylish</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>有些时候我们看腻一个页面，能不能换点新花样呢？Stylish可以满足你的要求！<code>Stylish</code> 是一个调整网页外观的用户样式管理器。它可让您轻松地为许多热门网站网站安装主题和皮肤。像youtube，没换样式之前，是这样的：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120958030QQ20161209-225522@2x.png" alt="2016120958030QQ20161209-225522@2x.png"></p>
<p>当我们更换样式之后，就变成如下这样啦：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120938438QQ20161209-225738@2x.png" alt="2016120938438QQ20161209-225738@2x.png"></p>
<p>要对自己的眼睛好一点哦!</p>
<p>顺带说点题外话，该插件由 <code>Jason Barnabe</code> 创建,<code>Jason Barnabe</code> 同时也是 GreasyFork脚本库的创办者，膜拜下大神！</p>
<h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=zh-CN</a></p>
<h2 id="Chrono"><a href="#Chrono" class="headerlink" title="Chrono"></a>Chrono</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>原谅我实在不喜欢chrome自带的下载工具，点击下载后，居然显示到屏幕的最下方，有时候屏幕太大的时候，压根就不知道自己有没有下载成功。如果你跟我一样不喜欢chrome自带的下载工具，这个时候需要<code>Chrono</code>来拯救你。就像做<code>Chrono</code>简介，<strong>做Chrome浏览器中最好的下载管理器</strong>，它做到了！点击菜单栏中的<code>Chrono</code>按钮，就可以看到我们最近下载的记录。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120961125QQ20161209-230849@2x.png" alt="2016120961125QQ20161209-230849@2x.png"></p>
<p>但是就下载这么简单？No！！！，他还有个比较实用的工能，就是资源嗅探器，有些时候，我们想下载一些图片素材，但是因为某些原因，我们拿不到我们想要的，这个时候<code>Chrono</code>的资源嗅探器派上用场了，它可以自动的扫描页面上可以下载的资源图片，这样我们就可以轻轻松松拿到我们想要的素材资源了。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120942958QQ20161209-231303@2x.png" alt="2016120942958QQ20161209-231303@2x.png"></p>
<h3 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN</a></p>
<h2 id="划词翻译"><a href="#划词翻译" class="headerlink" title="划词翻译"></a>划词翻译</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>对于我们英语学渣来说，有时候要上网查找一些API的时候，发现很多单词不认识，安装这个插件后，选中，翻译，就这么简单！它支持谷歌、百度、有道、必应四大翻译和朗读引擎，可以方便的查看、复制和朗读不同引擎的翻译结果。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120993976QQ20161209-231758@2x.png" alt="2016120993976QQ20161209-231758@2x.png"></p>
<h3 id="下载-4"><a href="#下载-4" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad?hl=zh-CN</a></p>
<h2 id="简-Tab"><a href="#简-Tab" class="headerlink" title="简 Tab"></a>简 Tab</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>每天早上打开浏览器的时候，一张优美的风景照引入眼帘，是不是感觉瞬间神清气爽呢？讨厌了chrome默认的新建标签页，一片空白，着实单调。试试这个插件吧，每当我们新建一个标签页的时候，每次都会更换一张风景照片，每次打开都会有好心情哦！</p>
<h3 id="下载-5"><a href="#下载-5" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/simptab-new-tab/kbgmbmkhepchmmcnbdbclpkpegbgikjc?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/simptab-new-tab/kbgmbmkhepchmmcnbdbclpkpegbgikjc?hl=zh-CN</a></p>
<h2 id="为知笔记网页剪辑器"><a href="#为知笔记网页剪辑器" class="headerlink" title="为知笔记网页剪辑器"></a>为知笔记网页剪辑器</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>如果你是个比较喜欢作笔记的人，同时你又在用为知笔记来管理你的笔记，那么这款插件很适合你哦！如果你对谋篇文章或者博文很感兴趣，那么我就可以点击该插件，登陆我们的为知笔记账户，我们遍可以剪切该文章，并同步到为知笔记账户，是不是很方便呢？</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120971361QQ20161209-232733@2x.png" alt="2016120971361QQ20161209-232733@2x.png"></p>
<h3 id="下载-6"><a href="#下载-6" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=zh-CN</a></p>
<h2 id="网盘助手"><a href="#网盘助手" class="headerlink" title="网盘助手"></a>网盘助手</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>不知道你有没有这样的一个体验，无论你的网速有多快，你在百度云上下载东西到本地的时候，网速慢的像蜗牛！只有你开了他们家的会员，网速才能提高，真的不愧是流氓软件公司！为了突破百度的网速限制，采用网盘助手+Aria2方式，可以大幅度的提高下载速度，再也不用忍受这慢如蜗牛的速度了。因为我是mac电脑，也是在威锋论坛上看到的，win上面貌似也可以这么做，具体可以百度。用mac的同学可以参考<a href="http://bbs.feng.com/forum.php?mod=viewthread&amp;tid=10895696，上面有详细的教程。" target="_blank" rel="noopener">http://bbs.feng.com/forum.php?mod=viewthread&amp;tid=10895696，上面有详细的教程。</a></p>
<h2 id="SimpleUndoClose"><a href="#SimpleUndoClose" class="headerlink" title="SimpleUndoClose"></a>SimpleUndoClose</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>这个插件主要作用是查看我们刚刚关闭的网页，或许我们不小心关掉了某个标签页，我们可以在这里找回来，很实用的小插件。</p>
<h3 id="下载-7"><a href="#下载-7" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?hl=zh-CN</a></p>
<h2 id="斗鱼HTML5播放器"><a href="#斗鱼HTML5播放器" class="headerlink" title="斗鱼HTML5播放器"></a>斗鱼HTML5播放器</h2><h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>用mac的同学都知道，mac跟flash水火不相容，用flash播放器看视频，半个小时，可以烤鸡蛋，我平常没事儿喜欢看看直播，但是，很多直播网站还是用的flash，并不支持html5，通过该插件，可以将斗鱼直播网站的flash播放器切换成HTML5，这样就可以愉快的看直播了，但是这个插件还有些小bug，比如不能查看和发送弹幕，期待作者后期优化。</p>
<h3 id="下载-8"><a href="#下载-8" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/斗鱼html5播放器/hbocinidadgpnbcamhjgfbgiebhpnmfj?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/斗鱼html5播放器/hbocinidadgpnbcamhjgfbgiebhpnmfj?hl=zh-CN</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本上上面就是我的浏览器就装了上面的插件，有了这些插件，大大提高了我浏览器使用效率，也感谢这些插件的作者无私的奉献精神，最后想说一句，<strong>“同学，换chrome吧！”</strong></p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在centOS上安装nginx教程]]></title>
      <url>/2016/12/08/tech-centOS-nginx/</url>
      <content type="html"><![CDATA[<p>最近项目中用到了反向代理服务器<strong>nginx</strong>，没用过这玩意儿，自己就尝试着在虚拟机中安装nginx，下面就把整个安装过程中遇到的问题以及安装过程记录一下。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</li>
<li>虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li>
<li>反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。</li>
</ol>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>虚拟机安装的是centOS 6.8</li>
<li>nginx-1.8.0.tar.gz</li>
<li>本机是mac OSX 10.11</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进入 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a> 可进行下载</p>
<h2 id="安装nginx依赖的包"><a href="#安装nginx依赖的包" class="headerlink" title="安装nginx依赖的包"></a>安装nginx依赖的包</h2><h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><p>因为nginx是用c语言开发的，所以我们需要用gcc对我们下载下来的源码进行编译，在安装之前先查看本机是否已经安装了gcc，终端输入<strong>gcc -v</strong>，如果显示gcc版本号，说明本机是已经安装好gcc的，就没必要安装了，如果没有显示gcc对应的版本号，在本机联网的情况下，终端输入指令：<strong>yum install gcc-c++</strong>，即可安装。</p>
<h3 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h3><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。安装指令：<strong>yum install -y pcre pcre-devel</strong></p>
<h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。安装指令：<strong>yum install -y zlib zlib-devel</strong></p>
<h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。安装指令：<strong>yum install -y openssl openssl-devel</strong></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>用iTerm2 ssh 远程连接终端，输入 <strong>ssh -p 22 root@10.211.55.6</strong></p>
</li>
<li><p>将nginx源码上传到centOS</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120810700QQ20161208-0@2x.png" alt="2016120810700QQ20161208-0@2x.png"></p>
<blockquote>
<p>假如我们是root用户登录，那么上传的文件所在的文件夹在“/root“目录下，如果是普通用户的话，上传的文件夹是“/home/用户名/“下面。</p>
</blockquote>
</li>
<li><p>将压缩包解压缩，执行命令：<strong>tar -zxvf nginx-1.8.0.tar.gz</strong></p>
</li>
<li><p>进行configure配置，终端输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span style="color:red">注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录，否则就回报错</span>     </p>
</blockquote>
</li>
<li><p>执行make指令</p>
</li>
<li><p>执行make install</p>
</li>
</ol>
<h2 id="nginx启动与停止"><a href="#nginx启动与停止" class="headerlink" title="nginx启动与停止"></a>nginx启动与停止</h2><ol>
<li><p>启动：进入到/usr/local/nginx/sbin，终端输入 ./nginx 就可以启动。浏览器访问 输入linux 主机 ip出现如下图，说明配置安装成功。</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120852810QQ20161208-1@2x.png" alt="2016120852810QQ20161208-1@2x.png"> </p>
<p>中间有遇到过一个小问题，就是在centOS上本机可以访问，但是我在mac机器上却无法访问，后来上网寻找到解决办法，是centOS防火墙的原因，执行如下的命令，即可解决.</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016120855490QQ20161208-2@2x.png" alt="2016120855490QQ20161208-2@2x.png">    </p>
</li>
<li><p>关闭nginx：在sbin目录下执行命令：<strong>./nginx -s stop</strong></p>
</li>
<li><p>刷新配置：在sbin目录下执行命令：<strong>./nginx -s reload</strong></p>
</li>
</ol>
<h2 id="Niginx的配置"><a href="#Niginx的配置" class="headerlink" title="Niginx的配置"></a>Niginx的配置</h2><p>在<code>/usr/local/nginx/conf/</code>的<code>nginx.conf</code>文件便是nginx的配置文件</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121586546nginxConf.png" alt="2016121586546nginxConf.png"></p>
<h2 id="使用nginx配置虚拟机"><a href="#使用nginx配置虚拟机" class="headerlink" title="使用nginx配置虚拟机"></a>使用nginx配置虚拟机</h2><h3 id="通过端口区分虚拟机"><a href="#通过端口区分虚拟机" class="headerlink" title="通过端口区分虚拟机"></a>通过端口区分虚拟机</h3><p>在<code>nginx.conf</code>添加一个server节点，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">        listen   81;  </span><br><span class="line">        server_name  localhost;  </span><br><span class="line">        #charset koi8-r;  </span><br><span class="line">        #access_log  logs/host.access.log  main;  </span><br><span class="line">        location / &#123;  </span><br><span class="line">        root   html81;  </span><br><span class="line">        index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>添加后刷新配置文件，进入到sbin目录，执行<code>./nginx -s reload</code>，配置文件就会生效。<br>浏览器访问<code>http://ip地址:81</code>，就可以访问到81端口的资源内容。</p>
<h3 id="通过域名区分虚拟主机"><a href="#通过域名区分虚拟主机" class="headerlink" title="通过域名区分虚拟主机"></a>通过域名区分虚拟主机</h3><h4 id="通过域名如何访问web服务器"><a href="#通过域名如何访问web服务器" class="headerlink" title="通过域名如何访问web服务器"></a>通过域名如何访问web服务器</h4><ol>
<li><p>原理</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121520476dns.png" alt="2016121520476dns.png"></p>
<p>借助软件做个测试，修改本机的host，模拟不同的域名指向同一个端口，mac平台修改host软件有<a href="https://h.ihosts.toolinbox.net/cn/" target="_blank" rel="noopener">iHosts</a>，win平台下面有<a href="http://www.appinn.com/switchhosts/" target="_blank" rel="noopener">switchHosts</a></p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121556448QQ20161215-205921@2x.png" alt="2016121556448QQ20161215-205921@2x.png"></p>
<p>这样在浏览器输入<code>test.taotao.com</code>、<code>test2.taotao.com</code>、<code>test3.taotao.com</code>，都会访问linux 主机80端口。</p>
</li>
<li><p>配置基于域名的虚拟主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">		listen       80;  </span><br><span class="line">		server_name  域名;  </span><br><span class="line">		</span><br><span class="line">		#charset koi8-r;  </span><br><span class="line">		</span><br><span class="line">		#access_log  logs/host.access.log  main;  </span><br><span class="line">		</span><br><span class="line">		location / &#123;  </span><br><span class="line">			root   html-test3;  </span><br><span class="line">			index  index.html index.htm;  </span><br><span class="line">			&#125;  </span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>修改后要重新刷新<code>ngin.conf</code>配置文件。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，教程就结束啦，整个过程还算比较顺利，也没遇到啥棘手的问题，特此记录，方便日后查看。</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis 分页插件PageHelper使用及总结]]></title>
      <url>/2016/12/05/tech-mybatis-pagehelper/</url>
      <content type="html"><![CDATA[<p>今天在看视频教程的时候，遇到了mybatis的分页插件PaheHelper，感觉很好用，它支持主流的数据库，该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。所以在这里总结下。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120556503mybatis分页查询原理.png" alt="2016120556503mybatis分页查询原理.png"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>在SqlMapConfig.xml中配置plugin</li>
<li>在sql语句查询之前，<span style="color:red;"><strong>PageHelper.startPage(page, rows)</strong></span></li>
<li>获取分页结果，<span style="color:red;"><strong>PageInfo<tbitem> info = new PageInfo&lt;&gt;(list);</tbitem></strong></span>list参数是查询到的结果集，pageInfo封装了分页信息</li>
</ol>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在pom.xml中添加如下的依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改SqlMapConfig-xml"><a href="#修改SqlMapConfig-xml" class="headerlink" title="修改SqlMapConfig.xml"></a>修改SqlMapConfig.xml</h3><p>在mubatis配置文件中添加插件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">		PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">		"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置分页插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 指定数据库方言 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>前台采用easyUI的dataGrid组件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"easyui-datagrid"</span> <span class="attr">id</span>=<span class="string">"itemList"</span> <span class="attr">title</span>=<span class="string">"商品列表"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">data-options</span>=<span class="string">"singleSelect:false,collapsible:true,pagination:true,url:'/item/list',method:'get',pageSize:30,toolbar:toolbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'ck',checkbox:true"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'id',width:60"</span>&gt;</span>商品ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'title',width:200"</span>&gt;</span>商品标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'cid',width:100"</span>&gt;</span>叶子类目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'sellPoint',width:100"</span>&gt;</span>卖点<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'price',width:70,align:'right',formatter:TAOTAO.formatPrice"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'num',width:70,align:'right'"</span>&gt;</span>库存数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'barcode',width:100"</span>&gt;</span>条形码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'status',width:60,align:'center',formatter:TAOTAO.formatItemStatus"</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'created',width:130,align:'center',formatter:TAOTAO.formatDateTime"</span>&gt;</span>创建日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'updated',width:130,align:'center',formatter:TAOTAO.formatDateTime"</span>&gt;</span>更新日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><h4 id="pojo实体"><a href="#pojo实体" class="headerlink" title="pojo实体"></a>pojo实体</h4><p>我们需要一个实体去封装我们获取到分页信息，这个实体被解析为json字符串，必须符合dataGrid的数据格式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.taotao.pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyUIDataGridResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * easyUI dataGrid 返回结果封装</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">// 总的记录数</span></span><br><span class="line">	Long total;</span><br><span class="line">	<span class="comment">// 数据集</span></span><br><span class="line">	List&lt;?&gt; rows;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> total;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.total = total;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> List&lt;?&gt; getRows() &#123;</span><br><span class="line">		<span class="keyword">return</span> rows;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;?&gt; rows)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.rows = rows;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;TbItem&gt; <span class="title">selectByExample</span><span class="params">(TbItemExample example)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">getItemList</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//分页处理</span></span><br><span class="line">		PageHelper.startPage(page, rows);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//查询结果</span></span><br><span class="line">		TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">		List&lt;TbItem&gt; list = itemMapper.selectByExample(example);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取分页信息</span></span><br><span class="line">		PageInfo&lt;TbItem&gt; info = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">		EasyUIDataGridResult result = <span class="keyword">new</span> EasyUIDataGridResult();</span><br><span class="line">		<span class="keyword">long</span> total = info.getTotal();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//封装分页信息</span></span><br><span class="line">		List&lt;TbItem&gt; row = info.getList();</span><br><span class="line">		result.setRows(row);</span><br><span class="line">		result.setTotal(total);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 商品列表，分页</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/item/list"</span>)</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> EasyUIDataGridResult <span class="title">getItemList</span><span class="params">(Integer page,Integer rows)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> itemService.getItemList(page, rows);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120579015QQ20161205-1@2x.png" alt="2016120579015QQ20161205-1@2x.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pageHelper会使用ThreadLocal获取到同一线程中的变量信息，<strong>各个线程之间的Threadlocal不会相互干扰</strong>，也就是Thread1中的ThreadLocal1之后获取到Tread1中的变量的信息，不会获取到Thread2中的信息。<br>所以在多线程环境下，各个Threadlocal之间相互隔离，可以实现，不同thread使用不同的数据源或不同的Thread中执行不同的SQL语句。所以，<strong>PageHelper利用这一点通过拦截器获取到同一线程中的预编译好的SQL语句之后将SQL语句包装成具有分页功能的SQL语句，并将其再次赋值给下一步操作，所以实际执行的SQL语句就是有了分页功能的SQL语句</strong></p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/jaryle/article/details/52315565" target="_blank" rel="noopener">http://blog.csdn.net/jaryle/article/details/52315565</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageHelper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[easyUI datagrid 动态表头的实现]]></title>
      <url>/2016/11/26/tech-easyui-datagrid/</url>
      <content type="html"><![CDATA[<p>最近在项目中，需要用easyUI 的datagrid组件去实现一个表报的功能。我们以前用datagrid都是前台约定好字段，然后我们返回的json字符串与前台字段相对应便可以生成数据表格，但是这次却不同，datagrid的表头是动态的，为了实现这个功能，琢磨了些时间，然后在此总结一下。</p>
<a id="more"></a>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>点击左侧的配置项名称，右侧生成统计报表，报表可以是一维的，也可能是二维的，表头动态变化的，如下面所示：</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016112619244QQ20161126-0@2x.png" alt="2016112619244QQ20161126-0@2x.png"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从后台读取列名称，在$(“#dg2”).datagrid({})时，并不指定url属性，不向服务器端发送请求，在datagrid之后，通过ajax向服务器发送请求，并接收绑定列名称，和内容的json。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><ol>
<li><p>jsp页面</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"表格统计结果"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"dg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryTable</span>(<span class="params">configId,configName</span>)</span>&#123;</span><br><span class="line">	$(<span class="string">"#tableHead"</span>).html(configName);</span><br><span class="line">	<span class="comment">//加载表格数据和动态表头</span></span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">        url:basePath + <span class="string">'statisticAnalysis/loadTableData.action'</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">			<span class="string">'configId'</span> : configId</span><br><span class="line">		&#125;,</span><br><span class="line">		cache : <span class="literal">false</span>,</span><br><span class="line">		dataType : <span class="string">"text"</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        	<span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + msg + <span class="string">')'</span>);</span><br><span class="line">        	<span class="comment">//统计表格</span></span><br><span class="line">        	$(<span class="string">'#dg2'</span>).datagrid(&#123;</span><br><span class="line">        		fit : <span class="literal">true</span>,</span><br><span class="line">        		fitColumns : <span class="literal">true</span>,</span><br><span class="line">        		striped : <span class="literal">true</span>,</span><br><span class="line">        		singleSelect: <span class="literal">true</span>,</span><br><span class="line">            	<span class="comment">//填充动态表头</span></span><br><span class="line">        		columns:result[<span class="number">0</span>].columns,</span><br><span class="line">        		pagination : <span class="literal">false</span>,</span><br><span class="line">        		loadMsg : <span class="string">"正在努力加载中......"</span>,</span><br><span class="line">        	&#125;);</span><br><span class="line">          	<span class="comment">//填充表格数据</span></span><br><span class="line">        	$(<span class="string">'#dg2'</span>).datagrid(<span class="string">"loadData"</span>,result[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><p>考虑到我的表报的复杂性，因为有两个维度，其实就是说，他的行(x)和列(z)是变化的，所以，我在通过webservice调取接口获取的数据之前，跟写接口的同事约定好我要的数据的json格式，如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"x"</span>:[<span class="string">"2016-01"</span>,<span class="string">"2016-02"</span>,<span class="string">"2016-03"</span>,<span class="string">"2016-04"</span>],</span><br><span class="line">        <span class="attr">"z"</span>:[<span class="string">"重大级别"</span>,<span class="string">"较大级别"</span>,<span class="string">"一般级别"</span>,<span class="string">"未达级别"</span>],</span><br><span class="line">        <span class="attr">"重大级别_2016-01"</span>:<span class="string">"34"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-01"</span>:<span class="string">"56"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-01"</span>:<span class="string">"98"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-01"</span>:<span class="string">"23"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-02"</span>:<span class="string">"67"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-02"</span>:<span class="string">"112"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-02"</span>:<span class="string">"234"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-02"</span>:<span class="string">"25"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-03"</span>:<span class="string">"67"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-03"</span>:<span class="string">"112"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-03"</span>:<span class="string">"234"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-03"</span>:<span class="string">"25"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-04"</span>:<span class="string">"76"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-04"</span>:<span class="string">"116"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-04"</span>:<span class="string">"115"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-04"</span>:<span class="string">"25"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>x ：就是动态的表头数据</li>
<li>z ：可以理解为列表头</li>
<li>z以下： 这些就是表格数据，他们的键是根据x和z两两组合而成，值就是统计值，比如”重大级别_2016-01”代表的意思就是2016年1月份重大级别的事件发生的数量。</li>
</ul>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loadTableData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">		<span class="comment">//返回的json字符串，这里我就先暂时用假数据</span></span><br><span class="line">		String jsonStr2 = <span class="string">"&#123;"</span></span><br><span class="line">				+ <span class="string">"\"x\":[\"2016-01\",\"2016-02\",\"2016-03\",\"2016-04\"],"</span></span><br><span class="line">				+ <span class="string">"\"z\":[\"重大级别\",\"较大级别\",\"一般级别\",\"未达级别\"],"</span></span><br><span class="line">				+ <span class="string">"\"重大级别_2016-01\":\"34\","</span> + <span class="string">"\"较大级别_2016-01\":\"56\","</span></span><br><span class="line">				+ <span class="string">"\"一般级别_2016-01\":\"98\","</span> + <span class="string">"\"未达级别_2016-01\":\"23\","</span></span><br><span class="line">				+ <span class="string">"\"重大级别_2016-02\":\"67\","</span> + <span class="string">"\"较大级别_2016-02\":\"112\","</span></span><br><span class="line">				+ <span class="string">"\"一般级别_2016-02\":\"234\","</span> + <span class="string">"\"未达级别_2016-02\":\"25\","</span></span><br><span class="line">				+ <span class="string">"\"重大级别_2016-03\":\"67\","</span> + <span class="string">"\"较大级别_2016-03\":\"112\","</span></span><br><span class="line">				+ <span class="string">"\"一般级别_2016-03\":\"234\","</span> + <span class="string">"\"未达级别_2016-03\":\"25\","</span></span><br><span class="line">				+ <span class="string">"\"重大级别_2016-04\":\"76\","</span> + <span class="string">"\"较大级别_2016-04\":\"116\","</span></span><br><span class="line">				+ <span class="string">"\"一般级别_2016-04\":\"115\","</span> + <span class="string">"\"未达级别_2016-04\":\"25\""</span> + <span class="string">"&#125;"</span>;</span><br><span class="line">		<span class="comment">//解析json字符串</span></span><br><span class="line">		JSONObject jsonobj = JSONObject.fromObject(jsonStr2);</span><br><span class="line">		JSONArray xAxle = jsonobj.getJSONArray(<span class="string">"x"</span>);</span><br><span class="line">		JSONArray zAxle = jsonobj.getJSONArray(<span class="string">"z"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 动态设置表头</span></span><br><span class="line">		String columns = <span class="string">"&#123;\"columns\":[["</span>;</span><br><span class="line">		columns += (<span class="string">"&#123;\"field\":\"zAxle\",\"title\":\"\",\"align\":\"center\",\"width\":50&#125;,"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xAxle.size(); i++) &#123;</span><br><span class="line">			String xString = xAxle.getString(i);</span><br><span class="line">			columns += (<span class="string">"&#123;\"field\":\"x_"</span> + i + <span class="string">"\",\"title\":\""</span> + xString + <span class="string">"\",\"align\":\"center\",\"width\":50&#125;,"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (columns.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">			columns = columns.substring(<span class="number">0</span>, columns.length() - <span class="number">1</span>);</span><br><span class="line">			columns += <span class="string">"]]&#125;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 动态设置表数据(需要考虑z轴为null的情况)</span></span><br><span class="line">		String rows = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">if</span> (zAxle.size() != <span class="number">0</span>) &#123;</span><br><span class="line">			rows = <span class="string">"&#123;\"total\":"</span> + zAxle.size() + <span class="string">",\"rows\":["</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; zAxle.size(); i++) &#123;</span><br><span class="line">				String subRows = <span class="string">"&#123;\"zAxle\":\""</span> + zAxle.getString(i) + <span class="string">"\","</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xAxle.size(); j++) &#123;</span><br><span class="line">					subRows += <span class="string">"\"x_"</span></span><br><span class="line">							+ j</span><br><span class="line">							+ <span class="string">"\":\""</span></span><br><span class="line">							+ jsonobj.get(zAxle.getString(i) + <span class="string">"_"</span></span><br><span class="line">									+ xAxle.getString(j)) + <span class="string">"\","</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (subRows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">					subRows = subRows.substring(<span class="number">0</span>, subRows.length() - <span class="number">1</span>);</span><br><span class="line">					subRows += <span class="string">"&#125;,"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				rows += subRows;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (rows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">				rows = rows.substring(<span class="number">0</span>, rows.length() - <span class="number">1</span>);</span><br><span class="line">				rows += <span class="string">"]&#125;"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			rows = <span class="string">"&#123;\"total\":"</span> + <span class="number">1</span> + <span class="string">",\"rows\":["</span>;</span><br><span class="line">			String subRows = <span class="string">"&#123;\"zAxle\":\""</span> + <span class="string">"数量"</span> + <span class="string">"\","</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xAxle.size(); j++) &#123;</span><br><span class="line">				subRows += <span class="string">"\"x_"</span> + j + <span class="string">"\":\""</span></span><br><span class="line">						+ jsonobj.get(xAxle.getString(j)) + <span class="string">"\","</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (subRows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">				subRows = subRows.substring(<span class="number">0</span>, subRows.length() - <span class="number">1</span>);</span><br><span class="line">				subRows += <span class="string">"&#125;,"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			rows += subRows;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (rows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">				rows = rows.substring(<span class="number">0</span>, rows.length() - <span class="number">1</span>);</span><br><span class="line">				rows += <span class="string">"]&#125;"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String mesg = <span class="string">"["</span> + columns + <span class="string">","</span> + rows + <span class="string">"]"</span>;</span><br><span class="line">		System.out.println(mesg);</span><br><span class="line">		request.setAttribute(<span class="string">"responseText"</span>, mesg);</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>最后返回前台的json数据如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"columns"</span>:[</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"zAxle"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">""</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_0"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-01"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_1"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-02"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_2"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-03"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_3"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-04"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"total"</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">"rows"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"重大级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"34"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"67"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"67"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"76"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"较大级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"56"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"112"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"112"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"116"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"一般级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"98"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"234"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"234"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"115"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"未达级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"23"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"25"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"25"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"25"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实思路很简单，关键在于我们要约定好我们的数据格式，然后将我们拿到的数据，再进一步的封装成前台datagrid需要的数据格式。当初一直卡在数据该如何去约定，我之所以这么约定数据格式，是因为不仅datagrid是动态的，同时在用echarts渲染成柱状图的时候，也是动态的，他也要需要特定的数据格式。为了方便后期遇到同样的问题，特此记录一下。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> easyUI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云+U图床解决编博客插图麻烦事儿]]></title>
      <url>/2016/11/05/life-tuchuang-picu/</url>
      <content type="html"><![CDATA[<p>喜欢用hexo写博客的同学不知道有没有遇到这么一个情况，每次要插入图片的时候，我们都要先把要插入的图片放到hexo/source/img/目录下，然后再写上markdown格式的图片链接，这样来来回回，会把人整疯掉的！今天就教大家怎么样便捷的在文章中快速的插入图片，这样就可以愉快的写文章啦。</p>
<a id="more"></a>
<h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><p>七牛云是国内领先的企业级云服务商,致力于打造以数据为核心的场景化 PaaS 服务。创建一个<a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>账号，就有免费的10g存储空间，用来存储博客的图片基本上是够用，超过10g后就要收费。之所以用七牛云来存储图片，是应为如果我们全部把图片放到站点目录下的话，网页的加载速度就会变慢。下面就来介绍如何创建七牛云存储。</p>
<ol>
<li>创建七牛云账号</li>
<li><p>添加对象存储</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110520190Snip20161105_1.png" alt="2016110520190Snip20161105_1.png"></p>
</li>
<li><p>创建对象存储</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110582239Snip20161105_2.png" alt="2016110582239Snip20161105_2.png"></p>
</li>
</ol>
<h2 id="U图床"><a href="#U图床" class="headerlink" title="U图床"></a>U图床</h2><p>通过上面的步骤，我们的七牛云存储已经建立好了，那我们怎么样才能把图片上传到七牛云，并且生成markdown格式呢？这里就要提到<a href="http://lzqup.com/" target="_blank" rel="noopener">U图床</a>，首先感谢这位作者的奉献，做出这么好的软件，真心感谢。目前U图床只支持七牛云，希望后期作者能支持更多的云存储。有了这个小插件，我们可以方便快捷的把我们的图片上传到七牛云上面去，并且能够根据我们自己的要求，生成链接或者markdown格式的链接。下面就如何用U图床如何配置七牛云做一下讲解。</p>
<ol>
<li><p>登陆七牛云，点击秘钥管理。</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110555464Snip20161105_5.png" alt="2016110555464Snip20161105_5.png"></p>
</li>
<li><p>记住这两个秘钥</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110573684Snip20161105_6.png" alt="2016110573684Snip20161105_6.png"></p>
</li>
<li><p>打开U图床，点击设置，输入秘钥以及空间名称，点击验证配置，验证成功，说明配置成功，失败就说明配置有问题,这里需要注意的是，如果我们的网站没有备案的话，图片url前缀只能使用七牛云默认的外链域名，备案的话就可以使用自己的网站的作为图片的url前缀，因为我的网站没有备案，所以只能用七牛云的默认外链。</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110530430Snip20161105_8.png" alt="2016110530430Snip20161105_8.png"></p>
</li>
<li><p>登陆七牛云，点击对象存储–&gt;更多操作–&gt;内容管理，就可以看到我们存储的图片</p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110523872Snip20161105_10.png" alt="2016110523872Snip20161105_10.png"></p>
<p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110562446Snip20161105_11.png" alt="2016110562446Snip20161105_11.png"></p>
</li>
</ol>
<p>具体的U图床操作大家可以去该作者的网站 <a href="http://lzqup.com/" target="_blank" rel="noopener">http://lzqup.com/</a>查看使用教程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，七牛云+U图床很好的解决了博客中插入图片的痛点，本来之前是想用微博图床，但是网上说微博图床不安全，说不定哪天就挂了，大多数人都选择七牛云来做图床，空间大，10g存储，稳定，总的来说，七牛云是个不错的选择。图床插件mac推荐U图床，但是win下面小伙伴们该用啥呢，这里推荐<a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPicok</a>，也是支持七牛云的哦。OK，教程到此结束，终于可以开心的写文章了。</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github博客css和js404导致博客页面空白]]></title>
      <url>/2016/11/05/tech-hexo-github-error/</url>
      <content type="html"><![CDATA[<p>就在昨天晚上，发生了一件比较奇怪的事情，我在网上看到一些关于hexo博客的优化的文章，便想在自己的博客上尝试一下，然后跟往常一样，先hexo g，然后在hexo s，本地测试一切都正常，然后项发布到github上测试下效果，结果打开博客地址，发现博客首页一片空白，但是该有的链接都可以点击，就是页面不显示。这是时候我在想是不是之前的添加的效果造成的，便删除掉之前的测试配置项，重新发布，也是出现同样的问题。后面各种尝试，甚至把 github 上仓库重新删掉，再到本机把之前备份的重新发布，问题依旧，折腾来折腾去。已经到1点半，实在有点困了，就先睡觉了。</p>
<a id="more"></a>
<p>早上八点，“叮咚。。。”，手机传来qq的通知声，此时已经没有睡意，打开qq一看，是技术直播群的一位兄弟@゜。。。在@我，然后跟我说他遇到同样，并且已经找到解决方案，我点击他给的链接，恍然大悟，原来是 <strong>github pages</strong> 更新所造成的。然后赶紧打开电脑修改，发布，问题解决！下面记录下解决的办法：</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>(我就是采用这个方法解决的)</p>
<ol>
<li><p>首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib </p>
</li>
<li><p>然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。主要集中在这几个文件中。</p>
<ul>
<li>Hexo\themes\next\ .bowerrc </li>
<li>Hexo\themes\next\ .gitignore </li>
<li>Hexo\themes\next\ .javascript_ignore </li>
<li><p>Hexo\themes\next\bower.json </p>
<p>修改完毕后，刷新重新g一遍就ok啦,但这里要注意的是，.开头的文件是默认隐藏掉的，所以有的同学找不到对应的文件，只要打开隐藏文件即可。</p>
</li>
</ul>
</li>
</ol>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>更新next主题，不过听过最新的next主题对第三方例如多说删除了，具体不清楚，不敢亲易尝试，毕竟更新一次主题引来的问题太多，很多配置可能都要改，代价太高，所以推荐第一种方法。</p>
<blockquote>
<p>参考文章：<a href="http://m.blog.csdn.net/article/details?id=53038679" target="_blank" rel="noopener">http://m.blog.csdn.net/article/details?id=53038679</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate SQL查询addScalar()和addEntity()区别]]></title>
      <url>/2016/11/02/tech-Hibernate-addScalar-addEntity/</url>
      <content type="html"><![CDATA[<p>Hibernate除了支持HQL查询外，还支持原生SQL查询。对原生SQL查询执行的控制是通过SQLQuery接口进行的，通过执行Session.createSQLQuery()获取这个接口。该接口是Query接口的子接口。</p>
<a id="more"></a>
<h2 id="SQL查询步骤"><a href="#SQL查询步骤" class="headerlink" title="SQL查询步骤"></a>SQL查询步骤</h2><ol>
<li>获取Hibernate Session对象 </li>
<li>编写SQL语句 </li>
<li>通过Session的createSQLQuery方法创建查询对象 </li>
<li>调用SQLQuery对象的<strong>addScalar()</strong>或<strong>addEntity()</strong>方法将选出的结果与标量值或实体进行关联，分别用于进行标量查询或实体查询 </li>
<li>如果SQL语句包含参数，调用Query的setXxxx方法为参数赋值 </li>
<li>调用Query的list方法返回查询的结果集 </li>
</ol>
<h2 id="标量查询"><a href="#标量查询" class="headerlink" title="标量查询"></a>标量查询</h2><p>最基本的SQL查询就是获得一个标量的列表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from person_inf"</span>).list();   </span><br><span class="line">session.createSQLQuery(<span class="string">"select id,name,age from person_inf"</span>).list();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>它们都将返回一个<strong>Object数组组成的List</strong>，数组每个元素都是person_inf表的一个字段值。Hibernate会使用<strong>ResultSetMetadata</strong>来判定返回的标量值的实际顺序和类型。</p>
</li>
<li><p>但是在JDBC中过多的使用ResultSetMetadata会降低程序的性能。所以为了过多的避免使用ResultSetMetadata或者为了指定更加明确的返回值类型，我们可以使用addScalar()方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from person_inf"</span>)    </span><br><span class="line">.addScalar(<span class="string">"name"</span>,StandardBasicTypes.STRING)  </span><br><span class="line">.addScalar(<span class="string">"age"</span>,StandardBasicTypes.INT)  </span><br><span class="line">.list();</span><br></pre></td></tr></table></figure>
<p>这个查询指定了：</p>
<ol>
<li>SQL查询字符串。</li>
<li>要返回的字段和类型。</li>
</ol>
<p>它仍然会返回Object数组,但是此时不再使用<strong>ResultSetMetdata</strong>,而是明确的将name和age按照String和int类型从resultset中取出。同时，也指明了就算query是使用*来查询的，可能获得超过列出的这三个字段，也仅仅会返回这三个字段。如果仅仅只需要选出某个字段的值，而不需要明确指定该字段的数据类型，则可以使用addScalar(String columnAlias)。</p>
<p>实例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scalarQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Session session = HibernateUtil.getSession();  </span><br><span class="line">        Transaction tx = session.beginTransaction();  </span><br><span class="line">        String sql = <span class="string">"select * from person_inf"</span>;  </span><br><span class="line">        List list = session.createSQLQuery(sql).  </span><br><span class="line">                    addScalar(<span class="string">"person_id"</span>,StandardBasicTypes.INTEGER).  </span><br><span class="line">                    addScalar(<span class="string">"name"</span>, StandardBasicTypes.STRING).  </span><br><span class="line">                    addScalar(<span class="string">"age"</span>,StandardBasicTypes.INTEGER).list();  </span><br><span class="line">        <span class="keyword">for</span>(Iterator iterator = list.iterator();iterator.hasNext();)&#123;  </span><br><span class="line">            <span class="comment">//每个集合元素都是一个数组，数组元素师person_id,person_name,person_age三列值  </span></span><br><span class="line">            Object[] objects = (Object[]) iterator.next();  </span><br><span class="line">            System.out.println(<span class="string">"id="</span>+objects[<span class="number">0</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"name="</span>+objects[<span class="number">1</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"age="</span>+objects[<span class="number">2</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"----------------------------"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        tx.commit();  </span><br><span class="line">        session.close();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从上面可以看出。标量查询中addScalar()方法有两个作用： </p>
<ol>
<li>指定查询结果包含哪些数据列—没有被addScalar选出的列将不会包含在查询结果中。 </li>
<li>指定查询结果中数据列的数据类型。</li>
</ol>
<h2 id="实体查询"><a href="#实体查询" class="headerlink" title="实体查询"></a>实体查询</h2><p>上面的标量查询返回的标量结果集，也就是从resultset中返回的“裸”数据。如果我们想要的结果是某个对象的实体，这是就可以通过addEntity()方法来实现。addEntity()方法可以讲结果转换为实体。但是在转换的过程中要注意几个问题：</p>
<ol>
<li>查询返回的是某个数据表的全部数据列 </li>
<li>该数据表有对应的持久化类映射</li>
</ol>
<p>这时才可以通过addEntity()方法将查询结果转换成实体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from perons_inf"</span>).addEntity(Person.class).list;    </span><br><span class="line">session.createSQLQuery(<span class="string">"select id,name,age from person_inf"</span>).addEntity(Person.class).list();</span><br></pre></td></tr></table></figure>
<p>这个查询指定：</p>
<ol>
<li>SQL查询字符串 </li>
<li>要返回的实体 </li>
</ol>
<p>假设Person被映射为拥有id,name和age三个字段的类，以上的两个查询都返回一个List，每个元素都是一个Person实体。</p>
<p>假若实体在映射时有一个many-to-one的关联指向另外一个实体，在查询时必须也返回那个实体（获取映射的外键列），否则会导致发生一个”column not found”的数据库错误。这些附加的字段可以使用*标注来自动返回，但我们希望还是明确指明，看下面这个具有指向teacher的many-to-one的例子： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select id, name, age, teacherID from person_inf"</span>).addEntity(Person.class).list();</span><br></pre></td></tr></table></figure>
<p>这样就可以通过person.getTeacher()获得teacher了。 </p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entityQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    Session session = HibernateUtil.getSession();  </span><br><span class="line">    Transaction tx = session.beginTransaction();  </span><br><span class="line">    String sql = <span class="string">"select * from person_inf"</span>;  </span><br><span class="line">    List list = session.createSQLQuery(sql).  </span><br><span class="line">    addEntity(Person.class).    <span class="comment">//指定将查询的记录行转换成Person实体  </span></span><br><span class="line">     list();       </span><br><span class="line">    <span class="keyword">for</span> (Iterator iterator = list.iterator();iterator.hasNext();) &#123;  </span><br><span class="line">        Person person = (Person) iterator.next();<span class="comment">//集合的每个元素都是一个Person对象  </span></span><br><span class="line">        System.out.println(<span class="string">"name="</span>+person.getName());  </span><br><span class="line">       System.out.println(<span class="string">"age="</span>+person.getAge());  </span><br><span class="line">  	&#125;  </span><br><span class="line">    tx.commit();  </span><br><span class="line">    session.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的都是单表查询，如果我们在SQL语句中使用了多表连接，则SQL语句可以选出多个数据表的数据。Hibernate支持将查询结果转换成多个实体。如果要将查询结果转换成多个实体，则SQL字符串中应该为不同数据表指定不同别名，并且调用addEntity()方法将不同数据表转换成不同实体。如下 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiEntityQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    Session session = HibernateUtil.getSession();  </span><br><span class="line">    Transaction tx = session.beginTransaction();  </span><br><span class="line">    String sql = <span class="string">"select p.*,e.* from person_inf as p inner join event_inf as e"</span> +  </span><br><span class="line">                 <span class="string">" on p.person_id=e.person_id"</span>;  </span><br><span class="line">    List list = session.createSQLQuery(sql)  </span><br><span class="line">                .addEntity(<span class="string">"p"</span>,Person.class)  </span><br><span class="line">                .addEntity(<span class="string">"e"</span>, MyEvent.class)  </span><br><span class="line">                .list();  </span><br><span class="line">    <span class="keyword">for</span>(Iterator iterator = list.iterator();iterator.hasNext();)&#123;  </span><br><span class="line">        <span class="comment">//每个集合元素都是Person、MyEvent所组成的数组  </span></span><br><span class="line">        Object[] objects = (Object[]) iterator.next();  </span><br><span class="line">        Person person = (Person) objects[<span class="number">0</span>];  </span><br><span class="line">        MyEvent event = (MyEvent) objects[<span class="number">1</span>];  </span><br><span class="line">        System.out.println(<span class="string">"person_id="</span>+person.getId()+<span class="string">" person_name="</span>+person.getName()+<span class="string">" title="</span>+event.getTitle());        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>转载自：<a href="http://blog.csdn.net/vacblog/article/details/7769976" target="_blank" rel="noopener">http://blog.csdn.net/vacblog/article/details/7769976</a> </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlserver、oracle、MySQL 递归查询的区别]]></title>
      <url>/2016/11/01/tech-sqlserver-oracle-recursion-diff/</url>
      <content type="html"><![CDATA[<p>经常在项目中遇到递归查询，但是因为数据库方言的不同，三种数据库的递归查询语句都不相同，在这里做一下总结，方便后期查看。</p>
<a id="more"></a>
<h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121052968QQ20161210-095910@2x.png" alt="2016121052968QQ20161210-095910@2x.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id --主键</span><br><span class="line">name --区域名称</span><br><span class="line">topgrid_id --上级区域id</span><br></pre></td></tr></table></figure>
<h2 id="oracle-写法"><a href="#oracle-写法" class="headerlink" title="oracle 写法"></a>oracle 写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,<span class="keyword">NAME</span>,TOPGRID_ID</span><br><span class="line"><span class="keyword">FROM</span> GRID <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="keyword">id</span> = <span class="number">1715</span> <span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">PRIOR</span> <span class="keyword">ID</span> = TOPGRID_ID;</span><br></pre></td></tr></table></figure>
<ul>
<li>关键字：<span style="color:red"><strong>start with 。。。 connect by prior 。。。</strong></span></li>
<li>含义：查询节点为1715下面所有的子节点，包括本身。</li>
</ul>
<h2 id="sqlserver-写法"><a href="#sqlserver-写法" class="headerlink" title="sqlserver 写法"></a>sqlserver 写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">WITH cte AS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">ID</span>,</span><br><span class="line">    <span class="keyword">NAME</span>,</span><br><span class="line">    TOPGRID_ID</span><br><span class="line">  <span class="keyword">FROM</span> GRID</span><br><span class="line">  <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1715</span></span><br><span class="line">  <span class="keyword">UNION</span> ALL</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    g.ID,</span><br><span class="line">    g.NAME,</span><br><span class="line">    g.TOPGRID_ID</span><br><span class="line">  <span class="keyword">FROM</span> cte c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Grid g</span><br><span class="line">      <span class="keyword">ON</span> c.id = g.TOPGRID_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> cte;</span><br></pre></td></tr></table></figure>
<ul>
<li>关键字：<span style="color:red"><strong>WITH 。。。 AS 。。。</strong></span></li>
</ul>
<h2 id="MySQL-写法"><a href="#MySQL-写法" class="headerlink" title="MySQL 写法"></a>MySQL 写法</h2><p>因为MySQL中没有connect by 这种写法，也没有with子句，需要定义一个函数去帮我们实现我们的功能。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> queryChildren;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">'queryChildren'</span> (areaId <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">4000</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sTemp <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sTempChd <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> sTemp = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">SET</span> sTempChd = <span class="keyword">cast</span>(areaId <span class="keyword">as</span> <span class="built_in">char</span>);</span><br><span class="line"></span><br><span class="line">WHILE sTempChd is not NULL <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">SET</span> sTemp = <span class="keyword">CONCAT</span>(sTemp,<span class="string">','</span>,sTempChd);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">group_concat</span>(<span class="keyword">id</span>) <span class="keyword">INTO</span> sTempChd <span class="keyword">FROM</span> grid <span class="keyword">WHERE</span> FIND_IN_SET(parentId,sTempChd)&gt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span></span><br><span class="line"><span class="keyword">return</span> sTemp;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<p>在sql语句使用该函数</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> GRID <span class="keyword">where</span> find_in_set(<span class="keyword">id</span>,queryChildrenAreaInfo(<span class="number">1715</span>));</span><br></pre></td></tr></table></figure>
<p>可以将id为1715的所有下级全部查询出来</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 递归查询 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一台机子上面启动多个tomact的问题]]></title>
      <url>/2016/10/27/tech-pc-multi-tomact/</url>
      <content type="html"><![CDATA[<p>之前一直在myeclipse上进行开发，但是myeclipse10非常的卡顿，实在受不了，就换IDEA 进行开发。但是换到IDEA后，把项目部署后，也能够跑起来，但是却发现无论如何都无法调取到接口。后来在终端用命令行启动tomact，只要把其中一个项目启动的时候，再启动第二个tomact的时候，总是启动后，又马上关闭了，有人说是在mac系统下权限的问题，但是改了后依旧无果。后来冷静的想了下，http端口改了，会不会两个tomact有其他的端口冲突呢？果不其然，上网查了下，确实有这个问题，所以特意记录下。</p>
<a id="more"></a>
<p>如果需要在一台机子上启动多个Tomcat服务器，在默认设置下肯定会发生端口冲突。为解决这个问题，只需修改conf子目录中的server.xml文件即可。共需修改三处： </p>
<ol>
<li><p>修改http访问端口（默认为8080端口）: </p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8080”</span> <span class="attr">protocol</span>=<span class="string">”HTTP/1.1″</span> </span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">”20000″</span> </span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">”8443″</span> <span class="attr">URIEncoding</span>=<span class="string">”gb2312″/</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改Shutdown端口（默认为8005端口）: </p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">”8005”</span> <span class="attr">shutdown</span>=<span class="string">”SHUTDOWN”</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改JVM启动端口（默认为8009端口）: </p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8009”</span> <span class="attr">protocol</span>=<span class="string">”AJP/1.3″</span> <span class="attr">redirectPort</span>=<span class="string">”8443″</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomact </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[easyUI tree组件的构建以及异步加载]]></title>
      <url>/2016/10/21/tech-easyui-tree/</url>
      <content type="html"><![CDATA[<p>在我们平常的编写的web的应用中，很多时候都会用到 tree，比如一些功能树，一些有层级关系的树等等，之前一直搞不明白这种树结构是如何编写出来的，通过在项目中的实际操作，总算有了些初步的认识，下面来好好总结下easyUI tree 的构成。</p>
<a id="more"></a>
<h2 id="相关表"><a href="#相关表" class="headerlink" title="相关表"></a>相关表</h2><p>我要构建的这颗树所相关的表BookOrg结构如下</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BOOKORGID     NUMBER           <span class="comment">--主键                       </span></span><br><span class="line">ORGID         NUMBER        Y                         </span><br><span class="line">BOO_BOOKORGID NUMBER        Y  <span class="comment">--上级机构的id                       </span></span><br><span class="line">ORGCODE       VARCHAR2(500) Y                         </span><br><span class="line">ORGCNNAME     VARCHAR2(200) Y  <span class="comment">--机构中文名称                       </span></span><br><span class="line">ORGENNAME     VARCHAR2(100) Y                         </span><br><span class="line">ORGCNSHORT    VARCHAR2(50)  Y                         </span><br><span class="line">ORGCNSPELL    VARCHAR2(500) Y                         </span><br><span class="line">ORGENSHORT    VARCHAR2(20)  Y                         </span><br><span class="line">ORGENSPELL    VARCHAR2(500) Y                         </span><br><span class="line">ORGLEVEL      INTEGER       Y                         </span><br><span class="line">ORGCHARGER    VARCHAR2(50)  Y                         </span><br><span class="line">ORGEMAIL      VARCHAR2(100) Y                         </span><br><span class="line">ORGADDRESS    VARCHAR2(200) Y  <span class="comment">--地址                       </span></span><br><span class="line">ORGREMARK     VARCHAR2(200) Y  <span class="comment">--备注                       </span></span><br><span class="line">ORGSORTID     INTEGER       Y  <span class="comment">--机构排序id                       </span></span><br><span class="line">ORGCANCELFLAG CHAR(1)       Y  <span class="comment">--用于逻辑删除的字段</span></span><br></pre></td></tr></table></figure>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>其实easyUI 树构建最主要的部分就是tree 的json字符串的拼接，这需要我们根据自己的业务需求在后台处理。先来看看看easyUI树的json字符串长什么样.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[&#123;   </span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,   </span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Folder1"</span>,   </span><br><span class="line">    <span class="attr">"iconCls"</span>:<span class="string">"icon-save"</span>,   </span><br><span class="line">    <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"File1"</span>,   </span><br><span class="line">        <span class="attr">"checked"</span>:<span class="literal">true</span>  </span><br><span class="line">    &#125;,&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Books"</span>,   </span><br><span class="line">        <span class="attr">"state"</span>:<span class="string">"open"</span>,   </span><br><span class="line">        <span class="attr">"attributes"</span>:&#123;   </span><br><span class="line">            <span class="attr">"url"</span>:<span class="string">"/demo/book/abc"</span>,   </span><br><span class="line">            <span class="attr">"price"</span>:<span class="number">100</span>   </span><br><span class="line">        &#125;,   </span><br><span class="line">        <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"PhotoShop"</span>,   </span><br><span class="line">            <span class="attr">"checked"</span>:<span class="literal">true</span>  </span><br><span class="line">        &#125;,&#123;   </span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">8</span>,   </span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"Sub Bookds"</span>,   </span><br><span class="line">            <span class="attr">"state"</span>:<span class="string">"closed"</span>  </span><br><span class="line">        &#125;]   </span><br><span class="line">    &#125;]   </span><br><span class="line">&#125;,&#123;   </span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Languages"</span>,   </span><br><span class="line">    <span class="attr">"state"</span>:<span class="string">"closed"</span>,   </span><br><span class="line">    <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Java"</span>  </span><br><span class="line">    &#125;,&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"C#"</span>  </span><br><span class="line">    &#125;]   </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>从中可以看出树控件每个节点都具备以下属性：</p>
<ul>
<li>id：节点ID，对加载远程数据很重要。</li>
<li>text：显示节点文本。</li>
<li>state：节点状态，’open’ 或 ‘closed’，默认：’open’。如果为’closed’的时候，将不自动展开该节点。</li>
<li>checked：表示该节点是否被选中。</li>
<li>attributes: 被添加到节点的自定义属性。</li>
<li>children: 一个节点数组声明了若干节点。</li>
</ul>
<p>ok，明白了树节点的相关属性，我们便可以来构建树节点信息相关的实体类</p>
<p><strong>TreeNode.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="comment">//显示节点的id  </span></span><br><span class="line">    <span class="keyword">private</span> Object id;  </span><br><span class="line">    <span class="comment">//节点状态 </span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="comment">//显示节点的名称</span></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="comment">//显示节点的图标</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="comment">//额外的需要用名</span></span><br><span class="line">    <span class="keyword">private</span> String externName;</span><br><span class="line">    <span class="comment">//显示节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> Object parentId;</span><br><span class="line">    <span class="comment">//显示节点的子节点集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">    <span class="comment">//添加子节点的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.children==<span class="keyword">null</span>)&#123;</span><br><span class="line">            children=<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">            children.add(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            children.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set、get方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是跟我们的业务相关的实体类</p>
<p><strong>Bookorg.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bookorg</span>  <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">     <span class="keyword">private</span> BigDecimal bookorgid;</span><br><span class="line">     <span class="keyword">private</span> Orgcandidate orgcandidate;</span><br><span class="line">     <span class="keyword">private</span> Bookorg bookorg;</span><br><span class="line">     <span class="keyword">private</span> String orgcode;</span><br><span class="line">     <span class="keyword">private</span> String orgcnname;</span><br><span class="line">     <span class="keyword">private</span> String orgenname;</span><br><span class="line">     <span class="keyword">private</span> String orgcnshort;</span><br><span class="line">     <span class="keyword">private</span> String orgcnspell;</span><br><span class="line">     <span class="keyword">private</span> String orgenshort;</span><br><span class="line">     <span class="keyword">private</span> String orgenspell;</span><br><span class="line">     <span class="keyword">private</span> BigDecimal orglevel;</span><br><span class="line">     <span class="keyword">private</span> String orgcharger;</span><br><span class="line">     <span class="keyword">private</span> String orgemail;</span><br><span class="line">     <span class="keyword">private</span> String orgaddress;</span><br><span class="line">     <span class="keyword">private</span> String orgremark;</span><br><span class="line">     <span class="keyword">private</span> BigDecimal orgsortid;</span><br><span class="line">     <span class="keyword">private</span> String orgcancelflag;</span><br><span class="line">     <span class="keyword">private</span> Set bookorgs = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">private</span> Set bookpersons = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">private</span> Set addressbooks = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="comment">//get、set方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h2><p>html代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"parentEnterprise"</span> <span class="attr">name</span>=<span class="string">"parentEnterprise"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 30px;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#parentEnterprise"</span>).combotree(</span><br><span class="line">	&#123;</span><br><span class="line">		url : basePath + <span class="string">'getDeptTree'</span>,</span><br><span class="line">		panelWidth : <span class="number">200</span>,</span><br><span class="line">		panelHeight : <span class="number">250</span>,</span><br><span class="line">		lines:<span class="literal">true</span>,</span><br><span class="line">		animate : <span class="literal">false</span>,</span><br><span class="line">		multiple : <span class="literal">false</span>,</span><br><span class="line">		required : <span class="literal">true</span>,</span><br><span class="line">		missingMessage : <span class="string">'请选择上级机构!'</span>,</span><br><span class="line">		onlyLeafCheck : <span class="literal">true</span>,</span><br><span class="line">		cascadeCheck : <span class="literal">false</span>,</span><br><span class="line">		onLoadSuccess : <span class="function"><span class="keyword">function</span>(<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="comment">//设置父节点为展开状态</span></span><br><span class="line">				$(<span class="string">'#parentEnterprise'</span>).combotree(<span class="string">'tree'</span>).tree(<span class="string">'expand'</span>,node.target);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;,</span><br><span class="line">		onSelect : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">				$(<span class="string">'#parentEnterprise'</span>).val(node.id);<span class="comment">// 赋值</span></span><br><span class="line">						&#125;,</span><br><span class="line">		onBeforeExpand : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">				<span class="comment">//将当前所点击的节点id传递到后台</span></span><br><span class="line">				$(<span class="string">'#parentEnterprise'</span>).combotree(<span class="string">'tree'</span>).tree(<span class="string">'options'</span>).url = basePath + <span class="string">'getDeptTree?pid='</span>+node.id;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h2><p>如果我们的所要构建的树的数据量不是很大，就可以进行同步加载，也就是一次性把树加载出来，但是如果数据量很大的话，一次性加载就会出现页面卡死的现象，这里就要采用异步加载的方式，也就是说，我们每次将我们要展开的节点的id传递到后台，查询他的下级机构，然后拼接成json字符串，传递到前台。</p>
<p>action层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">		<span class="comment">//前台父节点id，为null加载根节点</span></span><br><span class="line">		String pid = request.getParameter(<span class="string">"pid"</span>);</span><br><span class="line">		<span class="comment">//获取当前机构下面的子机构的集合</span></span><br><span class="line">		List&lt;Bookorg&gt; departmentList = departmentService.getTreeNode(pid);</span><br><span class="line">		<span class="comment">//定义构成tree json字符串</span></span><br><span class="line">		String jsonStr = <span class="string">""</span>;</span><br><span class="line">		<span class="comment">// 定义一个树形结构实体</span></span><br><span class="line">		List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//循环遍历子机构</span></span><br><span class="line">			<span class="keyword">for</span> (Bookorg department : departmentList) &#123;</span><br><span class="line">				<span class="comment">// 构建树节点信息</span></span><br><span class="line">				TreeNode node = <span class="keyword">new</span> TreeNode();</span><br><span class="line">				<span class="comment">//设置节点id</span></span><br><span class="line">				node.setId(department.getBookorgid().longValue());</span><br><span class="line">				<span class="comment">//设置节点名称</span></span><br><span class="line">				node.setText(department.getOrgcnname());</span><br><span class="line">				<span class="comment">//设置该节点父级节点id</span></span><br><span class="line">				<span class="keyword">if</span> (department.getBookorg() == <span class="keyword">null</span>) &#123;</span><br><span class="line">					node.setParentId(<span class="keyword">null</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					node.setParentId(department.getBookorg().getBookorgid()</span><br><span class="line">							.longValue());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 判断当前节点是否有子节点，node 的 state 为close 则节点设置为文件夹，为open 则为文件</span></span><br><span class="line">				List&lt;Bookorg&gt; bookorgs = departmentService</span><br><span class="line">						.getTreeNode(department.getBookorgid().toString());</span><br><span class="line">				<span class="keyword">if</span> (bookorgs != <span class="keyword">null</span> &amp;&amp; !bookorgs.isEmpty()) &#123;</span><br><span class="line">					node.setState(<span class="string">"closed"</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					node.setState(<span class="string">"open"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 将node节点添加到集合中</span></span><br><span class="line">				list.add(node);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//将集合转换成json字符串</span></span><br><span class="line">			jsonStr = JsonUtil.listToJson(list);</span><br><span class="line">			<span class="comment">//返回到前台页面</span></span><br><span class="line">			request.setAttribute(<span class="string">"responseText"</span>, jsonStr);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>service层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Bookorg&gt; <span class="title">getTreeNode</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">		StringBuffer hql=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">		hql=hql.append(<span class="string">"from Bookorg b where  "</span>);</span><br><span class="line">		<span class="keyword">if</span> (pid == <span class="keyword">null</span> || <span class="string">""</span>.equals(pid)) &#123;</span><br><span class="line">			<span class="comment">//返回跟节点</span></span><br><span class="line">			hql=hql.append(<span class="string">" b.bookorg is null and b.orgcancelflag = 1 order by b.orgsortid asc "</span>);</span><br><span class="line">			<span class="keyword">return</span> departmentDao.getTreeNode(hql,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//异步加载当前id下的子节点</span></span><br><span class="line">			hql=hql.append(<span class="string">" b.bookorg.bookorgid= ? and b.orgcancelflag = 1  order by b.orgsortid asc "</span>);</span><br><span class="line">			<span class="keyword">return</span> departmentDao.getTreeNode(hql,<span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> BigDecimal(pid)&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>Dao层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getTreeNode</span><span class="params">(String hql, Object[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hql != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().find(hql, values);</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/img/20161021/2.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止树的构建基本上就结束了，其实树的构建本质上就是字符串的拼接，只要我们理解了树节点的相关属性，根据自己的业务需求就可以很快的构建一颗树出来，ok，今天就到此为止了。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> easyUI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle如何查询某条记录的上下两条记录]]></title>
      <url>/2016/10/21/tech-db-find-neighbouring/</url>
      <content type="html"><![CDATA[<p>今天在做部门和人员的排序的时候，需要根据某一条记录查询他的前一条记录和后一条记录。本来之前是想通过伪列的形式去查询，然后再循环遍历，便可以达到要求，但是，想了下，oracle是否有这样的函数可以一条sql查询呢，然后上百度查询了下，果然是有的，所以特意记录一下，方便日后查找。</p>
<a id="more"></a>
<p>oracle 可以使用 <strong>lead、lag</strong> 函数查询已有记录的上一条和下一条记录。</p>
<p>表结构如下</p>
<p><img src="http://og1m51u2s.bkt.clouddn.com/2016121043024QQ20161210-100447@2x.png" alt="2016121043024QQ20161210-100447@2x.png"></p>
<p>如要查询Staffno是6-1102的前一条记录：</p>
<pre><code class="sql"><span class="keyword">select</span> * <span class="keyword">from</span> staff <span class="keyword">where</span> staff_no=(<span class="keyword">select</span> c.p <span class="keyword">from</span> (<span class="keyword">select</span> staff_no,lag(staff_no,<span class="number">1</span>,<span class="number">0</span>)  <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> staff_no) <span class="keyword">as</span> p <span class="keyword">from</span> staff) c <span class="keyword">where</span> c.staff_no=<span class="string">'6-1102'</span>)
</code></pre>
<p>查询期后一条记录</p>
<pre><code class="sql"><span class="keyword">select</span> * <span class="keyword">from</span> staff <span class="keyword">where</span> staff_no=(<span class="keyword">select</span> c.n <span class="keyword">from</span> (<span class="keyword">select</span> staff_no,<span class="keyword">lead</span>(staff_no,<span class="number">1</span>,<span class="number">0</span>)  <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> staff_no) <span class="keyword">as</span> n <span class="keyword">from</span> staff) c <span class="keyword">where</span> c.staff_no=<span class="string">'6-1102'</span>)
</code></pre>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客进阶教程]]></title>
      <url>/2016/09/29/tech-hexo-advance/</url>
      <content type="html"><![CDATA[<p>前几天写了一篇关于如何用hexo+github来搭建个人的博客网站，最近项目验收完成了，终于可以有时间把接下来的教程完成，ok，废话不多说，咱们直接开始吧！</p>
<a id="more"></a>
<h2 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h2><p>标签页需要我们自己去新建，默认是不显示的 </p>
<ol>
<li><p>在终端窗口下，进入到<strong>hexo站点</strong>文件夹下，输入如下命令 </p>
<pre><code>$ hexo new page tags
</code></pre></li>
<li><p>进入到hexo/source/tags/目录下，用markdown编辑器打开index.md文件，主题将自动为这个页面显示标签云。显示如下</p>
<pre><code>title: 标签
date: 2014-12-22 12:39:04
type: &quot;tags&quot;
---
</code></pre></li>
<li><p>修改主题配置文件，添加tags到menu中，显示如下：</p>
<pre><code>menu:
  home: /
  archives: /archives
  tags: /tags
</code></pre></li>
</ol>
<h2 id="添加分类页"><a href="#添加分类页" class="headerlink" title="添加分类页"></a>添加分类页</h2><p>大致的过程是跟添加标签页是一个意思，这里就不在阐述，<a href="http://theme-next.iissnan.com/theme-settings.html#categories-page" target="_blank" rel="noopener">点我</a></p>
<blockquote>
<p>如果有启用 多说 或者 Disqus 评论，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false</p>
</blockquote>
<h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><ol>
<li><p>打开主题配置文件，即 Hexo/themes/next/_config.yml 在 menu 下添加字段，名称任意，只要自己能区分出来就行，比如我添加的是 board 字段，下面全部是以 board 为例。</p>
<pre><code>menu:
  home: /
  categories: /categories
  about: /about
  archives: /archives
  tags: /tags
  commonweal: /404.html
  board: /board
</code></pre><p> 在 menu_icons 下为留言板设定一个图标，我用的是 book 这个图标，如果想要设定为其他图标，请访问：<a href="https://link.zhihu.com/?target=http%3A//fontawesome.io/icons/" target="_blank" rel="noopener">Font Awesome Icons</a>， 然后把自己喜欢的图标后的关键字填写到 board后面。</p>
<pre><code>menu_icons:
  enable: true
  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome
  home: home
  about: user
  categories: th
  tags: tags
  archives: archive
  commonweal: heartbeat
  board: book
</code></pre></li>
<li><p>进入 Hexo/source ，创建一个 board 文件夹</p>
</li>
<li><p>打开刚才创建的文件夹，新建一个 index.md 文件</p>
</li>
<li><p>打开创建的 index.md，在开头添加</p>
<pre><code>title: board
date: 2016-07-07 21:43:11
comments: ture
---
</code></pre></li>
<li><p>打开 Hexo\themes\next\languages 文件夹，找到当前使用的语言<br>在 menu 下添加 borad 字段</p>
<pre><code>menu:
      home: 首页
      archives: 归档
      categories: 分类
      tags: 标签
      about: 关于
      search: Search
      commonweal: 公益404
      board: 留言
</code></pre></li>
<li><p>大双引号效果，只需要在Hexo/source/border/下编辑index.md，添加</p>
<pre><code>&lt;blockquote class=&quot;blockquote-center&quot;&gt;你想写的东西&lt;/blockquote&gt;
</code></pre></li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>hexo 默认的主题显得有些单调，那该如何才能更换hexo的主题呢？在这里推荐一款比较简约的主题<strong>next</strong></p>
<ol>
<li>首先下载<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">next</a>主题安装包,下载好以后，解压该压缩文件，重命名为next</li>
<li>然后将解压后的整个文件夹复制到F:\Hexo\themes目录下</li>
<li>打开站点配置文件(hexo 根目录下的_config.yml文件，后面都统一称为<strong>站点配置文件</strong>)，找到theme字段，将其值改为next</li>
<li><p>执行命令hexo -g , hexo -s,在浏览器输入 <a href="http://localhost：4000" target="_blank" rel="noopener">http://localhost：4000</a> 校验主题是否更改成功,如果显示如下的图所示，说明安装成功。</p>
<p> <img src="/img/20160929/hexoTheme.png" alt="主题更换成功"></p>
</li>
<li><p>主题更换成功以后，就可以更改主题的标题、头像、菜单、侧边栏，具体参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题官方文档</a>，写的很详细，在这里就不详细叙述了。</p>
</li>
</ol>
<h2 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h2><p>hexo 博客本身是不带有评论系统的，但是为了方便博主与读者之间交流，我就需要接入第三方服务—-<strong>多说评论</strong></p>
<ol>
<li>登录<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>后在首页选择 “我要安装”。</li>
<li>创建站点，填写表单。多说域名 这一栏填写的即是你的 duoshuo_shortname，如图：<br> <img src="/img/20160929/duoshuo.png" alt="多说"></li>
<li>创建站点完成后在 站点配置文件 中新增 duoshuo_shortname 字段，值设置成上一步中的值。</li>
<li>在多说的设置界面，可以自定义文本，默认头像，外观主题，下面我贴出自己的评论框的自定义的css样式，给大家一个参考。</li>
</ol>
<pre><code>#ds-reset .ds-avatar img,
#ds-recent-visitors .ds-avatar img {
width: 54px;
height: 54px;     /*设置图像的长和宽，这里要根据自己的评论框情况更改*/
border-radius: 27px;     /*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/
-webkit-border-radius: 27px;     /*圆角效果：兼容webkit浏览器*/
-moz-border-radius: 27px;
box-shadow: inset 0 -1px 0 #3333sf;     /*设置图像阴影效果*/
-webkit-box-shadow: inset 0 -1px 0 #3333sf;
-webkit-transition: 0.4s;
-webkit-transition: -webkit-transform 0.4s ease-out;
transition: transform 0.4s ease-out;     /*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*/
-moz-transition: -moz-transform 0.4s ease-out;
}

#ds-reset .ds-avatar img:hover,
#ds-recent-visitors .ds-avatar img:hover {

/*设置鼠标悬浮在头像时的CSS样式*/    box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
-webkit-box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
transform: rotateZ(360deg);     /*图像旋转360度*/
-webkit-transform: rotateZ(360deg);
-moz-transform: rotateZ(360deg);
}

#ds-thread #ds-reset .ds-textarea-wrapper textarea {

}

#ds-recent-visitors .ds-avatar {
float: left
}
/*隐藏多说底部版权*/
#ds-thread #ds-reset .ds-powered-by {
display: none;
}
</code></pre><h2 id="文章统计与站点统计"><a href="#文章统计与站点统计" class="headerlink" title="文章统计与站点统计"></a>文章统计与站点统计</h2><ol>
<li><p>站点统计用的是<a href="http://service.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>，传送门（<a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">点我</a>），next主题官网写的比较详细，我这里就不在阐述了哦</p>
<p> <img src="/img/20160929/不蒜子统计.png" alt=""></p>
</li>
<li><p>文章统计，再次召唤传送门(<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#" target="_blank" rel="noopener">点我</a>)</p>
</li>
</ol>
<h2 id="背景效果"><a href="#背景效果" class="headerlink" title="背景效果"></a>背景效果</h2><ol>
<li>把 js 文件 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 放在\themes\next\source\js\src文件目录下</li>
<li><p>更新\themes\next\layout \ _layout.swig文件，在末尾（在前面引用会出现找不到的bug）添加以下 js 引入代码：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;
</code></pre></li>
</ol>
<h2 id="站点搜索"><a href="#站点搜索" class="headerlink" title="站点搜索"></a>站点搜索</h2><ol>
<li><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：</p>
<pre><code>$ npm install hexo-generator-search --save
</code></pre></li>
<li><p>在站点配置文件中，新增以下内容到任意位置</p>
<pre><code>search:
      path: search.xml
      field: post
</code></pre></li>
</ol>
<h2 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h2><p>主要是修改 Hexo 目录下 \themes\next\source\css\_common\components\sidebar\sidebar-author.styl 文件，以下是我的配置文件，大家可以参考一下。</p>
<pre><code>.site-author-image {
  display: block;
  margin: 0 auto;
  padding: $site-author-image-padding;
  max-width: $site-author-image-width;
  height: $site-author-image-height;
  border: $site-author-image-border-width solid $site-author-image-border-color;

  /* 头像圆形 */
  border-radius: 80px;
  -webkit-border-radius: 80px;
  -moz-border-radius: 80px;
  box-shadow: inset 0 -1px 0 #333sf;

  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 
    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/
  -webkit-animation: play 2s ease-out 1s 1;
  -moz-animation: play 2s ease-out 1s 1;
  animation: play 2s ease-out 1s 1; 

  /* 鼠标经过头像旋转360度 */
  -webkit-transition: -webkit-transform 1.5s ease-out;
  -moz-transition: -moz-transform 1.5s ease-out;
  transition: transform 1.5s ease-out;
}

img:hover {
  /* 鼠标经过停止头像旋转 
  -webkit-animation-play-state:paused;
  animation-play-state:paused;*/

  /* 鼠标经过头像旋转360度 */
  -webkit-transform: rotateZ(360deg);
  -moz-transform: rotateZ(360deg);
  transform: rotateZ(360deg);
}

/* Z 轴旋转动画 */
@-webkit-keyframes play {
  0% {
    -webkit-transform: rotateZ(0deg);
  }
  100% {
    -webkit-transform: rotateZ(-360deg);
  }
}
@-moz-keyframes play {
  0% {
    -moz-transform: rotateZ(0deg);
  }
  100% {
    -moz-transform: rotateZ(-360deg);
  }
}
@keyframes play {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(-360deg);
  }
}

.site-author-name {
  margin: $site-author-name-margin;
  text-align: $site-author-name-align;
  color: $site-author-name-color;
  font-weight: $site-author-name-weight;
}

.site-description {
  margin-top: $site-description-margin-top;
  text-align: $site-description-align;
  font-size: $site-description-font-size;
  color: $site-description-color;
}
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ok，基本上大致的配置就这么多吧，还有些东西，比如打赏啊，公益404，友情链接，大家都可以在<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">next主题官网</a>可以看到配置教程，在这里就不多说了，有不懂得同学可以留言，我会第一时间回复你的。ok，睡觉去了，好困。。。</p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo+github搭建个人博客网站]]></title>
      <url>/2016/09/25/tech-hexo-github/</url>
      <content type="html"><![CDATA[<p>之前一直想搭建一个自己的个人博客，用来记录一些自己的个技术笔记，但是因为种种原因被耽搁了，趁周末有时间，终于把博客搭建好了，下面记录一下整个搭建的过程，也给想搭建博客的同学一个参考。</p>
<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>:因为 hexo 整个博客框架是基于node.js的，所以必须安装node.js环境。我安装的是最新的版本，v4.5.0，安装过程一路 next 即可。</li>
<li><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">git客户端</a>:用来将hexo相关文件提交到github上去，安装过程一路next。</li>
</ul>
<h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><p>环境准备好以后，我们便可以安装hexo博客框架。</p>
<p>桌面鼠标右击，选择Git Bash Here ，打开git命令行窗口，如下图</p>
<p><img src="/img/gitbash.png" alt="Git Bash Here"></p>
<p>输入安装命令，回车</p>
<p><code>npm install -g hexo</code></p>
<p>然后在指定的盘新建一个hexo文件夹，进入到新建的这个文件夹内，点击鼠标右键，选择Git Bash Here，输入初始化指令，回车，就会看到生成一系列的文件：</p>
<p><code>hexo init</code></p>
<p>安装相关的依赖包，输入下面的指令，回车</p>
<p><code>npm install</code></p>
<blockquote>
<p>下面来解说一下各个文件夹的作用，指定文件夹的目录如下：</p>
</blockquote>
<p><img src="/img/direction.png" alt="hexo文件目录"></p>
<blockquote>
<ul>
<li>_config.yml：用来配置站点信息，大多数配置都在这里进行。</li>
<li>package.json：管理我们安装的一些插件，我们要删除某些插件的时候，可以在这里进行。</li>
<li>scaffolds：模板文件夹。</li>
<li>source：源文件夹是存放用户资源的地方,他下面有一个_posts，文件夹，我们发表的文件就存放在这个文件夹下。</li>
<li>themes：主题文件夹，Hexo 会根据主题来生成静态页面。</li>
</ul>
</blockquote>
<p>接着在hexo文件夹下执行</p>
<p><code>hexo g</code></p>
<p><code>hexo s</code></p>
<p>然后用浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，就能看到hexo初始化界面，是不是很激动呢？但是这个界面只有我们自己可以看到，要想别人看到怎么办呢？ok，接下来我们就来完成这一步骤。</p>
<h2 id="创建一个github账号"><a href="#创建一个github账号" class="headerlink" title="创建一个github账号"></a>创建一个github账号</h2><p>已经有账号的暂时忽略这一步，传送门：<a href="https://github.com/" target="_blank" rel="noopener">github</a>，没有的话就老老实实创建一个吧。</p>
<h2 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h2><p>我们有了账号以后，便可以创建repository，中文即是仓库，如下图所示</p>
<p><img src="/img/repository.png" alt="仓库"></p>
<p>这里仓库的名字要注意，格式应该是：<strong>你的github账号名字.github.io</strong>，像我的就是 wangleeyom.github.io。为什么要这么设置，我也不太清楚，可能是github约定的吧</p>
<h2 id="部署文件到github"><a href="#部署文件到github" class="headerlink" title="部署文件到github"></a>部署文件到github</h2><p>用notepad++或者sublime打开 hexo 文件夹下的 _config.yml 文件，找到关键字 deploy ，然后修改成如下，我就用我自己的做示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/wangleeyom/wangleeyom.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>需要注意的一点：<strong>冒号后面要有一个空格</strong>，比如 type 冒号后面要加一个空格，很多同学部署不上去就是问题出在这里，需要注意，修改完以后，保存即可。</p>
<p>但是这样还不能连接到 github ，我们还需要配置SSH，找到路径C:\Users\leeyom.ssh，如果已经存在SSH Keys ，直接删除.ssh 文件夹下的所有的文件，如下图。 </p>
<p><img src="/img/sshKeys.png" alt="SSH Keys"></p>
<p>然后输入以下指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;635709492@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>这个邮箱是我们当初注册github的时候填写的邮箱，然后回车，需要回车三次。最后出现如下的结果</p>
<p><img src="/img/keygen.png" alt="keygen"></p>
<blockquote>
<p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p>
</blockquote>
<p>然后再输入指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure>
<p>继续输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>到这里后，可能会出现如下的错误，我的就出现如下的错误：</p>
<p><img src="/img/mistake.png" alt="mistake"></p>
<blockquote>
<p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p>
</blockquote>
<p>如果你出现了上面的错误，不要着急，输入下面的指令即可以解决，如果没有，则跳过这步。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure>
<p><img src="/img/keysuccess.png" alt="添加SSH key到Github"></p>
<blockquote>
<p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p>
</blockquote>
<p>接着拷贝key，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>打开github，点击setting，然后再点击SSH and GPG keys，如下图：</p>
<p><img src="/img/sshSetting.png" alt=""></p>
<p>接下来</p>
<p><img src="/img/SSHkeys2.png" alt=""></p>
<p>测试一下，输入如下命令，然后会让你输入yes/no，你输入yes即可。以上ssh就配好了，我们就可以将项目部署到github上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>执行以下命令部署项目到github</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>但是输入hexo d 可能会报 <strong>ERROR Deployer not fount： git</strong>错误,这是因为没有安装hexo-deployer-git这个模块，无法识别该指令，安装该模块即可，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>可能网速的原因，安装该模块的时候，很慢，需要等待一会儿。我安装的时候一直没动静，以为挂掉了，试了几次都不行。后来出去有事，就执行命令后就不管他了，回来后，就安装好了。</p>
<p>安装好以后输入 hexo d ，会有弹出框，输入github账号密码即可，就可以访问了。浏览器输入 wangleeyom.github.io 即可访问，烦人的404没有了，出现的是 hexo 默认界面。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>假如一直出现如下图的错误，一直无法发布到github上</p>
<p><img src="/img/mistake_2.png" alt=""></p>
<p>尝试将站点配置_config.yml的deploy部分更改成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git://github.com/wangleeyom/wangleeyom.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>也就是把https换成git试试。 </p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，hexo 的搭建就完成了，是不是很激动呢？别着急，界面是不是很丑？咋发表文章呢？哈哈。。后面有时间的话会讲解如何发布文章，添加tags，分类，更换主题，如何绑定域名，如何接入第三方的服务等一系列的问题，敬请期待。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>本文章很大一部分参考的 <a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a> ，感谢该作者。</li>
<li>潘柏信：<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">http://www.jianshu.com/p/465830080ea9</a></li>
<li>next主题官网：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></li>
<li>hexo 中文网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>常用的指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github上</span><br><span class="line">hexo n #完整命令为hexo new,用于新建一篇文章</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/09/23/life-hello-world/</url>
      <content type="html"><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p>Hello, 欢迎你阅读我的博客，我是一名90后的程序员，主要从事web开发。我有一个小小的愿望。我希望凭借自己的努力，净化程序员的环境，提升程序员的层次。愿IT界再无黑心企业的剥削，无人自嘲”码农”、”码畜”，技术人员受到足够的尊重，写程序重新成为一种创造性的劳动。软件行业，重新成为令人羡慕的行业。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> helloWorld </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
